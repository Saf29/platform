// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type AddAddressInput struct {
	Name               string  `json:"name"`
	FirstName          string  `json:"firstName"`
	LastName           string  `json:"lastName"`
	CompanyName        *string `json:"companyName"`
	AddressDescription string  `json:"addressDescription"`
	City               string  `json:"city"`
	State              string  `json:"state"`
	Country            string  `json:"country"`
	PostCode           int     `json:"postCode"`
	Latitude           float64 `json:"latitude"`
	Longitute          float64 `json:"longitute"`
}

type AddAirportSurchargeInput struct {
	AirportLocation  string `json:"airportLocation"`
	PickUpSurcharge  string `json:"pickUpSurcharge"`
	DropOffSurcharge string `json:"dropOffSurcharge"`
	VehicleType      string `json:"vehicleType"`
	IsActive         bool   `json:"isActive"`
}

type AddAppVersionInput struct {
	MinimumVersion string `json:"minimumVersion"`
	LatestVersion  string `json:"latestVersion"`
	DownloadURL    string `json:"downloadUrl"`
	Channel        string `json:"channel"`
}

type AddBankDetailsInput struct {
	Email              string  `json:"email"`
	AccountHolderName  string  `json:"accountHolderName"`
	AccountNumber      int     `json:"accountNumber"`
	BankName           string  `json:"bankName"`
	BankLocation       string  `json:"bankLocation"`
	BankCountry        string  `json:"bankCountry"`
	SwiftCode          string  `json:"swiftCode"`
	IfscCode           string  `json:"ifscCode"`
	Metadata           *string `json:"metadata"`
	Country            string  `json:"country"`
	Currency           string  `json:"currency"`
	DefaultForCurrency bool    `json:"defaultForCurrency"`
	Fingerprint        string  `json:"fingerprint"`
	RoutingNumber      string  `json:"routingNumber"`
}

type AddBannerInput struct {
	BannerName      string     `json:"bannerName"`
	BannerImage     string     `json:"bannerImage"`
	DisplayOrder    int        `json:"displayOrder"`
	RedirectURL     string     `json:"redirectURL"`
	TimePeriod      string     `json:"timePeriod"`
	AddedDate       string     `json:"addedDate"`
	TotalImpression string     `json:"totalImpression"`
	UsedImpression  string     `json:"usedImpression"`
	Validity        Validity   `json:"validity"`
	ClickCount      ClickCount `json:"clickCount"`
	IsActive        bool       `json:"isActive"`
}

type AddBusinessTripReasonInput struct {
	TripReason       string `json:"tripReason"`
	ProfileShortName string `json:"profileShortName"`
	OrganizationType string `json:"organizationType"`
	ProfileTitle     string `json:"profileTitle"`
	TitleDescription string `json:"titleDescription"`
	Reason           string `json:"reason"`
	IsActive         bool   `json:"isActive"`
}

type AddCancelReasonInput struct {
	Reason      string `json:"reason"`
	ServiceType string `json:"serviceType"`
	Order       string `json:"order"`
	IsActive    bool   `json:"isActive"`
}

type AddCityInput struct {
	CountryName string `json:"countryName"`
	CountryCode string `json:"countryCode"`
	StateName   string `json:"stateName"`
	StateCode   string `json:"stateCode"`
	CityName    string `json:"cityName"`
	IsActive    bool   `json:"isActive"`
}

type AddCountryInput struct {
	CountryName     string        `json:"countryName"`
	Code            string        `json:"code"`
	PhoneCode       string        `json:"phoneCode"`
	DistanceUnit    DistanceUnits `json:"distanceUnit"`
	EmergencyNumber string        `json:"emergencyNumber"`
	Tax             string        `json:"tax"`
	IsActive        bool          `json:"isActive"`
}

type AddCouponInput struct {
	Code           string           `json:"code"`
	Description    string           `json:"description"`
	DiscountAmount float64          `json:"discountAmount"`
	DiscountType   string           `json:"discountType"`
	Validity       string           `json:"validity"`
	ValidityStart  string           `json:"validityStart"`
	ValidityExpire string           `json:"validityExpire"`
	UsageLimit     int              `json:"usageLimit"`
	UsedLimit      int              `json:"usedLimit"`
	Type           CouponType       `json:"type"`
	ServiceType    CouponSystemType `json:"serviceType"`
	IsActive       bool             `json:"isActive"`
}

type AddCurrencyInput struct {
	Country         string `json:"country"`
	Name            string `json:"name"`
	CurrencyCode    string `json:"currencyCode"`
	Ratio           string `json:"ratio"`
	ThresholdAmount string `json:"thresholdAmount"`
	Symbol          string `json:"symbol"`
	IsDefault       bool   `json:"isDefault"`
}

type AddCustomerInput struct {
	Email            string         `json:"email"`
	FirstName        string         `json:"firstName"`
	LastName         string         `json:"lastName"`
	Role             string         `json:"role"`
	Username         string         `json:"username"`
	IsPayingCustomer bool           `json:"isPayingCustomer"`
	AvatarURL        string         `json:"avatarURL"`
	Shipping         *ShippingInput `json:"shipping"`
	Billing          *BillingInput  `json:"billing"`
}

type AddDeliveryChargeInput struct {
	LocationName                    string `json:"locationName"`
	OrderPrice                      int    `json:"orderPrice"`
	OrderDeliveryChargesAboveAmount int    `json:"orderDeliveryChargesAboveAmount"`
	OrderDeliveryChargesBelowAmount int    `json:"orderDeliveryChargesBelowAmount"`
	FreeOrderDeliveryCharges        int    `json:"freeOrderDeliveryCharges"`
	FreeDeliveryRadius              int    `json:"freeDeliveryRadius"`
	OrderTotal                      int    `json:"orderTotal"`
	IsActive                        bool   `json:"isActive"`
}

type AddDeliveryChargesUtilityInput struct {
	Location                        string `json:"location"`
	OrderPrice                      int    `json:"orderPrice"`
	OrderDeliveryChargesAboveAmout  int    `json:"orderDeliveryChargesAboveAmout"`
	OrderDeliveryChargesBelowAmount int    `json:"orderDeliveryChargesBelowAmount"`
	FreeDeliveryForOrderAmountAbove int    `json:"freeDeliveryForOrderAmountAbove"`
	FreeDeliveryRadius              int    `json:"freeDeliveryRadius"`
}

type AddDeliveryVehicleTypeInput struct {
	VehicleType                     string  `json:"vehicleType"`
	Location                        string  `json:"location"`
	DeliveryChargeForCompletedOrder float64 `json:"deliveryChargeForCompletedOrder"`
	DeliveryChargeForCancelledOrder float64 `json:"deliveryChargeForCancelledOrder"`
	DeliveryRadius                  float64 `json:"deliveryRadius"`
	Order                           int     `json:"order"`
	IsActive                        bool    `json:"isActive"`
}

type AddDocumentInput struct {
	ExpiryDate   string               `json:"expiryDate"`
	Name         string               `json:"name"`
	URL          string               `json:"url"`
	BelongsTo    string               `json:"belongsTo"`
	UploaderType DocumentUploaderType `json:"uploaderType"`
	IsActive     bool                 `json:"isActive"`
}

type AddEmailTemplateInput struct {
	Subject    string `json:"subject"`
	Purpose    string `json:"purpose"`
	From       string `json:"from"`
	TextBody   string `json:"textBody"`
	HTMLBody   string `json:"htmlBody"`
	Language   string `json:"language"`
	TemplateID string `json:"templateId"`
}

type AddEmergencyContactInput struct {
	Name     string `json:"name"`
	MobileNo int    `json:"mobileNo"`
	EmailID  string `json:"emailID"`
}

type AddEnterpriseAccountInput struct {
	OrganizationName string           `json:"organizationName"`
	OrganizationType string           `json:"organizationType"`
	PaymentMethod    string           `json:"paymentMethod"`
	Email            string           `json:"email"`
	Country          string           `json:"country"`
	State            string           `json:"state"`
	City             string           `json:"city"`
	Address          *AddAddressInput `json:"address"`
	ZipCode          string           `json:"zipCode"`
	Language         string           `json:"language"`
	PaymentBy        PaymentBy        `json:"paymentBy"`
	Phone            string           `json:"phone"`
	IsActive         bool             `json:"isActive"`
}

type AddFAQCategoryInput struct {
	IsActive     bool   `json:"isActive"`
	DisplayOrder int    `json:"displayOrder"`
	Label        string `json:"label"`
}

type AddFAQInput struct {
	Category     string `json:"category"`
	IsActive     bool   `json:"isActive"`
	DisplayOrder int    `json:"displayOrder"`
	Question     string `json:"question"`
	Answer       string `json:"answer"`
}

type AddFoodDeliveryLabelInput struct {
	Code                   string `json:"code"`
	ValueInEnglishLanguage string `json:"valueInEnglishLanguage"`
	LanguageLabel          string `json:"languageLabel"`
	IsActive               bool   `json:"isActive"`
}

type AddGeneralLabelInput struct {
	Code                   string `json:"code"`
	ValueInEnglishLanguage string `json:"valueInEnglishLanguage"`
	LanguageLabel          string `json:"languageLabel"`
	IsActive               bool   `json:"isActive"`
}

type AddGeoFenceLocationInput struct {
	Name         string `json:"name"`
	Country      string `json:"country"`
	LocationFor  string `json:"locationFor"`
	LocationType string `json:"LocationType"`
	IsActive     bool   `json:"IsActive"`
	GeoJSON      string `json:"GeoJSON"`
}

type AddGeoFenceRestrictedAreaInput struct {
	Address         string       `json:"address"`
	Area            string       `json:"area"`
	IsActive        bool         `json:"isActive"`
	GeoLocationArea string       `json:"geoLocationArea"`
	RestrictArea    RestrictArea `json:"restrictArea"`
	RestrictType    RestrictType `json:"restrictType"`
}

type AddGroceryDeliveryLabelInput struct {
	Code                   string `json:"code"`
	ValueInEnglishLanguage string `json:"valueInEnglishLanguage"`
	LanguageLabel          string `json:"languageLabel"`
	IsActive               bool   `json:"isActive"`
}

type AddHelpCategoryInput struct {
	IsActive    bool            `json:"isActive"`
	Order       string          `json:"order"`
	Title       string          `json:"title"`
	CategoryFor HelpCategoryFor `json:"categoryFor"`
}

type AddHelpDetailInput struct {
	Category HelpDetailCategory `json:"category"`
	IsActive bool               `json:"isActive"`
	Order    string             `json:"order"`
	Question string             `json:"question"`
	Answer   string             `json:"answer"`
}

type AddLocationWiseFareInput struct {
	SourceLocation      string `json:"sourceLocation"`
	DestinationLocation string `json:"destinationLocation"`
	FlatFare            string `json:"flatFare"`
	VehicleType         string `json:"vehicleType"`
	IsActive            bool   `json:"isActive"`
}

type AddManageDocumentInput struct {
	DocumentFor  DocumentFor `json:"documentFor"`
	Country      string      `json:"country"`
	ExpireOnDate bool        `json:"expireOnDate"`
	DocumentName string      `json:"documentName"`
	IsActive     bool        `json:"isActive"`
}

type AddOAuthApplicationInput struct {
	AppName            string             `json:"appName"`
	PublisherName      string             `json:"publisherName"`
	ClientDescription  string             `json:"clientDescription"`
	RedirectURL        string             `json:"redirectURL"`
	Scopes             []string           `json:"scopes"`
	Developers         []string           `json:"developers"`
	DevelopmentUsers   []string           `json:"developmentUsers"`
	AppIcon            string             `json:"appIcon"`
	AllowImplicitGrant AllowImplicitGrant `json:"allowImplicitGrant"`
	WhiteListedDomains []string           `json:"whiteListedDomains"`
	TermsOfServiceURL  string             `json:"termsOfServiceURL"`
	PrivacyURL         string             `json:"privacyURL"`
	Website            string             `json:"website"`
	ContactEmail       string             `json:"contactEmail"`
}

type AddOrderInput struct {
	OrderItems         *OrderItemInput   `json:"orderItems"`
	ServiceType        string            `json:"serviceType"`
	Coupon             string            `json:"coupon"`
	ProviderID         string            `json:"providerID"`
	Currency           *CurrencyInput    `json:"currency"`
	DiscountAmount     float64           `json:"discountAmount"`
	DiscountTax        float64           `json:"discountTax"`
	ShippingTotal      float64           `json:"shippingTotal"`
	ShippingTax        float64           `json:"shippingTax"`
	CartTax            float64           `json:"cartTax"`
	OrderTotalAmount   float64           `json:"orderTotalAmount"`
	TotalTax           float64           `json:"totalTax"`
	PricesIncludeTax   bool              `json:"pricesIncludeTax"`
	Billing            *BillingInput     `json:"billing"`
	Shipping           *ShippingInput    `json:"shipping"`
	PaymentMethod      PaymentMethodType `json:"paymentMethod"`
	PaymentMethodTitle string            `json:"paymentMethodTitle"`
}

type AddOrderNoteInput struct {
	Author       string `json:"author"`
	Note         string `json:"note"`
	CustomerNote bool   `json:"customerNote"`
	IsActive     bool   `json:"isActive"`
}

type AddOrderStatusUtilityInput struct {
	StatusTitle       string `json:"statusTitle"`
	StatusDescription string `json:"statusDescription"`
	IsActive          bool   `json:"isActive"`
}

type AddPackageType struct {
	ID          string `json:"id"`
	PackageType string `json:"packageType"`
	Language    string `json:"language"`
	IsActive    bool   `json:"isActive"`
}

type AddPackageTypeInput struct {
	PackageType string `json:"packageType"`
	Language    string `json:"language"`
	IsActive    bool   `json:"isActive"`
}

type AddPageInput struct {
	Name        string `json:"name"`
	Title       string `json:"title"`
	Body        string `json:"body"`
	Description string `json:"description"`
	Language    string `json:"language"`
	IsActive    *bool  `json:"isActive"`
}

type AddProductAttributeInput struct {
	Name        string   `json:"name"`
	Slug        string   `json:"slug"`
	Type        string   `json:"type"`
	OrderBy     string   `json:"orderBy"`
	HasArchives bool     `json:"hasArchives"`
	Position    int      `json:"position"`
	Visible     bool     `json:"visible"`
	Variation   bool     `json:"variation"`
	Option      []string `json:"option"`
}

type AddProductAttributeTermInput struct {
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
	MenuOrder   int    `json:"menuOrder"`
	Count       int    `json:"count"`
}

type AddProductBrandInput struct {
	Type          string   `json:"type"`
	IsActive      bool     `json:"isActive"`
	Name          string   `json:"name"`
	Slug          string   `json:"slug"`
	Description   string   `json:"description"`
	Relationships []string `json:"relationships"`
}

type AddProductCategoryInput struct {
	Name         string                `json:"name"`
	Slug         string                `json:"slug"`
	Parent       int                   `json:"parent"`
	Store        string                `json:"store"`
	Description  string                `json:"description"`
	DisplayOrder int                   `json:"displayOrder"`
	Display      string                `json:"display"`
	ServiceType  StoreCategory         `json:"serviceType"`
	MenuCategory string                `json:"menuCategory"`
	MenuOrder    int                   `json:"menuOrder"`
	Count        int                   `json:"count"`
	Image        *AddProductImageInput `json:"image"`
}

type AddProductCollectionInput struct {
	Type          string   `json:"type"`
	IsActive      bool     `json:"isActive"`
	Name          string   `json:"name"`
	Description   string   `json:"description"`
	Slug          string   `json:"slug"`
	Relationships []string `json:"relationships"`
}

type AddProductDownloadInput struct {
	Name string `json:"name"`
	File string `json:"file"`
}

type AddProductImageInput struct {
	Src  string `json:"src"`
	Name string `json:"name"`
	Alt  string `json:"alt"`
}

type AddProductInput struct {
	Name              string                      `json:"name"`
	MenuItem          string                      `json:"menuItem"`
	Slug              string                      `json:"slug"`
	Permalink         string                      `json:"permalink"`
	Type              string                      `json:"type"`
	Status            ProductStatus               `json:"status"`
	IsFeatured        bool                        `json:"isFeatured"`
	ItemTagName       string                      `json:"itemTagName"`
	CatalogVisibility string                      `json:"catalogVisibility"`
	Description       string                      `json:"description"`
	ShortDescription  string                      `json:"shortDescription"`
	Sku               string                      `json:"sku"`
	Price             float64                     `json:"price"`
	RegularPrice      float64                     `json:"regularPrice"`
	ServiceType       StoreCategory               `json:"serviceType"`
	SalePrice         float64                     `json:"salePrice"`
	DateOnSaleFrom    string                      `json:"dateOnSaleFrom"`
	DateOnSaleTo      string                      `json:"dateOnSaleTo"`
	PriceHTML         string                      `json:"priceHtml"`
	OnSale            bool                        `json:"onSale"`
	Purchasable       bool                        `json:"purchasable"`
	TotalSales        int                         `json:"totalSales"`
	Store             string                      `json:"Store"`
	Virtual           bool                        `json:"virtual"`
	DisplayOrder      int                         `json:"displayOrder"`
	Downloadable      bool                        `json:"downloadable"`
	Downloads         []*AddProductDownloadInput  `json:"downloads"`
	DownloadLimit     int                         `json:"downloadLimit"`
	DownloadExpiry    int                         `json:"downloadExpiry"`
	ExternalURL       string                      `json:"externalUrl"`
	ButtonText        string                      `json:"buttonText"`
	TaxStatus         string                      `json:"taxStatus"`
	TaxClass          string                      `json:"taxClass"`
	ManageStock       bool                        `json:"manageStock"`
	StockQuantity     int                         `json:"stockQuantity"`
	StockStatus       string                      `json:"stockStatus"`
	BackOrders        string                      `json:"backOrders"`
	BackOrdersAllowed bool                        `json:"backOrdersAllowed"`
	BackOrdered       bool                        `json:"backOrdered"`
	SoldIndividually  bool                        `json:"soldIndividually"`
	Weight            float64                     `json:"weight"`
	ShippingRequired  bool                        `json:"shippingRequired"`
	ShippingTaxable   bool                        `json:"shippingTaxable"`
	ShippingClass     string                      `json:"shippingClass"`
	ShippingClassID   string                      `json:"shippingClassId"`
	ReviewsAllowed    bool                        `json:"reviewsAllowed"`
	AverageRating     string                      `json:"averageRating"`
	RatingCount       int                         `json:"ratingCount"`
	ParentID          string                      `json:"parentId"`
	PurchaseNote      string                      `json:"purchaseNote"`
	MenuOrder         int                         `json:"menuOrder"`
	MetaData          []*AddProductMetadataInput  `json:"metaData"`
	GroupedProducts   []string                    `json:"groupedProducts"`
	Variations        []string                    `json:"variations"`
	DefaultAttributes []*AddProductAttributeInput `json:"defaultAttributes"`
	Attributes        []*AddProductAttributeInput `json:"attributes"`
	Images            []*AddProductImageInput     `json:"images"`
	Tags              []*AddProductTagInput       `json:"tags"`
	Categories        []*AddProductCategoryInput  `json:"categories"`
	CrossSellIds      []string                    `json:"crossSellIds"`
	UpsellIds         []string                    `json:"upsellIds"`
	RelatedIds        []string                    `json:"relatedIds"`
	Dimensions        *ProductDimensionsInput     `json:"dimensions"`
}

type AddProductMetadataInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type AddProductReviewInput struct {
	ProductID          string                   `json:"productID"`
	Status             ProductStatus            `json:"status"`
	Reviewer           string                   `json:"reviewer"`
	ReviewerEmail      string                   `json:"reviewerEmail"`
	Review             string                   `json:"review"`
	Rating             int                      `json:"rating"`
	Verified           bool                     `json:"verified"`
	ReviewerAvatarURLs *ReviewerAvatarUrlsInput `json:"reviewerAvatarURLs"`
}

type AddProductTagInput struct {
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
	Count       int    `json:"count"`
}

type AddProductVariationInput struct {
	ParentProductID   string                      `json:"parentProductID"`
	Description       string                      `json:"description"`
	Permalink         string                      `json:"permalink"`
	Sku               string                      `json:"sku"`
	Price             float64                     `json:"price"`
	RegularPrice      float64                     `json:"regularPrice"`
	SalePrice         float64                     `json:"salePrice"`
	DateOnSaleFrom    string                      `json:"dateOnSaleFrom"`
	DateOnSaleTo      string                      `json:"dateOnSaleTo"`
	OnSale            bool                        `json:"onSale"`
	Status            ProductStatus               `json:"status"`
	Purchasable       bool                        `json:"purchasable"`
	Virtual           bool                        `json:"virtual"`
	Downloadable      bool                        `json:"downloadable"`
	DownloadLimit     int                         `json:"downloadLimit"`
	DownloadExpiry    int                         `json:"downloadExpiry"`
	TaxStatus         string                      `json:"taxStatus"`
	TaxClass          string                      `json:"taxClass"`
	ManageStock       bool                        `json:"manageStock"`
	StockQuantity     int                         `json:"stockQuantity"`
	StockStatus       string                      `json:"stockStatus"`
	BackOrders        string                      `json:"backOrders"`
	BackOrdersAllowed bool                        `json:"backOrdersAllowed"`
	BackOrdered       bool                        `json:"backOrdered"`
	Weight            float64                     `json:"weight"`
	ShippingClass     string                      `json:"shippingClass"`
	ShippingClassID   string                      `json:"shippingClassId"`
	MenuOrder         int                         `json:"menuOrder"`
	MetaData          []*AddProductMetadataInput  `json:"metaData"`
	Attributes        []*AddProductAttributeInput `json:"attributes"`
	Image             *AddProductImageInput       `json:"image"`
	Dimensions        *ProductDimensionsInput     `json:"dimensions"`
	Downloads         []*AddProductDownloadInput  `json:"downloads"`
}

type AddRentalPackageInput struct {
	Name                   string `json:"name"`
	RentalTotalPrice       int    `json:"rentalTotalPrice"`
	RentalMiles            int    `json:"rentalMiles"`
	RentalHour             int    `json:"rentalHour"`
	AdditionalPricePerMile int    `json:"additionalPricePerMile"`
	AdditionalPricePerMin  int    `json:"additionalPricePerMin"`
}

type AddReviewInput struct {
	JobID                 string     `json:"jobId"`
	UserName              string     `json:"userName"`
	UserAverageRating     float64    `json:"userAverageRating"`
	ProviderAverageRating float64    `json:"providerAverageRating"`
	ProviderName          string     `json:"providerName"`
	UserRating            float64    `json:"userRating"`
	ProviderRating        float64    `json:"providerRating"`
	Type                  ReviewType `json:"type"`
	From                  string     `json:"from"`
	To                    string     `json:"to"`
	Date                  string     `json:"date"`
	Comment               string     `json:"comment"`
	IsActive              bool       `json:"isActive"`
}

type AddRideProfileTypeInput struct {
	ProfileShortName string `json:"profileShortName"`
	OrganizationType string `json:"organizationType"`
	ProfileTitle     string `json:"profileTitle"`
	TitleDescription string `json:"titleDescription"`
	ScreenHeading    string `json:"screenHeading"`
	ScreenTitle      string `json:"screenTitle"`
	ButtonText       string `json:"buttonText"`
	ProfileIcon      string `json:"profileIcon"`
	WelcomePicture   string `json:"welcomePicture"`
	IsActive         *bool  `json:"isActive"`
}

type AddServiceCompanyInput struct {
	Name           string           `json:"name"`
	ProvidersCount int              `json:"providersCount"`
	Email          string           `json:"email"`
	IsActive       bool             `json:"isActive"`
	Country        string           `json:"country"`
	State          string           `json:"state"`
	City           string           `json:"city"`
	Address        *AddAddressInput `json:"address"`
	Zipcode        string           `json:"zipcode"`
	Phone          string           `json:"phone"`
	Language       string           `json:"language"`
	VatNo          string           `json:"vatNo"`
}

type AddServiceInput struct {
	Name                      string           `json:"name"`
	PriceBasedOn              PriceBasedOn     `json:"priceBasedOn"`
	CommissionOnMaterial      bool             `json:"commissionOnMaterial"`
	Category                  ServiceCategory  `json:"category"`
	UserCancellationTimeLimit int              `json:"userCancellationTimeLimit"`
	UserCancellationCharges   float64          `json:"userCancellationCharges"`
	WaitingTimeLimit          int              `json:"waitingTimeLimit"`
	WaitingCharges            float64          `json:"waitingCharges"`
	CategoryViewType          CategoryViewType `json:"categoryViewType"`
	Icon                      string           `json:"icon"`
	Tags                      []string         `json:"tags"`
	DisplayOrder              int              `json:"displayOrder"`
	IsActive                  bool             `json:"isActive"`
}

type AddServiceProviderInput struct {
	FirstName          string           `json:"firstName"`
	LastName           string           `json:"lastName"`
	Email              string           `json:"email"`
	Gender             Gender           `json:"gender"`
	ProfilePicture     string           `json:"profilePicture"`
	Country            string           `json:"country"`
	State              string           `json:"state"`
	City               string           `json:"city"`
	Address            *AddAddressInput `json:"address"`
	ZipCode            int              `json:"zipCode"`
	MobileNumber       int              `json:"mobileNumber"`
	Company            string           `json:"company"`
	Language           string           `json:"language"`
	Currency           string           `json:"currency"`
	BankAccountDetails string           `json:"bankAccountDetails"`
	ServiceDescription string           `json:"serviceDescription"`
	CompanyID          string           `json:"companyID"`
	Metadata           *string          `json:"metadata"`
}

type AddServiceProviderVehicleInput struct {
	VehicleCompanyName  string                      `json:"vehicleCompanyName"`
	VehicleModelName    string                      `json:"vehicleModelName"`
	VehicleYear         string                      `json:"vehicleYear"`
	VehicleNumber       string                      `json:"vehicleNumber"`
	VehicleColor        string                      `json:"vehicleColor"`
	VehicleImageURL     string                      `json:"vehicleImageUrl"`
	VehicleLicensePlate string                      `json:"vehicleLicensePlate"`
	ServiceCompanyID    string                      `json:"serviceCompanyId"`
	EnabledServiceType  []*VehicleServiceTypesInput `json:"enabledServiceType"`
}

type AddServiceSubCategoryInput struct {
	ServiceID    string `json:"serviceID"`
	Name         string `json:"name"`
	Description  string `json:"description"`
	Icon         string `json:"icon"`
	BannerImage  string `json:"bannerImage"`
	DisplayOrder int    `json:"displayOrder"`
	IsActive     bool   `json:"isActive"`
	ServiceType  string `json:"serviceType"`
}

type AddServiceTypeInput struct {
	ServiceCategory      string   `json:"serviceCategory"`
	ServiceSubCategoryID string   `json:"ServiceSubCategoryID"`
	ServiceType          string   `json:"serviceType"`
	ServiceDescription   string   `json:"serviceDescription"`
	Location             string   `json:"location"`
	FareType             FareType `json:"fareType"`
	ServiceCharge        float64  `json:"serviceCharge"`
	Commission           float64  `json:"commission"`
	AllowQuantity        bool     `json:"allowQuantity"`
	DisplayOrder         int      `json:"displayOrder"`
	IsActive             bool     `json:"isActive"`
}

type AddServiceVehicleTypeInput struct {
	VehicleServiceType           VehicleServiceType `json:"vehicleServiceType"`
	EnablePoolRide               bool               `json:"enablePoolRide"`
	VehicleType                  VehicleType        `json:"vehicleType"`
	VehicleCategory              VehicleCategory    `json:"vehicleCategory"`
	Location                     string             `json:"location"`
	PricePerKms                  float64            `json:"pricePerKms"`
	PricePerMinute               float64            `json:"pricePerMinute"`
	BaseFare                     float64            `json:"baseFare"`
	Commission                   float64            `json:"commission"`
	MinimumFare                  float64            `json:"minimumFare"`
	UserCancellationTimeLimit    int                `json:"userCancellationTimeLimit"`
	UserCancellationCharges      float64            `json:"userCancellationCharges"`
	WaitingTimeLimit             int                `json:"waitingTimeLimit"`
	WaitingCharges               float64            `json:"waitingCharges"`
	InTransitWaitingFeePerMinute float64            `json:"inTransitWaitingFeePerMinute"`
	PersonCapacity               int                `json:"personCapacity"`
	PeakTimeSurcharge            bool               `json:"peakTimeSurcharge"`
	NightCharges                 bool               `json:"nightCharges"`
	VehiclePicture               string             `json:"vehiclePicture"`
	Order                        int                `json:"order"`
	IsActive                     bool               `json:"isActive"`
}

type AddSmsTemplateInput struct {
	Code       string `json:"code"`
	Body       string `json:"body"`
	Language   string `json:"language"`
	TemplateID string `json:"templateId"`
	Purpose    string `json:"purpose"`
	Title      string `json:"title"`
}

type AddStateInput struct {
	CountryName string `json:"countryName"`
	CountryCode string `json:"countryCode"`
	StateName   string `json:"stateName"`
	StateCode   string `json:"stateCode"`
	IsActive    bool   `json:"isActive"`
}

type AddStoreInput struct {
	StoreName                string                   `json:"storeName"`
	ServiceCategory          StoreCategory            `json:"serviceCategory"`
	Email                    string                   `json:"email"`
	Password                 string                   `json:"password"`
	StoreAddress             *AddAddressInput         `json:"storeAddress"`
	StoreLocation            []*AddStoreLocationInput `json:"storeLocation"`
	ZipCode                  string                   `json:"zipCode"`
	Country                  string                   `json:"country"`
	State                    string                   `json:"state"`
	ContactPersonName        string                   `json:"contactPersonName"`
	MobileNumber             string                   `json:"mobileNumber"`
	StoreLogo                string                   `json:"storeLogo"`
	Language                 string                   `json:"language"`
	AvailableStoreItemTypes  string                   `json:"availableStoreItemTypes"`
	Slot1                    time.Time                `json:"slot1"`
	Slot2                    time.Time                `json:"slot2"`
	MinimumAmountPerOrder    float64                  `json:"minimumAmountPerOrder"`
	AdditionalPackingCharges float64                  `json:"additionalPackingCharges"`
	MaxOrderQuantity         string                   `json:"maxOrderQuantity"`
	EstimatedOrderTime       int                      `json:"estimatedOrderTime"`
	OfferAppliesOn           OfferAppliesOn           `json:"offerAppliesOn"`
	BankAccountDetails       *UpdateBankDetailsInput  `json:"bankAccountDetails"`
}

type AddStoreLocationInput struct {
	StoreID           *string          `json:"storeID"`
	StoreLocationName string           `json:"storeLocationName"`
	StoreAddress      *AddAddressInput `json:"storeAddress"`
}

type AddStoreVehicleTypeInput struct {
	Type                      string                   `json:"type"`
	Location                  StoreVehicleTypeLocation `json:"location"`
	ChargesForCompletedOrders int                      `json:"chargesForCompletedOrders"`
	ChargesForCancelledOrders int                      `json:"chargesForCancelledOrders"`
	DeliveryRadius            int                      `json:"deliveryRadius"`
	Order                     int                      `json:"order"`
	IsActive                  bool                     `json:"isActive"`
}

type AddUserInput struct {
	FirstName    string `json:"firstName"`
	MobileNo     string `json:"mobileNo"`
	LastName     string `json:"lastName"`
	Email        string `json:"email"`
	Password     string `json:"password"`
	Gender       Gender `json:"gender"`
	ProfilePhoto string `json:"profilePhoto"`
	Phone        int    `json:"phone"`
	Language     string `json:"language"`
	Currency     string `json:"currency"`
	IsActive     bool   `json:"isActive"`
}

type AddUserRoleGroupInput struct {
	Name        string   `json:"name"`
	Roles       []string `json:"roles"`
	Description string   `json:"description"`
}

type AddUserRoleInput struct {
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Permissions []string `json:"permissions"`
}

type AddVehicleMakeInput struct {
	Make     string `json:"make"`
	IsActive bool   `json:"isActive"`
}

type AddVehicleModelInput struct {
	Make     string `json:"make"`
	Model    string `json:"model"`
	IsActive bool   `json:"isActive"`
}

type AddVisitLocationInput struct {
	DestinationTitle string `json:"destinationTitle"`
	Destination      string `json:"destination"`
	IsActive         bool   `json:"isActive"`
}

type AddWebhookInput struct {
	URL         string   `json:"url"`
	EventTopics []string `json:"eventTopics"`
	Secret      string   `json:"secret"`
	IsEnabled   bool     `json:"isEnabled"`
}

type AddWineDeliveryLabelInput struct {
	Code                   string `json:"code"`
	ValueInEnglishLanguage string `json:"valueInEnglishLanguage"`
	LanguageLabel          string `json:"languageLabel"`
	IsActive               bool   `json:"isActive"`
}

//  List of addresses
type AddressConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*AddressEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Address `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node EmergencyContact
type AddressEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Address `json:"node"`
}

//  List of AdminReport
type AdminReportConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*AdminReportEdge `json:"edges"`
	// A list of nodes.
	Nodes []*AdminReport `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node AdminReport
type AdminReportEdge struct {
	Cursor string       `json:"cursor"`
	Node   *AdminReport `json:"node"`
}

//  List of AdvertisementBanner
type AdvertisementBannerConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*AdvertisementBannerEdge `json:"edges"`
	// A list of nodes.
	Nodes []*AdvertisementBanner `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node AdvertisementBanner
type AdvertisementBannerEdge struct {
	Cursor string               `json:"cursor"`
	Node   *AdvertisementBanner `json:"node"`
}

//  List of AirportSurcharge
type AirportSurchargeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*AirportSurchargeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*AirportSurcharge `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node AirportSurcharge
type AirportSurchargeEdge struct {
	Cursor string            `json:"cursor"`
	Node   *AirportSurcharge `json:"node"`
}

type AppSetting struct {
	BookingAcceptTime                           int                        `json:"bookingAcceptTime"`
	SinchSecretKey                              string                     `json:"sinchSecretKey"`
	SinchEnvironmentHost                        string                     `json:"sinchEnvironmentHost"`
	SinchAppKey                                 string                     `json:"sinchAppKey"`
	DeliveryVerificationMethod                  DeliveryVerificationMethod `json:"deliveryVerificationMethod"`
	EnableRideLater                             bool                       `json:"enableRideLater"`
	AllowProviderEditVehicleDetails             bool                       `json:"allowProviderEditVehicleDetails"`
	SurgeCharge                                 bool                       `json:"surgeCharge"`
	PublishDriverDistanceLimit                  int                        `json:"publishDriverDistanceLimit"`
	EnablePool                                  bool                       `json:"enablePool"`
	RadiusAroundUser                            int                        `json:"radiusAroundUser"`
	RadiusAroundUserForPool                     int                        `json:"radiusAroundUserForPool"`
	RadiusAroundUserProviderDestinationForPool  int                        `json:"radiusAroundUserProviderDestinationForPool"`
	RadiusAroundUserForDestinationEnabledDriver int                        `json:"radiusAroundUserForDestinationEnabledDriver"`
	LiveChatLicenceNumber                       string                     `json:"liveChatLicenceNumber"`
	SelectedContacts                            int                        `json:"selectedContacts"`
	MaxDriveDestinations                        string                     `json:"maxDriveDestinations"`
	MaxStopOverPoints                           string                     `json:"maxStopOverPoints"`
	PemFileName                                 string                     `json:"pemFileName"`
	TimeForProviderToReach                      int                        `json:"timeForProviderToReach"`
	OnlineProviderListLimit                     int                        `json:"onlineProviderListLimit"`
	CabRequestMethod                            CabRequestMethod           `json:"cabRequestMethod"`
	ProviderTimeout                             int                        `json:"providerTimeout"`
	EnableRouteCalculation                      bool                       `json:"enableRouteCalculation"`
	EnableRouteOptimisation                     bool                       `json:"enableRouteOptimisation"`
	MaxDestinationMultiDelivery                 int                        `json:"maxDestinationMultiDelivery"`
	EnableSurgeChargeOnRental                   bool                       `json:"enableSurgeChargeOnRental"`
	EnableWaitingChargeOnRental                 bool                       `json:"enableWaitingChargeOnRental"`
	EnableWaitingChargeOnFlatFare               bool                       `json:"enableWaitingChargeOnFlatFare"`
	EnableGoogleDirectionForDriver              bool                       `json:"enableGoogleDirectionForDriver"`
	EnableGoogleDirectionForUser                bool                       `json:"enableGoogleDirectionForUser"`
	GoogleServerPassengerKeyIos                 string                     `json:"googleServerPassengerKeyIOS"`
	GoogleAppPassengerKeyIos                    string                     `json:"googleAppPassengerKeyIOS"`
	GoogleServerDriverKeyIos                    string                     `json:"googleServerDriverKeyIOS"`
	GoogleAppDriverKeyIos                       string                     `json:"googleAppDriverKeyIOS"`
	GoogleServerPassengerKeyAndroid             string                     `json:"googleServerPassengerKeyAndroid"`
	GoogleServerDriverKeyAndroid                string                     `json:"googleServerDriverKeyAndroid"`
	EnableFavoriteStore                         bool                       `json:"enableFavoriteStore"`
	EnableFavoriteDriver                        bool                       `json:"enableFavoriteDriver"`
	EnableHandicapAccessibility                 bool                       `json:"enableHandicapAccessibility"`
	EnableGenderBasedRequest                    bool                       `json:"enableGenderBasedRequest"`
	EnableTaxiHailProviderApp                   bool                       `json:"enableTaxiHailProviderApp"`
	EnableLiveChat                              bool                       `json:"enableLiveChat"`
	EnableChildSeatAccessibility                bool                       `json:"enableChildSeatAccessibility"`
	EnableBookForSomeoneElse                    bool                       `json:"enableBookForSomeoneElse"`
	EnableAdvertisementBannerRider              bool                       `json:"enableAdvertisementBannerRider"`
	EnableAdvertisementBannerDriver             bool                       `json:"enableAdvertisementBannerDriver"`
	EnableAdvertisementBannerRestaurants        bool                       `json:"enableAdvertisementBannerRestaurants"`
	DisplayAdvertisementTime                    int                        `json:"displayAdvertisementTime"`
	EnableNews                                  bool                       `json:"enableNews"`
	EnableAirportSurcharge                      bool                       `json:"enableAirportSurcharge"`
	EnableTransitShopping                       bool                       `json:"enableTransitShopping"`
	EnableNewsletterSubscription                bool                       `json:"enableNewsletterSubscription"`
	WaybillConfiguration                        bool                       `json:"waybillConfiguration"`
	ServiceProviderFlow                         ServiceProviderFlow        `json:"serviceProviderFlow"`
	EnableDriverDestinationsFeature             bool                       `json:"enableDriverDestinationsFeature"`
	ResetTimeForDriverDestinations              time.Time                  `json:"resetTimeForDriverDestinations"`
	EnableStopOverPoint                         bool                       `json:"enableStopOverPoint"`
}

type AppSettingInput struct {
	BookingAcceptTime                           int                        `json:"bookingAcceptTime"`
	SinchSecretKey                              string                     `json:"sinchSecretKey"`
	SinchEnvironmentHost                        string                     `json:"sinchEnvironmentHost"`
	SinchAppKey                                 string                     `json:"sinchAppKey"`
	DeliveryVerificationMethod                  DeliveryVerificationMethod `json:"deliveryVerificationMethod"`
	EnableRideLater                             bool                       `json:"enableRideLater"`
	AllowProviderEditVehicleDetails             bool                       `json:"allowProviderEditVehicleDetails"`
	SurgeCharge                                 bool                       `json:"surgeCharge"`
	PublishDriverDistanceLimit                  int                        `json:"publishDriverDistanceLimit"`
	EnablePool                                  bool                       `json:"enablePool"`
	RadiusAroundUser                            int                        `json:"radiusAroundUser"`
	RadiusAroundUserForPool                     int                        `json:"radiusAroundUserForPool"`
	RadiusAroundUserProviderDestinationForPool  int                        `json:"radiusAroundUserProviderDestinationForPool"`
	RadiusAroundUserForDestinationEnabledDriver int                        `json:"radiusAroundUserForDestinationEnabledDriver"`
	LiveChatLicenceNumber                       string                     `json:"liveChatLicenceNumber"`
	SelectedContacts                            int                        `json:"selectedContacts"`
	MaxDriveDestinations                        string                     `json:"maxDriveDestinations"`
	MaxStopOverPoints                           string                     `json:"maxStopOverPoints"`
	PemFileName                                 string                     `json:"pemFileName"`
	TimeForProviderToReach                      int                        `json:"timeForProviderToReach"`
	OnlineProviderListLimit                     int                        `json:"onlineProviderListLimit"`
	CabRequestMethod                            CabRequestMethod           `json:"cabRequestMethod"`
	ProviderTimeout                             int                        `json:"providerTimeout"`
	EnableRouteCalculation                      bool                       `json:"enableRouteCalculation"`
	EnableRouteOptimisation                     bool                       `json:"enableRouteOptimisation"`
	MaxDestinationMultiDelivery                 int                        `json:"maxDestinationMultiDelivery"`
	EnableSurgeChargeOnRental                   bool                       `json:"enableSurgeChargeOnRental"`
	EnableWaitingChargeOnRental                 bool                       `json:"enableWaitingChargeOnRental"`
	EnableWaitingChargeOnFlatFare               bool                       `json:"enableWaitingChargeOnFlatFare"`
	EnableGoogleDirectionForDriver              bool                       `json:"enableGoogleDirectionForDriver"`
	EnableGoogleDirectionForUser                bool                       `json:"enableGoogleDirectionForUser"`
	GoogleServerPassengerKeyIos                 string                     `json:"googleServerPassengerKeyIOS"`
	GoogleAppPassengerKeyIos                    string                     `json:"googleAppPassengerKeyIOS"`
	GoogleServerDriverKeyIos                    string                     `json:"googleServerDriverKeyIOS"`
	GoogleAppDriverKeyIos                       string                     `json:"googleAppDriverKeyIOS"`
	GoogleServerPassengerKeyAndroid             string                     `json:"googleServerPassengerKeyAndroid"`
	GoogleServerDriverKeyAndroid                string                     `json:"googleServerDriverKeyAndroid"`
	EnableFavoriteStore                         bool                       `json:"enableFavoriteStore"`
	EnableFavoriteDriver                        bool                       `json:"enableFavoriteDriver"`
	EnableHandicapAccessibility                 bool                       `json:"enableHandicapAccessibility"`
	EnableGenderBasedRequest                    bool                       `json:"enableGenderBasedRequest"`
	EnableTaxiHailProviderApp                   bool                       `json:"enableTaxiHailProviderApp"`
	EnableLiveChat                              bool                       `json:"enableLiveChat"`
	EnableChildSeatAccessibility                bool                       `json:"enableChildSeatAccessibility"`
	EnableBookForSomeoneElse                    bool                       `json:"enableBookForSomeoneElse"`
	EnableAdvertisementBannerRider              bool                       `json:"enableAdvertisementBannerRider"`
	EnableAdvertisementBannerDriver             bool                       `json:"enableAdvertisementBannerDriver"`
	EnableAdvertisementBannerRestaurants        bool                       `json:"enableAdvertisementBannerRestaurants"`
	DisplayAdvertisementTime                    int                        `json:"displayAdvertisementTime"`
	EnableNews                                  bool                       `json:"enableNews"`
	EnableAirportSurcharge                      bool                       `json:"enableAirportSurcharge"`
	EnableTransitShopping                       bool                       `json:"enableTransitShopping"`
	EnableNewsletterSubscription                bool                       `json:"enableNewsletterSubscription"`
	WaybillConfiguration                        bool                       `json:"waybillConfiguration"`
	ServiceProviderFlow                         ServiceProviderFlow        `json:"serviceProviderFlow"`
	EnableDriverDestinationsFeature             bool                       `json:"enableDriverDestinationsFeature"`
	ResetTimeForDriverDestinations              time.Time                  `json:"resetTimeForDriverDestinations"`
	EnableStopOverPoint                         bool                       `json:"enableStopOverPoint"`
}

type AppearanceSetting struct {
	CompanyNameInEmail     string `json:"companyNameInEmail"`
	CopyrightAdminFooter   string `json:"copyrightAdminFooter"`
	CopyrightWebsiteFooter string `json:"copyrightWebsiteFooter"`
	SupportEmail           string `json:"supportEmail"`
	AndroidAppLink         string `json:"androidAppLink"`
	IphoneAppLink          string `json:"iphoneAppLink"`
	CompanyAddress         string `json:"companyAddress"`
	SupportPhone           string `json:"supportPhone"`
}

type AppearanceSettingInput struct {
	CompanyNameInEmail     string `json:"companyNameInEmail"`
	CopyrightAdminFooter   string `json:"copyrightAdminFooter"`
	CopyrightWebsiteFooter string `json:"copyrightWebsiteFooter"`
	SupportEmail           string `json:"supportEmail"`
	AndroidAppLink         string `json:"androidAppLink"`
	IphoneAppLink          string `json:"iphoneAppLink"`
	CompanyAddress         string `json:"companyAddress"`
	SupportPhone           string `json:"supportPhone"`
}

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type BankAccountDetails struct {
	Email              string            `json:"email"`
	AccountHolderName  string            `json:"accountHolderName"`
	AccountNumber      int               `json:"accountNumber"`
	BankName           string            `json:"bankName"`
	BankLocation       string            `json:"bankLocation"`
	BankCountry        string            `json:"bankCountry"`
	SwiftCode          string            `json:"swiftCode"`
	IfscCode           string            `json:"ifscCode"`
	Metadata           *string           `json:"metadata"`
	Country            string            `json:"country"`
	Currency           *Currency         `json:"currency"`
	DefaultForCurrency bool              `json:"defaultForCurrency"`
	Fingerprint        string            `json:"fingerprint"`
	RoutingNumber      string            `json:"routingNumber"`
	Status             BankAccountStatus `json:"status"`
}

type Billing struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Company   string `json:"company"`
	Address1  string `json:"address1"`
	Address2  string `json:"address2"`
	City      string `json:"city"`
	State     string `json:"state"`
	Postcode  string `json:"postcode"`
	Country   string `json:"country"`
	Email     string `json:"email"`
	Phone     string `json:"phone"`
}

type BillingInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Company   string `json:"company"`
	Address1  string `json:"address1"`
	Address2  string `json:"address2"`
	City      string `json:"city"`
	State     string `json:"state"`
	Postcode  string `json:"postcode"`
	Country   string `json:"country"`
	Email     string `json:"email"`
	Phone     string `json:"phone"`
}

type Booking struct {
	JobID     *string `json:"jobId"`
	VehicleID *string `json:"vehicleId"`
}

type BookingFareEstimate struct {
	BaseFare  *float64 `json:"baseFare"`
	Distance  *float64 `json:"distance"`
	Time      *float64 `json:"time"`
	TotalFare *float64 `json:"totalFare"`
}

type BookingInput struct {
	FirstName            string                    `json:"firstName"`
	LastName             string                    `json:"lastName"`
	Email                *string                   `json:"email"`
	Country              string                    `json:"country"`
	MobileNumber         int                       `json:"mobileNumber"`
	ServiceSubCategoryID string                    `json:"serviceSubCategoryID"`
	RideDetails          *RideDetailsInput         `json:"rideDetails"`
	DeliveryDetails      *DeliveryDetailsInput     `json:"deliveryDetails"`
	OtherServiceDetails  *OtherServiceDetailsInput `json:"otherServiceDetails"`
	Coupon               string                    `json:"coupon"`
	ProviderID           string                    `json:"providerId"`
}

//  List of BusinessTripReason
type BusinessTripReasonConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*BusinessTripReasonEdge `json:"edges"`
	// A list of nodes.
	Nodes []*BusinessTripReason `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node BusinessTripReason
type BusinessTripReasonEdge struct {
	Cursor string              `json:"cursor"`
	Node   *BusinessTripReason `json:"node"`
}

// List of CancelReason
type CancelReasonConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*CancelReasonEdge `json:"edges"`
	// A list of nodes.
	Nodes []*CancelReason `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node CancelReason
type CancelReasonEdge struct {
	Cursor string        `json:"cursor"`
	Node   *CancelReason `json:"node"`
}

//  List of CancelledReport
type CancelledReportConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*CancelledReportEdge `json:"edges"`
	// A list of nodes.
	Nodes []*CancelledReport `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node CancelledReport
type CancelledReportEdge struct {
	Cursor string           `json:"cursor"`
	Node   *CancelledReport `json:"node"`
}

//  List of Carts
type CartConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*CartEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Cart `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Cart
type CartEdge struct {
	Cursor string `json:"cursor"`
	Node   *Cart  `json:"node"`
}

type ChatNote struct {
	Type      *string `json:"type"`
	Message   string  `json:"message"`
	CreatedBy string  `json:"createdBy"`
	CreatedAt string  `json:"createdAt"`
}

//  List of City
type CityConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*CityEdge `json:"edges"`
	// A list of nodes.
	Nodes []*City `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node City
type CityEdge struct {
	Cursor string `json:"cursor"`
	Node   *City  `json:"node"`
}

//  List of Country
type CountryConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*CountryEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Country `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Country
type CountryEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Country `json:"node"`
}

// List of Coupon
type CouponConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*CouponEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Coupon `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Coupon
type CouponEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Coupon `json:"node"`
}

type CouponLines struct {
	ID          string    `json:"id"`
	Code        string    `json:"code"`
	Discount    string    `json:"discount"`
	DiscountTax string    `json:"discountTax"`
	MetaData    *MetaData `json:"metaData"`
}

// List of currencies
type CurrencyConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*CurrencyEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Currency `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node FAQ
type CurrencyEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Currency `json:"node"`
}

type CurrencyInput struct {
	CurrencyCode    string `json:"currencyCode"`
	Ratio           string `json:"ratio"`
	ThresholdAmount string `json:"thresholdAmount"`
	Symbol          string `json:"symbol"`
	IsDefault       bool   `json:"isDefault"`
}

type CustomerConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*CustomerEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Customer `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Customer
type CustomerEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Customer `json:"node"`
}

type DashboardNotification struct {
	Action    string `json:"action"`
	Actor     *User  `json:"actor"`
	CreatedAt string `json:"createdAt"`
}

//  List of DeclineAlertForProvider
type DeclineAlertForProviderConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*DeclineAlertForProviderEdge `json:"edges"`
	// A list of nodes.
	Nodes []*DeclineAlertForProvider `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node DeclineAlertForProvider
type DeclineAlertForProviderEdge struct {
	Cursor string                   `json:"cursor"`
	Node   *DeclineAlertForProvider `json:"node"`
}

//  List of DeclineAlertForUser
type DeclineAlertForUserConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*DeclineAlertForUserEdge `json:"edges"`
	// A list of nodes.
	Nodes []*DeclineAlertForUser `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node DeclineAlertForUser
type DeclineAlertForUserEdge struct {
	Cursor string               `json:"cursor"`
	Node   *DeclineAlertForUser `json:"node"`
}

//  List of DeliveryCharges
type DeliveryChargeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*DeliveryChargeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*DeliveryCharge `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node DeliveryCharges
type DeliveryChargeEdge struct {
	Cursor string          `json:"cursor"`
	Node   *DeliveryCharge `json:"node"`
}

//  List of DeliveryChargesUtility
type DeliveryChargesUtilityConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*DeliveryChargesUtilityEdge `json:"edges"`
	// A list of nodes.
	Nodes []*DeliveryChargesUtility `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node DeliveryChargesUtility
type DeliveryChargesUtilityEdge struct {
	Cursor string                  `json:"cursor"`
	Node   *DeliveryChargesUtility `json:"node"`
}

type DeliveryDetailsInput struct {
	PackageType           string             `json:"packageType"`
	RecipientName         string             `json:"recipientName"`
	RecipientMobileNumber int                `json:"recipientMobileNumber"`
	PickUpLocation        *AddAddressInput   `json:"pickUpLocation"`
	DropOffLocation       *AddAddressInput   `json:"dropOffLocation"`
	PickUpInstructions    *string            `json:"pickUpInstructions"`
	DeliveryInstructions  *string            `json:"deliveryInstructions"`
	PackageDetails        *string            `json:"packageDetails"`
	PickUpType            *DeliverPickUpType `json:"pickUpType"`
	DeliverLater          string             `json:"deliverLater"`
}

//  List of DeliveryVehicleType
type DeliveryVehicleTypeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*DeliveryVehicleTypeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*DeliveryVehicleType `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node DeliveryVehicleType
type DeliveryVehicleTypeEdge struct {
	Cursor string               `json:"cursor"`
	Node   *DeliveryVehicleType `json:"node"`
}

type DisplayPrice struct {
	PriceWithTax    int `json:"priceWithTax"`
	PriceWithoutTax int `json:"priceWithoutTax"`
}

//  List of Document
type DocumentConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*DocumentEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Document `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Document
type DocumentEdge struct {
	Cursor string    `json:"cursor"`
	Node   *Document `json:"node"`
}

type EmailSetting struct {
	EmailFromName string `json:"emailFromName"`
	AdminEmail    string `json:"adminEmail"`
	NoReplyEmail  string `json:"noReplyEmail"`
}

type EmailSettingInput struct {
	EmailFromName string `json:"emailFromName"`
	AdminEmail    string `json:"adminEmail"`
	NoReplyEmail  string `json:"noReplyEmail"`
}

//  List of EmailTemplate
type EmailTemplateConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*EmailTemplateEdge `json:"edges"`
	// A list of nodes.
	Nodes []*EmailTemplate `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node EmailTemplate
type EmailTemplateEdge struct {
	Cursor string         `json:"cursor"`
	Node   *EmailTemplate `json:"node"`
}

//  List of EmergencyContacts
type EmergencyContactConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*EmergencyContactEdge `json:"edges"`
	// A list of nodes.
	Nodes []*EmergencyContact `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node EmergencyContact
type EmergencyContactEdge struct {
	Cursor string            `json:"cursor"`
	Node   *EmergencyContact `json:"node"`
}

//  List of Enterprise account connection
type EnterpriseAccountConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*EnterpriseAccountEdge `json:"edges"`
	// A list of nodes.
	Nodes []*EnterpriseAccount `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Enterprise Account
type EnterpriseAccountEdge struct {
	Cursor string             `json:"cursor"`
	Node   *EnterpriseAccount `json:"node"`
}

//  List of EnterpriseAccountPaymentReport
type EnterpriseAccountPaymentReportConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*EnterpriseAccountPaymentReportEdge `json:"edges"`
	// A list of nodes.
	Nodes []*EnterpriseAccountPaymentReport `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node EnterpriseAccountPaymentReport
type EnterpriseAccountPaymentReportEdge struct {
	Cursor string                          `json:"cursor"`
	Node   *EnterpriseAccountPaymentReport `json:"node"`
}

//  List of FAQCategory
type FAQCategoryConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*FAQCategoryEdge `json:"edges"`
	// A list of nodes.
	Nodes []*FAQCategory `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node FAQCategory
type FAQCategoryEdge struct {
	Cursor string       `json:"cursor"`
	Node   *FAQCategory `json:"node"`
}

//  List of FAQ
type FAQConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*FAQEdge `json:"edges"`
	// A list of nodes.
	Nodes []*FAQ `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node FAQ
type FAQEdge struct {
	Cursor string `json:"cursor"`
	Node   *FAQ   `json:"node"`
}

type FeeLines struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	TaxClass  string    `json:"taxClass"`
	TaxStatus string    `json:"taxStatus"`
	Total     string    `json:"total"`
	TotalTax  string    `json:"totalTax"`
	Taxes     *Taxes    `json:"taxes"`
	MetaData  *MetaData `json:"metaData"`
}

// The `File` type
// represents the response of uploading a file.
type File struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	URL  string `json:"url"`
}

//  List of FoodDeliveryLabel
type FoodDeliveryLabelConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*FoodDeliveryLabelEdge `json:"edges"`
	// A list of nodes.
	Nodes []*FoodDeliveryLabel `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node FoodDeliveryLabel
type FoodDeliveryLabelEdge struct {
	Cursor string             `json:"cursor"`
	Node   *FoodDeliveryLabel `json:"node"`
}

//  List of GeneralLabel
type GeneralLabelConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*GeneralLabelEdge `json:"edges"`
	// A list of nodes.
	Nodes []*GeneralLabel `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node GeneralLabel
type GeneralLabelEdge struct {
	Cursor string        `json:"cursor"`
	Node   *GeneralLabel `json:"node"`
}

type GeneralSetting struct {
	ProjectName                     string        `json:"projectName"`
	CurrencyUpdateRatio             string        `json:"currencyUpdateRatio"`
	EnableProviderPhoneVerification bool          `json:"enableProviderPhoneVerification"`
	EnableProviderEmailVerification bool          `json:"enableProviderEmailVerification"`
	EnableUserPhoneVerification     bool          `json:"enableUserPhoneVerification"`
	EnableUserEmailVerification     bool          `json:"enableUserEmailVerification"`
	AdminCountryIsd                 string        `json:"adminCountryISD"`
	CountryCode                     string        `json:"countryCode"`
	DefaultDistanceUnit             DistanceUnits `json:"defaultDistanceUnit"`
	DisplayRecord                   string        `json:"displayRecord"`
	ReferralAmount                  string        `json:"referralAmount"`
	PoliceNumber                    string        `json:"policeNumber"`
	GoogleAnalyticsCode             string        `json:"googleAnalyticsCode"`
	EnableReferralSystem            bool          `json:"enableReferralSystem"`
	FixedWalletAmount1              int           `json:"fixedWalletAmount1"`
	FixedWalletAmount2              int           `json:"fixedWalletAmount2"`
	FixedWalletAmount3              int           `json:"fixedWalletAmount3"`
	FlagDrivers                     int           `json:"flagDrivers"`
}

type GeneralSettingInput struct {
	ProjectName                     string        `json:"projectName"`
	CurrencyUpdateRatio             string        `json:"currencyUpdateRatio"`
	EnableProviderPhoneVerification bool          `json:"enableProviderPhoneVerification"`
	EnableProviderEmailVerification bool          `json:"enableProviderEmailVerification"`
	EnableUserPhoneVerification     bool          `json:"enableUserPhoneVerification"`
	EnableUserEmailVerification     bool          `json:"enableUserEmailVerification"`
	AdminCountryIsd                 string        `json:"adminCountryISD"`
	CountryCode                     string        `json:"countryCode"`
	DefaultDistanceUnit             DistanceUnits `json:"defaultDistanceUnit"`
	DisplayRecord                   string        `json:"displayRecord"`
	ReferralAmount                  string        `json:"referralAmount"`
	PoliceNumber                    string        `json:"policeNumber"`
	GoogleAnalyticsCode             string        `json:"googleAnalyticsCode"`
	EnableReferralSystem            bool          `json:"enableReferralSystem"`
	FixedWalletAmount1              int           `json:"fixedWalletAmount1"`
	FixedWalletAmount2              int           `json:"fixedWalletAmount2"`
	FixedWalletAmount3              int           `json:"fixedWalletAmount3"`
	FlagDrivers                     int           `json:"flagDrivers"`
}

// List of GeoFenceLocation
type GeoFenceLocationConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*GeoFenceLocationEdge `json:"edges"`
	// A list of nodes.
	Nodes []*GeoFenceLocation `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node GeoFenceLocation
type GeoFenceLocationEdge struct {
	Cursor string            `json:"cursor"`
	Node   *GeoFenceLocation `json:"node"`
}

//  List of GeoFenceRestrictedArea
type GeoFenceRestrictedAreaConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*GeoFenceRestrictedAreaEdge `json:"edges"`
	// A list of nodes.
	Nodes []*GeoFenceRestrictedArea `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node GeoFenceRestrictedArea
type GeoFenceRestrictedAreaEdge struct {
	Cursor string                  `json:"cursor"`
	Node   *GeoFenceRestrictedArea `json:"node"`
}

type GodsView struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

//  List of GodsView
type GodsViewConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*GodsViewEdge `json:"edges"`
	// A list of nodes.
	Nodes []*GodsView `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node GodsView
type GodsViewEdge struct {
	Cursor string    `json:"cursor"`
	Node   *GodsView `json:"node"`
}

//  List of GroceryDeliveryLabel
type GroceryDeliveryLabelConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*GroceryDeliveryLabelEdge `json:"edges"`
	// A list of nodes.
	Nodes []*GroceryDeliveryLabel `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node GroceryDeliveryLabel
type GroceryDeliveryLabelEdge struct {
	Cursor string                `json:"cursor"`
	Node   *GroceryDeliveryLabel `json:"node"`
}

type HeatView struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

//  List of HeatView
type HeatViewConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*HeatViewEdge `json:"edges"`
	// A list of nodes.
	Nodes []*HeatView `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node HeatView
type HeatViewEdge struct {
	Cursor string    `json:"cursor"`
	Node   *HeatView `json:"node"`
}

//  List of HelpCategory
type HelpCategoryConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*HelpCategoryEdge `json:"edges"`
	// A list of nodes.
	Nodes []*HelpCategory `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node HelpCategory
type HelpCategoryEdge struct {
	Cursor string        `json:"cursor"`
	Node   *HelpCategory `json:"node"`
}

//  List of HelpDetail
type HelpDetailConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*HelpDetailEdge `json:"edges"`
	// A list of nodes.
	Nodes []*HelpDetail `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node HelpDetail
type HelpDetailEdge struct {
	Cursor string      `json:"cursor"`
	Node   *HelpDetail `json:"node"`
}

type HotelPaymentReport struct {
	BookedBy              string `json:"bookedBy"`
	JobNo                 string `json:"jobNo"`
	HotelName             string `json:"hotelName"`
	Provider              string `json:"provider"`
	User                  string `json:"user"`
	JobDate               string `json:"jobDate"`
	TotalFare             string `json:"totalFare"`
	BaseFare              string `json:"baseFare"`
	HotelBookingCharge    string `json:"hotelBookingCharge"`
	BookingFees           string `json:"bookingFees"`
	HotelPayAmount        string `json:"hotelPayAmount"`
	JobStatus             string `json:"jobStatus"`
	PaymentMethod         string `json:"paymentMethod"`
	ProviderPaymentStatus string `json:"providerPaymentStatus"`
}

// List of Installation
type InstallationConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*InstallationEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Installation `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Installation
type InstallationEdge struct {
	Cursor string        `json:"cursor"`
	Node   *Installation `json:"node"`
}

type InstallationInput struct {
	UserID             string     `json:"userId"`
	FcmToken           string     `json:"fcmToken"`
	DeviceID           string     `json:"deviceId"`
	DeviceWidth        string     `json:"deviceWidth"`
	AppVersion         string     `json:"appVersion"`
	DeviceType         DeviceType `json:"deviceType"`
	DeviceHeight       string     `json:"deviceHeight"`
	DeviceCountry      string     `json:"deviceCountry"`
	Badge              string     `json:"badge"`
	DeviceManufacturer string     `json:"deviceManufacturer"`
	SystemVersion      string     `json:"systemVersion"`
	AppIdentifier      string     `json:"appIdentifier"`
	AppName            string     `json:"appName"`
	DeviceLocale       string     `json:"deviceLocale"`
	Channels           []*string  `json:"channels"`
	DeviceBrand        string     `json:"deviceBrand"`
	DeviceModel        string     `json:"deviceModel"`
	BuildNumber        string     `json:"buildNumber"`
	TimeZone           string     `json:"timeZone"`
}

type InstallationSetting struct {
	DisablePubnub                bool            `json:"disablePubnub"`
	EnableCorporateProfile       bool            `json:"enableCorporateProfile"`
	EnableSocketCluster          bool            `json:"enableSocketCluster"`
	GoogleProjectID              string          `json:"googleProjectID"`
	GoogleKeyForPushNotification string          `json:"googleKeyForPushNotification"`
	PassPhraseforPem             int             `json:"passPhraseforPEM"`
	FetchTripStatus              int             `json:"fetchTripStatus"`
	EnablePubnub                 bool            `json:"enablePubnub"`
	PubSubTechnique              PubSubTechnique `json:"pubSubTechnique"`
	MinAutoComplete              int             `json:"minAutoComplete"`
	YalgaarClientKey             string          `json:"yalgaarClientKey"`
	PubnubPublishKey             string          `json:"pubnubPublishKey"`
	PubnubSubscribeKey           string          `json:"pubnubSubscribeKey"`
	PubnubSecretKey              string          `json:"pubnubSecretKey"`
	GoogleKeyForWebPanel         string          `json:"googleKeyForWebPanel"`
	TollCostCalculation          bool            `json:"tollCostCalculation"`
	TollCostAppID                string          `json:"tollCostAppID"`
	TollCostAppCode              string          `json:"tollCostAppCode"`
	PubnubUUID                   string          `json:"pubnubUUID"`
}

type InstallationSettingInput struct {
	DisablePubnub                bool            `json:"disablePubnub"`
	EnableCorporateProfile       bool            `json:"enableCorporateProfile"`
	EnableSocketCluster          bool            `json:"enableSocketCluster"`
	GoogleProjectID              string          `json:"googleProjectID"`
	GoogleKeyForPushNotification string          `json:"googleKeyForPushNotification"`
	PassPhraseforPem             int             `json:"passPhraseforPEM"`
	FetchTripStatus              int             `json:"fetchTripStatus"`
	EnablePubnub                 bool            `json:"enablePubnub"`
	PubSubTechnique              PubSubTechnique `json:"pubSubTechnique"`
	MinAutoComplete              int             `json:"minAutoComplete"`
	YalgaarClientKey             string          `json:"yalgaarClientKey"`
	PubnubPublishKey             string          `json:"pubnubPublishKey"`
	PubnubSubscribeKey           string          `json:"pubnubSubscribeKey"`
	PubnubSecretKey              string          `json:"pubnubSecretKey"`
	GoogleKeyForWebPanel         string          `json:"googleKeyForWebPanel"`
	TollCostCalculation          bool            `json:"tollCostCalculation"`
	TollCostAppID                string          `json:"tollCostAppID"`
	TollCostAppCode              string          `json:"tollCostAppCode"`
	PubnubUUID                   string          `json:"pubnubUUID"`
}

type Invoice struct {
	ID           string   `json:"id"`
	JobID        string   `json:"jobId"`
	FromAddress  *Address `json:"fromAddress"`
	ToAddress    *Address `json:"toAddress"`
	JobStartTime string   `json:"jobStartTime"`
	JobEndTime   string   `json:"jobEndTime"`
	Distance     float64  `json:"distance"`
	BaseFare     float64  `json:"baseFare"`
	Commission   float64  `json:"commission"`
	VehicleType  string   `json:"vehicleType"`
}

// List of Job
type JobConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*JobEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Job `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Job
type JobEdge struct {
	Cursor string `json:"cursor"`
	Node   *Job   `json:"node"`
}

// List of JobLaterBooking
type JobLaterBookingConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*JobLaterBookingEdge `json:"edges"`
	// A list of nodes.
	Nodes []*JobLaterBooking `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node JobLaterBooking
type JobLaterBookingEdge struct {
	Cursor string           `json:"cursor"`
	Node   *JobLaterBooking `json:"node"`
}

//  List of JobRequestAcceptanceReport
type JobRequestAcceptanceReportConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*JobRequestAcceptanceReportEdge `json:"edges"`
	// A list of nodes.
	Nodes []*JobRequestAcceptanceReport `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node JobRequestAcceptanceReport
type JobRequestAcceptanceReportEdge struct {
	Cursor string                      `json:"cursor"`
	Node   *JobRequestAcceptanceReport `json:"node"`
}

type JobStatistics struct {
	TotalJobs     int `json:"totalJobs"`
	OnGoingJobs   int `json:"onGoingJobs"`
	CancelledJobs int `json:"cancelledJobs"`
	CompletedJobs int `json:"completedJobs"`
}

//  List of JobTimeVariance
type JobTimeVarianceConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*JobTimeVarianceEdge `json:"edges"`
	// A list of nodes.
	Nodes []*JobTimeVariance `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node JobTimeVariance
type JobTimeVarianceEdge struct {
	Cursor string           `json:"cursor"`
	Node   *JobTimeVariance `json:"node"`
}

type JobUpdate struct {
	CreatedAt            string  `json:"createdAt"`
	Status               string  `json:"status"`
	EndedAt              *string `json:"endedAt"`
	Latitude             float64 `json:"latitude"`
	Longitude            float64 `json:"longitude"`
	ProviderID           string  `json:"providerId"`
	DeliveryTimeEstimate string  `json:"deliveryTimeEstimate"`
	Order                *Order  `json:"order"`
}

type JobsOverview struct {
	Today     int `json:"today"`
	ThisWeek  int `json:"thisWeek"`
	ThisMonth int `json:"thisMonth"`
	ThisYear  int `json:"thisYear"`
	Completed int `json:"completed"`
	OnGoing   int `json:"onGoing"`
	Cancelled int `json:"cancelled"`
}

type LatestJobs struct {
	User            *User     `json:"user"`
	Status          JobStatus `json:"status"`
	CreatedAt       string    `json:"createdAt"`
	StartingAddress *Address  `json:"startingAddress"`
	EndingAddress   *Address  `json:"endingAddress"`
}

type LineItems struct {
	ID          int      `json:"id"`
	Name        string   `json:"name"`
	ProductID   int      `json:"productID"`
	VariationID int      `json:"variationID"`
	Quantity    int      `json:"quantity"`
	TaxClass    string   `json:"taxClass"`
	Subtotal    string   `json:"subtotal"`
	SubtotalTax string   `json:"subtotalTax"`
	Total       string   `json:"total"`
	TotalTax    string   `json:"totalTax"`
	Sku         string   `json:"sku"`
	Price       int      `json:"price"`
	MetaData    []string `json:"metaData"`
	Taxes       []*Taxes `json:"taxes"`
}

//  List of LocationWiseFare
type LocationWiseFareConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*LocationWiseFareEdge `json:"edges"`
	// A list of nodes.
	Nodes []*LocationWiseFare `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node LocationWiseFare
type LocationWiseFareEdge struct {
	Cursor string            `json:"cursor"`
	Node   *LocationWiseFare `json:"node"`
}

type MarketStatistics struct {
	ID *string `json:"id"`
}

type MetaData struct {
	ID    int    `json:"id"`
	Key   string `json:"key"`
	Value string `json:"value"`
}

type NearByVehicle struct {
	Latitude   float64 `json:"latitude"`
	Longitude  float64 `json:"longitude"`
	ID         string  `json:"id"`
	Type       string  `json:"type"`
	DriverID   string  `json:"driverId"`
	IsOccupied bool    `json:"isOccupied"`
}

// List of NewsletterSubscriber
type NewsletterSubscriberConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*NewsletterSubscriberEdge `json:"edges"`
	// A list of nodes.
	Nodes []*NewsletterSubscriber `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node NewsletterSubscriber
type NewsletterSubscriberEdge struct {
	Cursor string                `json:"cursor"`
	Node   *NewsletterSubscriber `json:"node"`
}

type OAuthApplicationConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*OAuthApplicationEdge `json:"edges"`
	// A list of nodes.
	Nodes []*OAuthApplication `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node OAuthApplication
type OAuthApplicationEdge struct {
	Cursor string            `json:"cursor"`
	Node   *OAuthApplication `json:"node"`
}

//  List of Order
type OrderConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*OrderEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Order `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Order
type OrderEdge struct {
	Cursor string `json:"cursor"`
	Node   *Order `json:"node"`
}

type OrderItem struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Quantity int    `json:"quantity"`
}

type OrderItemInput struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	Quantity int    `json:"quantity"`
}

type OrderNoteConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*OrderNoteEdge `json:"edges"`
	// A list of nodes.
	Nodes []*OrderNote `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node OrderNote
type OrderNoteEdge struct {
	Cursor string     `json:"cursor"`
	Node   *OrderNote `json:"node"`
}

//  List of OrderStatusUtility
type OrderStatusUtilityConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*OrderStatusUtilityEdge `json:"edges"`
	// A list of nodes.
	Nodes []*OrderStatusUtility `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node OrderStatusUtility
type OrderStatusUtilityEdge struct {
	Cursor string              `json:"cursor"`
	Node   *OrderStatusUtility `json:"node"`
}

type OtherServiceDetailsInput struct {
	ServiceOrderItems []*ServiceOrderInput `json:"serviceOrderItems"`
	Schedule          *string              `json:"schedule"`
	DeliveryAddress   *AddAddressInput     `json:"deliveryAddress"`
}

// List of PackageType
type PackageTypeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*PackageTypeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*PackageType `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node PackageType
type PackageTypeEdge struct {
	Cursor string       `json:"cursor"`
	Node   *PackageType `json:"node"`
}

// List of Page
type PageConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*PageEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Page `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Page
type PageEdge struct {
	Cursor string `json:"cursor"`
	Node   *Page  `json:"node"`
}

// Information to aid in pagination.
type PageInfo struct {
	// When paginating forwards, the cursor to continue.
	StartCursor string `json:"startCursor"`
	// When paginating backwards, the cursor to continue.
	EndCursor string `json:"endCursor"`
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
}

type PaidEarning struct {
	ID                     string            `json:"id"`
	BookingDate            string            `json:"bookingDate"`
	FareAmount             float64           `json:"fareAmount"`
	Commission             float64           `json:"commission"`
	BookingCharge          float64           `json:"bookingCharge"`
	Tip                    float64           `json:"tip"`
	PaymentAfterCommission float64           `json:"paymentAfterCommission"`
	PaymentMethod          PaymentMethodType `json:"paymentMethod"`
	Invoice                *Invoice          `json:"invoice"`
}

// List of PaidEarning
type PaidEarningConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*PaidEarningEdge `json:"edges"`
	// A list of nodes.
	Nodes []*PaidEarning `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node PaidEarning
type PaidEarningEdge struct {
	Cursor string       `json:"cursor"`
	Node   *PaidEarning `json:"node"`
}

type PaymentSetting struct {
	AppPaymentEnvironment         PaymentEnvironment `json:"appPaymentEnvironment"`
	PaymentMode                   PaymentMode        `json:"paymentMode"`
	AddPaymentMethod              AddPaymentMethod   `json:"addPaymentMethod"`
	EnableProviderCommission      bool               `json:"enableProviderCommission"`
	MinimumWalletAmount           int                `json:"minimumWalletAmount"`
	StripePublisherSandboxModeKey string             `json:"stripePublisherSandboxModeKey"`
	StripePublisherLiveModeKey    string             `json:"stripePublisherLiveModeKey"`
	StripeSecretSandboxModeKey    string             `json:"stripeSecretSandboxModeKey"`
	StripeSecretLiveModeKey       string             `json:"stripeSecretLiveModeKey"`
}

type PaymentSettingInput struct {
	AppPaymentEnvironment         PaymentEnvironment `json:"appPaymentEnvironment"`
	PaymentMode                   PaymentMode        `json:"paymentMode"`
	AddPaymentMethod              AddPaymentMethod   `json:"addPaymentMethod"`
	EnableProviderCommission      bool               `json:"enableProviderCommission"`
	MinimumWalletAmount           int                `json:"minimumWalletAmount"`
	StripePublisherSandboxModeKey string             `json:"stripePublisherSandboxModeKey"`
	StripePublisherLiveModeKey    string             `json:"stripePublisherLiveModeKey"`
	StripeSecretSandboxModeKey    string             `json:"stripeSecretSandboxModeKey"`
	StripeSecretLiveModeKey       string             `json:"stripeSecretLiveModeKey"`
}

//  List of Product Attributes
type ProductAttributeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductAttributeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductAttribute `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node product attribute
type ProductAttributeEdge struct {
	Cursor string            `json:"cursor"`
	Node   *ProductAttribute `json:"node"`
}

//  List of Product Attributes Terms
type ProductAttributeTermConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductAttributeTermEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductAttributeTerm `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node product attribute terms
type ProductAttributeTermEdge struct {
	Cursor string                `json:"cursor"`
	Node   *ProductAttributeTerm `json:"node"`
}

//  List of Brands
type ProductBrandConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductBrandEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductBrand `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node brand
type ProductBrandEdge struct {
	Cursor string        `json:"cursor"`
	Node   *ProductBrand `json:"node"`
}

//  List of ProductCategory
type ProductCategoryConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductCategoryEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductCategory `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ProductCategory
type ProductCategoryEdge struct {
	Cursor string           `json:"cursor"`
	Node   *ProductCategory `json:"node"`
}

//  List of Product Collection
type ProductCollectionConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductCollectionEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductCollection `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Collections
type ProductCollectionEdge struct {
	Cursor string             `json:"cursor"`
	Node   *ProductCollection `json:"node"`
}

//  List of Product
type ProductConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Product `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

type ProductDimensionsInput struct {
	Length float64 `json:"length"`
	Width  float64 `json:"width"`
	Height float64 `json:"height"`
}

// List of ProductDownload
type ProductDownloadConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductDownloadEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductDownload `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node product download
type ProductDownloadEdge struct {
	Cursor string           `json:"cursor"`
	Node   *ProductDownload `json:"node"`
}

//  Paginating the node Product
type ProductEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Product `json:"node"`
}

// List of ProductImage
type ProductImageConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductImageEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductImage `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node product image
type ProductImageEdge struct {
	Cursor string        `json:"cursor"`
	Node   *ProductImage `json:"node"`
}

// List of Product Metadata
type ProductMetadataConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductMetadataEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductMetadata `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node product Metadata
type ProductMetadataEdge struct {
	Cursor string           `json:"cursor"`
	Node   *ProductMetadata `json:"node"`
}

//  List of Product Reviews
type ProductReviewConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductReviewEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductReview `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Collections
type ProductReviewEdge struct {
	Cursor string         `json:"cursor"`
	Node   *ProductReview `json:"node"`
}

// List of ProductTag
type ProductTagConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductTagEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductTag `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node product Tag
type ProductTagEdge struct {
	Cursor string      `json:"cursor"`
	Node   *ProductTag `json:"node"`
}

//  List of ProductVariations
type ProductVariationConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProductVariationEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProductVariation `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Product Variation
type ProductVariationEdge struct {
	Cursor string            `json:"cursor"`
	Node   *ProductVariation `json:"node"`
}

//  List of ProviderLogReport
type ProviderLogReportConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProviderLogReportEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProviderLogReport `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ProviderLogReport
type ProviderLogReportEdge struct {
	Cursor string             `json:"cursor"`
	Node   *ProviderLogReport `json:"node"`
}

//  List of ProviderPaymentReport
type ProviderPaymentReportConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProviderPaymentReportEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProviderPaymentReport `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ProviderPaymentReport
type ProviderPaymentReportEdge struct {
	Cursor string                 `json:"cursor"`
	Node   *ProviderPaymentReport `json:"node"`
}

type ProviderReview struct {
	OrderNumber    string `json:"orderNumber"`
	FromUserName   string `json:"fromUserName"`
	ToProviderName string `json:"toProviderName"`
	Rate           string `json:"rate"`
	Date           string `json:"date"`
	Comment        string `json:"comment"`
}

// List of ProviderWalletTransaction
type ProviderWalletTransactionConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ProviderWalletTransactionEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ProviderWalletTransaction `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ProviderWalletTransaction
type ProviderWalletTransactionEdge struct {
	Cursor string                     `json:"cursor"`
	Node   *ProviderWalletTransaction `json:"node"`
}

type ProvidersOverview struct {
	Today     int `json:"today"`
	ThisWeek  int `json:"thisWeek"`
	ThisMonth int `json:"thisMonth"`
	ThisYear  int `json:"thisYear"`
	Active    int `json:"active"`
	Pending   int `json:"pending"`
}

type PushNotificationInput struct {
	UserType      UserTypeOptions `json:"UserType"`
	SelectedUsers []string        `json:"SelectedUsers"`
	Title         string          `json:"Title"`
	Message       string          `json:"Message"`
	Payload       string          `json:"Payload"`
}

type RecentUnpaidEarning struct {
	ID                     string            `json:"id"`
	BookingDate            string            `json:"bookingDate"`
	FareAmount             float64           `json:"fareAmount"`
	Commission             float64           `json:"commission"`
	BookingCharge          float64           `json:"bookingCharge"`
	Tip                    float64           `json:"tip"`
	PaymentAfterCommission float64           `json:"paymentAfterCommission"`
	PaymentMethod          PaymentMethodType `json:"paymentMethod"`
	Invoice                *Invoice          `json:"invoice"`
}

// List of RecentUnpaidEarning
type RecentUnpaidEarningConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*RecentUnpaidEarningEdge `json:"edges"`
	// A list of nodes.
	Nodes []*RecentUnpaidEarning `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node RecentUnpaidEarning
type RecentUnpaidEarningEdge struct {
	Cursor string               `json:"cursor"`
	Node   *RecentUnpaidEarning `json:"node"`
}

type ReferralReport struct {
	Provider *UserReferralReport `json:"provider"`
	User     *UserReferralReport `json:"user"`
}

type Refunds struct {
	ID     string  `json:"id"`
	Reason string  `json:"reason"`
	Total  float64 `json:"total"`
}

//  List of rental packages
type RentalPackageConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*RentalPackageEdge `json:"edges"`
	// A list of nodes.
	Nodes []*RentalPackage `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node RentalPackages
type RentalPackageEdge struct {
	Cursor string         `json:"cursor"`
	Node   *RentalPackage `json:"node"`
}

//  List of Document
type RequiredDocumentConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*RequiredDocumentEdge `json:"edges"`
	// A list of nodes.
	Nodes []*RequiredDocument `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Document
type RequiredDocumentEdge struct {
	Cursor string            `json:"cursor"`
	Node   *RequiredDocument `json:"node"`
}

type RestaurantConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*RestaurantEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Restaurant `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

type RestaurantEdge struct {
	Cursor string      `json:"cursor"`
	Node   *Restaurant `json:"node"`
}

type RestaurantReview struct {
	OrderNumber      string `json:"orderNumber"`
	FromUserName     string `json:"fromUserName"`
	ToRestaurantName string `json:"toRestaurantName"`
	Rate             string `json:"rate"`
	Date             string `json:"date"`
	Comment          string `json:"comment"`
}

// List of Review
type ReviewConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ReviewEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Review `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Review
type ReviewEdge struct {
	Cursor string  `json:"cursor"`
	Node   *Review `json:"node"`
}

type ReviewerAvatarUrls struct {
	ID    string `json:"id"`
	Num24 string `json:"num24"`
	Num48 string `json:"num48"`
	Num96 string `json:"num96"`
}

type ReviewerAvatarUrlsInput struct {
	Num24 string `json:"num24"`
	Num48 string `json:"num48"`
	Num96 string `json:"num96"`
}

type RideDetailsInput struct {
	VehicleType           string           `json:"vehicleType"`
	PickUpType            RidePickUpType   `json:"pickUpType"`
	PickUpLocation        *AddAddressInput `json:"pickUpLocation"`
	DropOffLocation       *AddAddressInput `json:"dropOffLocation"`
	RideLater             string           `json:"RideLater"`
	LadiesRide            *bool            `json:"ladiesRide"`
	HandicapAccessibility *bool            `json:"handicapAccessibility"`
	ChildSeat             *bool            `json:"childSeat"`
}

//  List of RideProfileType
type RideProfileTypeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*RideProfileTypeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*RideProfileType `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node RideProfileType
type RideProfileTypeEdge struct {
	Cursor string           `json:"cursor"`
	Node   *RideProfileType `json:"node"`
}

//  List of SEOSetting
type SEOSettingConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*SEOSettingEdge `json:"edges"`
	// A list of nodes.
	Nodes []*SEOSetting `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node SEOSetting
type SEOSettingEdge struct {
	Cursor string      `json:"cursor"`
	Node   *SEOSetting `json:"node"`
}

type SMSSetting struct {
	TwilioSid       string `json:"twilioSID"`
	TwilioAuthToken string `json:"twilioAuthToken"`
	TwilioMobile    string `json:"twilioMobile"`
}

type SMSSettingInput struct {
	TwilioSid       string `json:"twilioSID"`
	TwilioAuthToken string `json:"twilioAuthToken"`
	TwilioMobile    string `json:"twilioMobile"`
}

//  List of SMSTemplate
type SMSTemplateConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*SMSTemplateEdge `json:"edges"`
	// A list of nodes.
	Nodes []*SMSTemplate `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node SMSTemplate
type SMSTemplateEdge struct {
	Cursor string       `json:"cursor"`
	Node   *SMSTemplate `json:"node"`
}

type ServiceCompaniesConnection struct {
	TotalCount int                   `json:"totalCount"`
	Nodes      []*ServiceCompany     `json:"nodes"`
	Edges      []*ServiceCompanyEdge `json:"edges"`
	PageInfo   *PageInfo             `json:"pageInfo"`
}

type ServiceCompanyEdge struct {
	Cursor string          `json:"cursor"`
	Node   *ServiceCompany `json:"node"`
}

type ServiceConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ServiceEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Service `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

type ServiceEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Service `json:"node"`
}

type ServiceOrderInput struct {
	ServiceTypeID string `json:"serviceTypeID"`
	Quantity      int    `json:"quantity"`
	DeliveryNotes string `json:"deliveryNotes"`
}

//  List of ServiceProvider
type ServiceProviderConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ServiceProviderEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ServiceProvider `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ServiceProvider
type ServiceProviderEdge struct {
	Cursor string           `json:"cursor"`
	Node   *ServiceProvider `json:"node"`
}

type ServiceProviderProfileInput struct {
	ID                 string                  `json:"id"`
	Address            *UpdateAddressInput     `json:"address"`
	Language           string                  `json:"language"`
	BankAccountDetails *UpdateBankDetailsInput `json:"bankAccountDetails"`
	RequiredDocuments  *UpdateDocumentInput    `json:"requiredDocuments"`
}

type ServiceProviderSignUpInput struct {
	ServiceCategory    ServiceCategory      `json:"serviceCategory"`
	ServiceSubCategory string               `json:"serviceSubCategory"`
	Address            *AddAddressInput     `json:"address"`
	BankAccountDetails *AddBankDetailsInput `json:"bankAccountDetails"`
}

type ServiceProviderVehicle struct {
	ID                  string                 `json:"id"`
	VehicleCompanyName  string                 `json:"vehicleCompanyName"`
	VehicleModelName    string                 `json:"vehicleModelName"`
	VehicleYear         string                 `json:"vehicleYear"`
	VehicleNumber       string                 `json:"vehicleNumber"`
	VehicleColor        string                 `json:"vehicleColor"`
	VehicleImageURL     string                 `json:"vehicleImageUrl"`
	VehicleLicensePlate string                 `json:"vehicleLicensePlate"`
	ServiceCompanyID    string                 `json:"serviceCompanyId"`
	EnabledServiceType  []*VehicleServiceTypes `json:"enabledServiceType"`
	IsActive            bool                   `json:"isActive"`
}

//  List of ProviderVehicleDetails
type ServiceProviderVehicleDetailsConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ServiceProviderVehicleDetailsEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ServiceProviderVehicleDetails `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ProviderVehicleDetails
type ServiceProviderVehicleDetailsEdge struct {
	Cursor string                         `json:"cursor"`
	Node   *ServiceProviderVehicleDetails `json:"node"`
}

//  List of ServiceSubCategory
type ServiceSubCategoryConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ServiceSubCategoryEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ServiceSubCategory `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ServiceCategory
type ServiceSubCategoryEdge struct {
	Cursor string              `json:"cursor"`
	Node   *ServiceSubCategory `json:"node"`
}

//  List of service types
type ServiceTypeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ServiceTypeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ServiceType `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ServiceType
type ServiceTypeEdge struct {
	Cursor string       `json:"cursor"`
	Node   *ServiceType `json:"node"`
}

//  List of ServiceVehicleType
type ServiceVehicleTypeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*ServiceVehicleTypeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*ServiceVehicleType `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node ServiceVehicleType
type ServiceVehicleTypeEdge struct {
	Cursor string              `json:"cursor"`
	Node   *ServiceVehicleType `json:"node"`
}

type Shipping struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Company   string `json:"company"`
	Address1  string `json:"address1"`
	Address2  string `json:"address2"`
	City      string `json:"city"`
	State     string `json:"state"`
	Postcode  string `json:"postcode"`
	Country   string `json:"country"`
}

type ShippingInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Company   string `json:"company"`
	Address1  string `json:"address1"`
	Address2  string `json:"address2"`
	City      string `json:"city"`
	State     string `json:"state"`
	Postcode  string `json:"postcode"`
	Country   string `json:"country"`
}

type ShippingLines struct {
	ID          int      `json:"id"`
	MethodTitle string   `json:"methodTitle"`
	MethodID    string   `json:"methodID"`
	Total       string   `json:"total"`
	TotalTax    string   `json:"totalTax"`
	MetaData    []string `json:"metaData"`
	Taxes       []string `json:"taxes"`
}

type SiteStatistics struct {
	Users         int `json:"users"`
	Providers     int `json:"providers"`
	Companies     int `json:"companies"`
	Totalearnings int `json:"totalearnings"`
}

// List of SMS templates
type SmsTemplateConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*SMSTemplateEdge `json:"edges"`
	// A list of nodes.
	Nodes []*SMSTemplate `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

type SocialMediaSetting struct {
	FacebookAppID                    string `json:"facebookAppID"`
	Facebook                         string `json:"facebook"`
	Twitter                          string `json:"twitter"`
	LinkedIn                         string `json:"linkedIn"`
	Instagram                        string `json:"instagram"`
	TwitterConsumerSecret            string `json:"twitterConsumerSecret"`
	TwitterConsumerKey               string `json:"twitterConsumerKey"`
	TwitterToken                     string `json:"twitterToken"`
	TwitterTokenSecret               string `json:"twitterTokenSecret"`
	GooglePlusAppName                string `json:"googlePlusAppName"`
	GooglePlusClientID               string `json:"googlePlusClientID"`
	GooglePlusSecretKey              string `json:"googlePlusSecretKey"`
	GooglePlusRedirectURI            string `json:"googlePlusRedirectURI"`
	GooglePlusSiteLink               string `json:"googlePlusSiteLink"`
	EnableGooglePlusLoginForProvider bool   `json:"enableGooglePlusLoginForProvider"`
	EnableGooglePlusLoginForUser     bool   `json:"enableGooglePlusLoginForUser"`
	EnableFacebookLoginForProvider   bool   `json:"enableFacebookLoginForProvider"`
	EnableFacebookLoginForUser       bool   `json:"enableFacebookLoginForUser"`
	EnableTwitterLoginForProvider    bool   `json:"enableTwitterLoginForProvider"`
	EnableTwitterLoginForUser        bool   `json:"enableTwitterLoginForUser"`
	EnableLinkedInLoginForProvider   bool   `json:"enableLinkedInLoginForProvider"`
	EnableLinkedInLoginForUser       bool   `json:"enableLinkedInLoginForUser"`
	FooterGoogleLink                 string `json:"footerGoogleLink"`
	LinkedInAppID                    string `json:"linkedInAppID"`
	FacebookSecretKey                string `json:"facebookSecretKey"`
	LinkedInSecretKey                string `json:"linkedInSecretKey"`
}

type SocialMediaSettingInput struct {
	FacebookAppID                    string `json:"facebookAppID"`
	Facebook                         string `json:"facebook"`
	Twitter                          string `json:"twitter"`
	LinkedIn                         string `json:"linkedIn"`
	Instagram                        string `json:"instagram"`
	TwitterConsumerSecret            string `json:"twitterConsumerSecret"`
	TwitterConsumerKey               string `json:"twitterConsumerKey"`
	TwitterToken                     string `json:"twitterToken"`
	TwitterTokenSecret               string `json:"twitterTokenSecret"`
	GooglePlusAppName                string `json:"googlePlusAppName"`
	GooglePlusClientID               string `json:"googlePlusClientID"`
	GooglePlusSecretKey              string `json:"googlePlusSecretKey"`
	GooglePlusRedirectURI            string `json:"googlePlusRedirectURI"`
	GooglePlusSiteLink               string `json:"googlePlusSiteLink"`
	EnableGooglePlusLoginForProvider bool   `json:"enableGooglePlusLoginForProvider"`
	EnableGooglePlusLoginForUser     bool   `json:"enableGooglePlusLoginForUser"`
	EnableFacebookLoginForProvider   bool   `json:"enableFacebookLoginForProvider"`
	EnableFacebookLoginForUser       bool   `json:"enableFacebookLoginForUser"`
	EnableTwitterLoginForProvider    bool   `json:"enableTwitterLoginForProvider"`
	EnableTwitterLoginForUser        bool   `json:"enableTwitterLoginForUser"`
	EnableLinkedInLoginForProvider   bool   `json:"enableLinkedInLoginForProvider"`
	EnableLinkedInLoginForUser       bool   `json:"enableLinkedInLoginForUser"`
	FooterGoogleLink                 string `json:"footerGoogleLink"`
	LinkedInAppID                    string `json:"linkedInAppID"`
	FacebookSecretKey                string `json:"facebookSecretKey"`
	LinkedInSecretKey                string `json:"linkedInSecretKey"`
}

//  List of State
type StateConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*StateEdge `json:"edges"`
	// A list of nodes.
	Nodes []*State `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node State
type StateEdge struct {
	Cursor string `json:"cursor"`
	Node   *State `json:"node"`
}

// List of Stores
type StoreConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*StoreEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Store `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

type StoreDetails struct {
	ID              string `json:"id"`
	StoreName       string `json:"storeName"`
	Email           string `json:"email"`
	ServiceCategory string `json:"serviceCategory"`
	ItemCategories  int    `json:"itemCategories"`
	MobileNumber    int    `json:"mobileNumber"`
	EditDocuments   string `json:"editDocuments"`
}

//  Paginating the node StoreDetails
type StoreEdge struct {
	Cursor string `json:"cursor"`
	Node   *Store `json:"node"`
}

// List of Store locations
type StoreLocationConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*StoreLocationEdge `json:"edges"`
	// A list of nodes.
	Nodes []*StoreLocation `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node StoreLocation
type StoreLocationEdge struct {
	Cursor string         `json:"cursor"`
	Node   *StoreLocation `json:"node"`
}

type StoreOrder struct {
	OrderID                      string  `json:"orderID"`
	OrderDate                    string  `json:"orderDate"`
	UserName                     string  `json:"userName"`
	StoreName                    string  `json:"storeName"`
	ProviderName                 string  `json:"providerName"`
	DeliveryDriver               string  `json:"deliveryDriver"`
	OrderTotalAmount             float64 `json:"orderTotalAmount"`
	ServiceType                  string  `json:"serviceType"`
	OrderStatus                  string  `json:"orderStatus"`
	PaymentMethod                string  `json:"paymentMethod"`
	CancellationAndRefundDetails string  `json:"cancellationAndRefundDetails"`
}

// List of StorePaymentReport
type StorePaymentReportConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*StorePaymentReportEdge `json:"edges"`
	// A list of nodes.
	Nodes []*StorePaymentReport `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node StorePaymentReport
type StorePaymentReportEdge struct {
	Cursor string              `json:"cursor"`
	Node   *StorePaymentReport `json:"node"`
}

//  List of StoreReview
type StoreReviewConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*StoreReviewEdge `json:"edges"`
	// A list of nodes.
	Nodes []*StoreReview `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node StoreReview
type StoreReviewEdge struct {
	Cursor string       `json:"cursor"`
	Node   *StoreReview `json:"node"`
}

type StoreSetting struct {
	OnlineStoreListDistance           int  `json:"onlineStoreListDistance"`
	AdminCommission                   int  `json:"adminCommission"`
	UserCancellationCharge            int  `json:"userCancellationCharge"`
	EnableRestaurantEmailVerification bool `json:"enableRestaurantEmailVerification"`
	EnableRestaurantPhoneVerification bool `json:"enableRestaurantPhoneVerification"`
}

type StoreSettingInput struct {
	OnlineStoreListDistance           int  `json:"onlineStoreListDistance"`
	AdminCommission                   int  `json:"adminCommission"`
	UserCancellationCharge            int  `json:"userCancellationCharge"`
	EnableRestaurantEmailVerification bool `json:"enableRestaurantEmailVerification"`
	EnableRestaurantPhoneVerification bool `json:"enableRestaurantPhoneVerification"`
}

type StoreSignUpInput struct {
	StoreName          string                   `json:"storeName"`
	ServiceCategory    StoreCategory            `json:"serviceCategory"`
	Email              string                   `json:"email"`
	StoreLocation      []*AddStoreLocationInput `json:"storeLocation"`
	StoreAddress       *AddAddressInput         `json:"storeAddress"`
	ZipCode            string                   `json:"zipCode"`
	Country            string                   `json:"country"`
	State              string                   `json:"state"`
	ContactPersonName  string                   `json:"contactPersonName"`
	MobileNumber       string                   `json:"mobileNumber"`
	StoreLogo          string                   `json:"storeLogo"`
	Language           string                   `json:"language"`
	BankAccountDetails string                   `json:"bankAccountDetails"`
}

//  List of StoreVehicleType
type StoreVehicleTypeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*StoreVehicleTypeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*StoreVehicleType `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node StoreVehicleType
type StoreVehicleTypeEdge struct {
	Cursor string            `json:"cursor"`
	Node   *StoreVehicleType `json:"node"`
}

type SubscriberPayload struct {
	ID        *string                     `json:"id"`
	Name      *string                     `json:"name"`
	Email     *string                     `json:"email"`
	Status    *NewsletterSubscriberStatus `json:"status"`
	Date      *string                     `json:"date"`
	IPAddress *string                     `json:"ipAddress"`
}

type SupportAgent struct {
	ID          string               `json:"id"`
	User        string               `json:"user"`
	CreatedAt   string               `json:"createdAt"`
	UpdatedAt   string               `json:"updatedAt"`
	IsEnabled   bool                 `json:"isEnabled"`
	Departments []*SupportDepartment `json:"departments"`
	Skills      []*SupportSkills     `json:"skills"`
}

type SupportDepartment struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   string `json:"createdAt"`
	UpdatedAt   string `json:"updatedAt"`
	IsEnabled   bool   `json:"isEnabled"`
}

type SupportSkills struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type TaxLines struct {
	ID               int      `json:"id"`
	RateCode         string   `json:"rateCode"`
	RateID           int      `json:"rateID"`
	Label            string   `json:"label"`
	Compound         bool     `json:"compound"`
	TaxTotal         string   `json:"taxTotal"`
	ShippingTaxTotal string   `json:"shippingTaxTotal"`
	MetaData         []string `json:"metaData"`
}

type Taxes struct {
	ID       int    `json:"id"`
	Total    string `json:"total"`
	Subtotal string `json:"subtotal"`
}

type UnitPrice struct {
	Amount      int    `json:"amount"`
	Currency    string `json:"currency"`
	IncludesTax bool   `json:"includesTax"`
}

type UpdateAddressInput struct {
	ID                 string  `json:"id"`
	Name               string  `json:"name"`
	FirstName          string  `json:"firstName"`
	LastName           string  `json:"lastName"`
	CompanyName        *string `json:"companyName"`
	AddressDescription string  `json:"addressDescription"`
	City               string  `json:"city"`
	State              string  `json:"state"`
	Country            string  `json:"country"`
	PostCode           int     `json:"postCode"`
	Latitude           float64 `json:"latitude"`
	Longitute          float64 `json:"longitute"`
}

type UpdateAirportSurchargeInput struct {
	ID               string `json:"id"`
	AirportLocation  string `json:"airportLocation"`
	PickUpSurcharge  string `json:"pickUpSurcharge"`
	DropOffSurcharge string `json:"dropOffSurcharge"`
	VehicleType      string `json:"vehicleType"`
	IsActive         bool   `json:"isActive"`
}

type UpdateAppVersionInput struct {
	ID             string `json:"id"`
	MinimumVersion string `json:"minimumVersion"`
	LatestVersion  string `json:"latestVersion"`
	DownloadURL    string `json:"downloadUrl"`
	Channel        string `json:"channel"`
}

type UpdateBankDetailsInput struct {
	ID                 string  `json:"id"`
	Email              string  `json:"email"`
	AccountHolderName  string  `json:"accountHolderName"`
	AccountNumber      int     `json:"accountNumber"`
	BankName           string  `json:"bankName"`
	BankLocation       string  `json:"bankLocation"`
	BankCountry        string  `json:"bankCountry"`
	SwiftCode          string  `json:"swiftCode"`
	IfscCode           string  `json:"ifscCode"`
	Metadata           *string `json:"metadata"`
	Country            string  `json:"country"`
	Currency           string  `json:"currency"`
	DefaultForCurrency bool    `json:"defaultForCurrency"`
	Fingerprint        string  `json:"fingerprint"`
	RoutingNumber      string  `json:"routingNumber"`
}

type UpdateBannerInput struct {
	ID              string     `json:"id"`
	BannerName      string     `json:"bannerName"`
	BannerImage     string     `json:"bannerImage"`
	DisplayOrder    int        `json:"displayOrder"`
	RedirectURL     string     `json:"redirectURL"`
	TimePeriod      string     `json:"timePeriod"`
	AddedDate       string     `json:"addedDate"`
	TotalImpression string     `json:"totalImpression"`
	UsedImpression  string     `json:"usedImpression"`
	Validity        Validity   `json:"validity"`
	ClickCount      ClickCount `json:"clickCount"`
	IsActive        bool       `json:"isActive"`
}

type UpdateBusinessTripReasonInput struct {
	ID               string `json:"id"`
	TripReason       string `json:"tripReason"`
	ProfileShortName string `json:"profileShortName"`
	OrganizationType string `json:"organizationType"`
	ProfileTitle     string `json:"profileTitle"`
	TitleDescription string `json:"titleDescription"`
	Reason           string `json:"reason"`
	IsActive         bool   `json:"isActive"`
}

type UpdateCancelReasonInput struct {
	ID          string `json:"id"`
	Reason      string `json:"reason"`
	ServiceType string `json:"serviceType"`
	Order       string `json:"order"`
	IsActive    bool   `json:"isActive"`
}

type UpdateCityInput struct {
	ID          string `json:"id"`
	CountryName string `json:"countryName"`
	CountryCode string `json:"countryCode"`
	StateName   string `json:"stateName"`
	StateCode   string `json:"stateCode"`
	CityName    string `json:"cityName"`
	IsActive    bool   `json:"isActive"`
}

type UpdateCountryInput struct {
	ID              string        `json:"id"`
	CountryName     string        `json:"countryName"`
	Code            string        `json:"code"`
	PhoneCode       string        `json:"phoneCode"`
	DistanceUnit    DistanceUnits `json:"distanceUnit"`
	EmergencyNumber string        `json:"emergencyNumber"`
	Tax             string        `json:"tax"`
	IsActive        bool          `json:"isActive"`
}

type UpdateCouponInput struct {
	ID             string           `json:"id"`
	Code           string           `json:"code"`
	Description    *string          `json:"description"`
	DiscountAmount float64          `json:"discountAmount"`
	DiscountType   string           `json:"discountType"`
	Validity       string           `json:"validity"`
	ValidityStart  string           `json:"validityStart"`
	ValidityExpire string           `json:"validityExpire"`
	UsageLimit     int              `json:"usageLimit"`
	Type           CouponType       `json:"type"`
	UsedLimit      int              `json:"usedLimit"`
	ServiceType    CouponSystemType `json:"serviceType"`
	IsActive       bool             `json:"isActive"`
}

type UpdateCurrencyInput struct {
	ID              string `json:"id"`
	Country         string `json:"country"`
	Name            string `json:"name"`
	CurrencyCode    string `json:"currencyCode"`
	Ratio           string `json:"ratio"`
	ThresholdAmount string `json:"thresholdAmount"`
	Symbol          string `json:"symbol"`
	IsDefault       bool   `json:"isDefault"`
}

type UpdateCustomerInput struct {
	ID               string         `json:"id"`
	Email            string         `json:"email"`
	FirstName        string         `json:"firstName"`
	LastName         string         `json:"lastName"`
	Role             string         `json:"role"`
	Username         string         `json:"username"`
	IsPayingCustomer bool           `json:"isPayingCustomer"`
	AvatarURL        string         `json:"avatarURL"`
	Shipping         *ShippingInput `json:"shipping"`
	Billing          *BillingInput  `json:"billing"`
}

type UpdateDeliveryChargeInput struct {
	ID                              string `json:"id"`
	LocationName                    string `json:"locationName"`
	OrderPrice                      int    `json:"orderPrice"`
	OrderDeliveryChargesAboveAmount int    `json:"orderDeliveryChargesAboveAmount"`
	OrderDeliveryChargesBelowAmount int    `json:"orderDeliveryChargesBelowAmount"`
	FreeOrderDeliveryCharges        int    `json:"freeOrderDeliveryCharges"`
	FreeDeliveryRadius              int    `json:"freeDeliveryRadius"`
	OrderTotal                      int    `json:"orderTotal"`
	IsActive                        bool   `json:"isActive"`
}

type UpdateDeliveryChargesUtilityInput struct {
	ID                              string `json:"id"`
	Location                        string `json:"location"`
	OrderPrice                      int    `json:"orderPrice"`
	OrderDeliveryChargesAboveAmout  int    `json:"orderDeliveryChargesAboveAmout"`
	OrderDeliveryChargesBelowAmount int    `json:"orderDeliveryChargesBelowAmount"`
	FreeDeliveryForOrderAmountAbove int    `json:"freeDeliveryForOrderAmountAbove"`
	FreeDeliveryRadius              int    `json:"freeDeliveryRadius"`
}

type UpdateDeliveryVehicleTypeInput struct {
	ID                              string  `json:"id"`
	VehicleType                     string  `json:"vehicleType"`
	Location                        string  `json:"location"`
	DeliveryChargeForCompletedOrder float64 `json:"deliveryChargeForCompletedOrder"`
	DeliveryChargeForCancelledOrder float64 `json:"deliveryChargeForCancelledOrder"`
	DeliveryRadius                  float64 `json:"deliveryRadius"`
	Order                           int     `json:"order"`
	IsActive                        bool    `json:"isActive"`
}

type UpdateDocumentInput struct {
	ID           string               `json:"id"`
	ExpiryDate   string               `json:"expiryDate"`
	Name         string               `json:"name"`
	URL          string               `json:"url"`
	BelongsTo    string               `json:"belongsTo"`
	UploaderType DocumentUploaderType `json:"uploaderType"`
	IsActive     bool                 `json:"isActive"`
}

type UpdateEmailTemplateInput struct {
	ID         string `json:"id"`
	Subject    string `json:"subject"`
	Purpose    string `json:"purpose"`
	From       string `json:"from"`
	TextBody   string `json:"textBody"`
	HTMLBody   string `json:"htmlBody"`
	Language   string `json:"language"`
	TemplateID string `json:"templateId"`
}

type UpdateEmergencyContactInput struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	MobileNo int    `json:"mobileNo"`
	EmailID  string `json:"emailID"`
}

type UpdateEnterpriseAccountInput struct {
	ID               string           `json:"id"`
	OrganizationName string           `json:"organizationName"`
	OrganizationType string           `json:"organizationType"`
	PaymentMethod    string           `json:"paymentMethod"`
	Email            string           `json:"email"`
	Country          string           `json:"country"`
	State            string           `json:"state"`
	City             string           `json:"city"`
	Address          *AddAddressInput `json:"address"`
	ZipCode          string           `json:"zipCode"`
	Language         string           `json:"language"`
	PaymentBy        PaymentBy        `json:"paymentBy"`
	Phone            string           `json:"phone"`
	IsActive         bool             `json:"isActive"`
}

type UpdateFAQCategoryInput struct {
	ID           string `json:"id"`
	IsActive     bool   `json:"isActive"`
	DisplayOrder int    `json:"displayOrder"`
	Label        string `json:"label"`
}

type UpdateFAQInput struct {
	ID           string `json:"id"`
	Category     string `json:"category"`
	IsActive     bool   `json:"isActive"`
	DisplayOrder int    `json:"displayOrder"`
	Question     string `json:"question"`
	Answer       string `json:"answer"`
}

type UpdateFoodDeliveryLabelInput struct {
	ID                     string `json:"id"`
	Code                   string `json:"code"`
	ValueInEnglishLanguage string `json:"valueInEnglishLanguage"`
	LanguageLabel          string `json:"languageLabel"`
	IsActive               bool   `json:"isActive"`
}

type UpdateGeneralLabelInput struct {
	ID                     string `json:"id"`
	Code                   string `json:"code"`
	ValueInEnglishLanguage string `json:"valueInEnglishLanguage"`
	LanguageLabel          string `json:"languageLabel"`
	IsActive               bool   `json:"isActive"`
}

type UpdateGeoFenceLocationInput struct {
	ID           string `json:"id"`
	Name         string `json:"name"`
	Country      string `json:"country"`
	LocationFor  string `json:"locationFor"`
	LocationType string `json:"LocationType"`
	IsActive     bool   `json:"IsActive"`
	GeoJSON      string `json:"GeoJSON"`
}

type UpdateGeoFenceRestrictedAreaInput struct {
	ID              string       `json:"id"`
	Address         string       `json:"address"`
	Area            string       `json:"area"`
	IsActive        bool         `json:"isActive"`
	GeoLocationArea string       `json:"geoLocationArea"`
	RestrictArea    RestrictArea `json:"restrictArea"`
	RestrictType    RestrictType `json:"restrictType"`
}

type UpdateGroceryDeliveryLabelInput struct {
	ID                     string `json:"id"`
	Code                   string `json:"code"`
	ValueInEnglishLanguage string `json:"valueInEnglishLanguage"`
	LanguageLabel          string `json:"languageLabel"`
	IsActive               bool   `json:"isActive"`
}

type UpdateHelpCategoryInput struct {
	ID          string          `json:"id"`
	IsActive    bool            `json:"isActive"`
	Order       string          `json:"order"`
	Title       string          `json:"title"`
	CategoryFor HelpCategoryFor `json:"categoryFor"`
}

type UpdateHelpDetailInput struct {
	ID       string             `json:"id"`
	Category HelpDetailCategory `json:"category"`
	IsActive bool               `json:"isActive"`
	Order    string             `json:"order"`
	Question string             `json:"question"`
	Answer   string             `json:"answer"`
}

type UpdateLocationWiseFareInput struct {
	ID                  string `json:"id"`
	SourceLocation      string `json:"sourceLocation"`
	DestinationLocation string `json:"destinationLocation"`
	FlatFare            string `json:"flatFare"`
	VehicleType         string `json:"vehicleType"`
	IsActive            bool   `json:"isActive"`
}

type UpdateManageDocumentInput struct {
	ID           string      `json:"id"`
	DocumentFor  DocumentFor `json:"documentFor"`
	Country      string      `json:"country"`
	ExpireOnDate bool        `json:"expireOnDate"`
	DocumentName string      `json:"documentName"`
	IsActive     bool        `json:"isActive"`
}

type UpdateMarketSettingsInput struct {
	ID           string                    `json:"id"`
	General      *GeneralSettingInput      `json:"general"`
	Email        *EmailSettingInput        `json:"email"`
	Appearance   *AppearanceSettingInput   `json:"appearance"`
	Sms          *SMSSettingInput          `json:"sms"`
	SocialMedia  *SocialMediaSettingInput  `json:"socialMedia"`
	App          *AppSettingInput          `json:"app"`
	Installation *InstallationSettingInput `json:"installation"`
	Store        *StoreSettingInput        `json:"store"`
	Payment      *PaymentSettingInput      `json:"payment"`
}

type UpdateOAuthApplicationInput struct {
	ID                 string             `json:"id"`
	AppName            string             `json:"appName"`
	PublisherName      string             `json:"publisherName"`
	ClientDescription  string             `json:"clientDescription"`
	RedirectURL        string             `json:"redirectURL"`
	Scopes             []string           `json:"scopes"`
	Developers         []string           `json:"developers"`
	DevelopmentUsers   []string           `json:"developmentUsers"`
	AppIcon            string             `json:"appIcon"`
	AllowImplicitGrant AllowImplicitGrant `json:"allowImplicitGrant"`
	WhiteListedDomains []*string          `json:"whiteListedDomains"`
	TermsOfServiceURL  string             `json:"termsOfServiceURL"`
	PrivacyURL         string             `json:"privacyURL"`
	Website            string             `json:"website"`
	ContactEmail       string             `json:"contactEmail"`
}

type UpdateOrderInput struct {
	ID                 string            `json:"id"`
	OrderItems         *OrderItemInput   `json:"orderItems"`
	ServiceType        string            `json:"serviceType"`
	Coupon             string            `json:"coupon"`
	ProviderID         string            `json:"providerID"`
	Currency           *CurrencyInput    `json:"currency"`
	DiscountAmount     float64           `json:"discountAmount"`
	DiscountTax        float64           `json:"discountTax"`
	ShippingTotal      float64           `json:"shippingTotal"`
	ShippingTax        float64           `json:"shippingTax"`
	CartTax            float64           `json:"cartTax"`
	OrderTotalAmount   float64           `json:"orderTotalAmount"`
	TotalTax           float64           `json:"totalTax"`
	PricesIncludeTax   bool              `json:"pricesIncludeTax"`
	Billing            *BillingInput     `json:"billing"`
	Shipping           *ShippingInput    `json:"shipping"`
	PaymentMethod      PaymentMethodType `json:"paymentMethod"`
	PaymentMethodTitle string            `json:"paymentMethodTitle"`
}

type UpdateOrderNoteInput struct {
	ID           string `json:"id"`
	Author       string `json:"author"`
	Note         string `json:"note"`
	CustomerNote bool   `json:"customerNote"`
	IsActive     bool   `json:"isActive"`
}

type UpdateOrderStatusUtilityInput struct {
	ID                string `json:"id"`
	StatusTitle       string `json:"statusTitle"`
	StatusDescription string `json:"statusDescription"`
	IsActive          bool   `json:"isActive"`
}

type UpdatePackageTypeInput struct {
	ID          string `json:"id"`
	PackageType string `json:"packageType"`
	Language    string `json:"language"`
	IsActive    bool   `json:"isActive"`
}

type UpdatePageInput struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Title       string `json:"title"`
	Body        string `json:"body"`
	Description string `json:"description"`
	Language    string `json:"language"`
	IsActive    *bool  `json:"isActive"`
}

type UpdateProductAttributeInput struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Slug        string   `json:"slug"`
	Type        string   `json:"type"`
	OrderBy     string   `json:"orderBy"`
	HasArchives bool     `json:"hasArchives"`
	Position    int      `json:"position"`
	Visible     bool     `json:"visible"`
	Variation   bool     `json:"variation"`
	Option      []string `json:"option"`
}

type UpdateProductAttributeTermInput struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
	MenuOrder   int    `json:"menuOrder"`
	Count       int    `json:"count"`
}

type UpdateProductBrandInput struct {
	ID            string   `json:"id"`
	Type          string   `json:"type"`
	IsActive      bool     `json:"isActive"`
	Name          string   `json:"name"`
	Slug          string   `json:"slug"`
	Description   string   `json:"description"`
	Relationships []string `json:"relationships"`
}

type UpdateProductCategoryInput struct {
	ID           string                `json:"id"`
	Name         string                `json:"name"`
	Slug         string                `json:"slug"`
	Parent       int                   `json:"parent"`
	Store        string                `json:"store"`
	Description  string                `json:"description"`
	DisplayOrder int                   `json:"displayOrder"`
	Display      string                `json:"display"`
	ServiceType  StoreCategory         `json:"serviceType"`
	MenuCategory string                `json:"menuCategory"`
	MenuOrder    int                   `json:"menuOrder"`
	Count        int                   `json:"count"`
	Image        *AddProductImageInput `json:"image"`
}

type UpdateProductCollectionInput struct {
	ID            string   `json:"id"`
	Type          string   `json:"type"`
	IsActive      bool     `json:"isActive"`
	Name          string   `json:"name"`
	Description   string   `json:"description"`
	Slug          string   `json:"slug"`
	Relationships []string `json:"relationships"`
}

type UpdateProductDownloadInput struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	File string `json:"file"`
}

type UpdateProductImageInput struct {
	ID   string `json:"id"`
	Src  string `json:"src"`
	Name string `json:"name"`
	Alt  string `json:"alt"`
}

type UpdateProductInput struct {
	ID                string                         `json:"id"`
	Name              string                         `json:"name"`
	MenuItem          string                         `json:"menuItem"`
	Slug              string                         `json:"slug"`
	Permalink         string                         `json:"permalink"`
	Type              string                         `json:"type"`
	Status            ProductStatus                  `json:"status"`
	IsFeatured        bool                           `json:"isFeatured"`
	ItemTagName       string                         `json:"itemTagName"`
	CatalogVisibility string                         `json:"catalogVisibility"`
	Description       string                         `json:"description"`
	ShortDescription  string                         `json:"shortDescription"`
	Sku               string                         `json:"sku"`
	Price             float64                        `json:"price"`
	RegularPrice      float64                        `json:"regularPrice"`
	ServiceType       StoreCategory                  `json:"serviceType"`
	SalePrice         float64                        `json:"salePrice"`
	DateOnSaleFrom    string                         `json:"dateOnSaleFrom"`
	DateOnSaleTo      string                         `json:"dateOnSaleTo"`
	PriceHTML         string                         `json:"priceHtml"`
	OnSale            bool                           `json:"onSale"`
	Purchasable       bool                           `json:"purchasable"`
	TotalSales        int                            `json:"totalSales"`
	Store             string                         `json:"Store"`
	Virtual           bool                           `json:"virtual"`
	DisplayOrder      int                            `json:"displayOrder"`
	Downloadable      bool                           `json:"downloadable"`
	Downloads         []*AddProductDownloadInput     `json:"downloads"`
	DownloadLimit     int                            `json:"downloadLimit"`
	DownloadExpiry    int                            `json:"downloadExpiry"`
	ExternalURL       string                         `json:"externalUrl"`
	ButtonText        string                         `json:"buttonText"`
	TaxStatus         string                         `json:"taxStatus"`
	TaxClass          string                         `json:"taxClass"`
	ManageStock       bool                           `json:"manageStock"`
	StockQuantity     int                            `json:"stockQuantity"`
	StockStatus       string                         `json:"stockStatus"`
	BackOrders        string                         `json:"backOrders"`
	BackOrdersAllowed bool                           `json:"backOrdersAllowed"`
	BackOrdered       bool                           `json:"backOrdered"`
	SoldIndividually  bool                           `json:"soldIndividually"`
	Weight            float64                        `json:"weight"`
	ShippingRequired  bool                           `json:"shippingRequired"`
	ShippingTaxable   bool                           `json:"shippingTaxable"`
	ShippingClass     string                         `json:"shippingClass"`
	ShippingClassID   string                         `json:"shippingClassId"`
	ReviewsAllowed    bool                           `json:"reviewsAllowed"`
	AverageRating     string                         `json:"averageRating"`
	RatingCount       int                            `json:"ratingCount"`
	ParentID          string                         `json:"parentId"`
	PurchaseNote      string                         `json:"purchaseNote"`
	MenuOrder         int                            `json:"menuOrder"`
	MetaData          []*UpdateProductMetadataInput  `json:"metaData"`
	GroupedProducts   []string                       `json:"groupedProducts"`
	Variations        []string                       `json:"variations"`
	DefaultAttributes []*UpdateProductAttributeInput `json:"defaultAttributes"`
	Attributes        []*UpdateProductAttributeInput `json:"attributes"`
	Images            []*UpdateProductImageInput     `json:"images"`
	Tags              []*UpdateProductTagInput       `json:"tags"`
	Categories        []*UpdateProductCategoryInput  `json:"categories"`
	CrossSellIds      []string                       `json:"crossSellIds"`
	UpsellIds         []string                       `json:"upsellIds"`
	RelatedIds        []string                       `json:"relatedIds"`
	Dimensions        *ProductDimensionsInput        `json:"dimensions"`
}

type UpdateProductMetadataInput struct {
	ID    string `json:"id"`
	Key   string `json:"key"`
	Value string `json:"value"`
}

type UpdateProductReviewInput struct {
	ID                 string                   `json:"id"`
	ProductID          string                   `json:"productID"`
	Status             ProductStatus            `json:"status"`
	Reviewer           string                   `json:"reviewer"`
	ReviewerEmail      string                   `json:"reviewerEmail"`
	Review             string                   `json:"review"`
	Rating             int                      `json:"rating"`
	Verified           bool                     `json:"verified"`
	ReviewerAvatarURLs *ReviewerAvatarUrlsInput `json:"reviewerAvatarURLs"`
}

type UpdateProductTagInput struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
	Count       int    `json:"count"`
}

type UpdateProductVariationInput struct {
	ID                string                         `json:"id"`
	ParentProductID   string                         `json:"parentProductID"`
	Description       string                         `json:"description"`
	Permalink         string                         `json:"permalink"`
	Sku               string                         `json:"sku"`
	Price             float64                        `json:"price"`
	RegularPrice      float64                        `json:"regularPrice"`
	SalePrice         float64                        `json:"salePrice"`
	DateOnSaleFrom    string                         `json:"dateOnSaleFrom"`
	DateOnSaleTo      string                         `json:"dateOnSaleTo"`
	OnSale            bool                           `json:"onSale"`
	Status            ProductStatus                  `json:"status"`
	Purchasable       bool                           `json:"purchasable"`
	Virtual           bool                           `json:"virtual"`
	Downloadable      bool                           `json:"downloadable"`
	DownloadLimit     int                            `json:"downloadLimit"`
	DownloadExpiry    int                            `json:"downloadExpiry"`
	TaxStatus         string                         `json:"taxStatus"`
	TaxClass          string                         `json:"taxClass"`
	ManageStock       bool                           `json:"manageStock"`
	StockQuantity     int                            `json:"stockQuantity"`
	StockStatus       string                         `json:"stockStatus"`
	BackOrders        string                         `json:"backOrders"`
	BackOrdersAllowed bool                           `json:"backOrdersAllowed"`
	BackOrdered       bool                           `json:"backOrdered"`
	Weight            float64                        `json:"weight"`
	ShippingClass     string                         `json:"shippingClass"`
	ShippingClassID   string                         `json:"shippingClassId"`
	MenuOrder         int                            `json:"menuOrder"`
	MetaData          []*UpdateProductMetadataInput  `json:"metaData"`
	Attributes        []*UpdateProductAttributeInput `json:"attributes"`
	Image             *UpdateProductImageInput       `json:"image"`
	Dimensions        *ProductDimensionsInput        `json:"dimensions"`
	Downloads         []*UpdateProductDownloadInput  `json:"downloads"`
}

type UpdateRentalPackageInput struct {
	ID                     string `json:"id"`
	Name                   string `json:"name"`
	RentalTotalPrice       int    `json:"rentalTotalPrice"`
	RentalMiles            int    `json:"rentalMiles"`
	RentalHour             int    `json:"rentalHour"`
	AdditionalPricePerMile int    `json:"additionalPricePerMile"`
	AdditionalPricePerMin  int    `json:"additionalPricePerMin"`
}

type UpdateReviewInput struct {
	ID                    string     `json:"id"`
	JobID                 string     `json:"jobId"`
	UserName              string     `json:"userName"`
	UserAverageRating     float64    `json:"userAverageRating"`
	ProviderAverageRating float64    `json:"providerAverageRating"`
	ProviderName          string     `json:"providerName"`
	UserRating            float64    `json:"userRating"`
	ProviderRating        float64    `json:"providerRating"`
	Type                  ReviewType `json:"type"`
	From                  string     `json:"from"`
	To                    string     `json:"to"`
	Date                  string     `json:"date"`
	Comment               string     `json:"comment"`
	IsActive              bool       `json:"isActive"`
}

type UpdateRideProfileTypeInput struct {
	ID               string `json:"id"`
	ProfileShortName string `json:"profileShortName"`
	OrganizationType string `json:"organizationType"`
	ProfileTitle     string `json:"profileTitle"`
	TitleDescription string `json:"titleDescription"`
	ScreenHeading    string `json:"screenHeading"`
	ScreenTitle      string `json:"screenTitle"`
	ButtonText       string `json:"buttonText"`
	ProfileIcon      string `json:"profileIcon"`
	WelcomePicture   string `json:"welcomePicture"`
	IsActive         *bool  `json:"isActive"`
}

type UpdateSEOSettingInput struct {
	ID              *string `json:"id"`
	PageName        *string `json:"pageName"`
	PageTitle       *string `json:"pageTitle"`
	MetaKeyword     *string `json:"metaKeyword"`
	MetaDescription *string `json:"metaDescription"`
}

type UpdateServiceCompanyInput struct {
	ID             string              `json:"id"`
	Name           string              `json:"name"`
	ProvidersCount int                 `json:"providersCount"`
	Email          string              `json:"email"`
	IsActive       bool                `json:"isActive"`
	Country        string              `json:"country"`
	State          string              `json:"state"`
	City           string              `json:"city"`
	Address        *UpdateAddressInput `json:"address"`
	Zipcode        string              `json:"zipcode"`
	Phone          string              `json:"phone"`
	Language       string              `json:"language"`
	VatNo          string              `json:"vatNo"`
}

type UpdateServiceInput struct {
	ID                        string           `json:"id"`
	Name                      string           `json:"name"`
	PriceBasedOn              PriceBasedOn     `json:"priceBasedOn"`
	CommissionOnMaterial      bool             `json:"commissionOnMaterial"`
	Category                  ServiceCategory  `json:"category"`
	UserCancellationTimeLimit int              `json:"userCancellationTimeLimit"`
	UserCancellationCharges   float64          `json:"userCancellationCharges"`
	WaitingTimeLimit          int              `json:"waitingTimeLimit"`
	WaitingCharges            float64          `json:"waitingCharges"`
	CategoryViewType          CategoryViewType `json:"categoryViewType"`
	Icon                      string           `json:"icon"`
	DisplayOrder              int              `json:"displayOrder"`
	Tags                      []string         `json:"tags"`
	IsActive                  bool             `json:"isActive"`
}

type UpdateServiceProviderInput struct {
	ID                 string           `json:"id"`
	FirstName          string           `json:"firstName"`
	LastName           string           `json:"lastName"`
	Email              string           `json:"email"`
	Gender             Gender           `json:"gender"`
	ProfilePicture     string           `json:"profilePicture"`
	Country            string           `json:"country"`
	State              string           `json:"state"`
	City               string           `json:"city"`
	Address            *AddAddressInput `json:"address"`
	ZipCode            int              `json:"zipCode"`
	MobileNumber       int              `json:"mobileNumber"`
	Company            string           `json:"company"`
	Language           string           `json:"language"`
	Currency           string           `json:"currency"`
	BankAccountDetails string           `json:"bankAccountDetails"`
	ServiceDescription string           `json:"serviceDescription"`
	CompanyID          string           `json:"companyID"`
	Metadata           *string          `json:"metadata"`
}

type UpdateServiceProviderVehicleInput struct {
	ID                  string                      `json:"id"`
	VehicleCompanyName  string                      `json:"vehicleCompanyName"`
	VehicleModelName    string                      `json:"vehicleModelName"`
	VehicleYear         string                      `json:"vehicleYear"`
	VehicleNumber       string                      `json:"vehicleNumber"`
	VehicleColor        string                      `json:"vehicleColor"`
	VehicleImageURL     string                      `json:"vehicleImageUrl"`
	VehicleLicensePlate string                      `json:"vehicleLicensePlate"`
	ServiceCompanyID    string                      `json:"serviceCompanyId"`
	EnabledServiceType  []*VehicleServiceTypesInput `json:"enabledServiceType"`
}

type UpdateServiceSubCategoryInput struct {
	ID           string `json:"id"`
	ServiceID    string `json:"serviceID"`
	Name         string `json:"name"`
	Description  string `json:"description"`
	ServiceType  string `json:"serviceType"`
	Icon         string `json:"icon"`
	BannerImage  string `json:"bannerImage"`
	DisplayOrder int    `json:"displayOrder"`
	IsActive     bool   `json:"isActive"`
}

type UpdateServiceTypeInput struct {
	ID                   string   `json:"id"`
	ServiceCategory      string   `json:"serviceCategory"`
	ServiceSubCategoryID string   `json:"ServiceSubCategoryID"`
	ServiceType          string   `json:"serviceType"`
	ServiceDescription   string   `json:"serviceDescription"`
	Location             string   `json:"location"`
	FareType             FareType `json:"fareType"`
	ServiceCharge        float64  `json:"serviceCharge"`
	Commission           float64  `json:"commission"`
	AllowQuantity        bool     `json:"allowQuantity"`
	DisplayOrder         int      `json:"displayOrder"`
	IsActive             bool     `json:"isActive"`
}

type UpdateServiceVehicleTypeInput struct {
	ID                           string             `json:"id"`
	VehicleServiceType           VehicleServiceType `json:"vehicleServiceType"`
	EnablePoolRide               bool               `json:"enablePoolRide"`
	VehicleType                  VehicleType        `json:"vehicleType"`
	VehicleCategory              VehicleCategory    `json:"vehicleCategory"`
	Location                     string             `json:"location"`
	PricePerKms                  float64            `json:"pricePerKms"`
	PricePerMinute               float64            `json:"pricePerMinute"`
	BaseFare                     float64            `json:"baseFare"`
	Commission                   float64            `json:"commission"`
	MinimumFare                  float64            `json:"minimumFare"`
	UserCancellationTimeLimit    int                `json:"userCancellationTimeLimit"`
	UserCancellationCharges      float64            `json:"userCancellationCharges"`
	WaitingTimeLimit             int                `json:"waitingTimeLimit"`
	WaitingCharges               float64            `json:"waitingCharges"`
	InTransitWaitingFeePerMinute float64            `json:"inTransitWaitingFeePerMinute"`
	PersonCapacity               int                `json:"personCapacity"`
	PeakTimeSurcharge            bool               `json:"peakTimeSurcharge"`
	NightCharges                 bool               `json:"nightCharges"`
	VehiclePicture               string             `json:"vehiclePicture"`
	Order                        int                `json:"order"`
	IsActive                     bool               `json:"isActive"`
}

type UpdateSmsTemplateInput struct {
	ID         string `json:"id"`
	Code       string `json:"code"`
	Body       string `json:"body"`
	Language   string `json:"language"`
	TemplateID string `json:"templateId"`
	Purpose    string `json:"purpose"`
	Title      string `json:"title"`
}

type UpdateStateInput struct {
	ID          string `json:"id"`
	CountryName string `json:"countryName"`
	CountryCode string `json:"countryCode"`
	StateName   string `json:"stateName"`
	StateCode   string `json:"stateCode"`
	IsActive    bool   `json:"isActive"`
}

type UpdateStoreInput struct {
	ID                       string                      `json:"id"`
	StoreName                string                      `json:"storeName"`
	ServiceCategory          StoreCategory               `json:"serviceCategory"`
	Email                    string                      `json:"email"`
	Password                 string                      `json:"password"`
	StoreLocation            []*UpdateStoreLocationInput `json:"storeLocation"`
	StoreAddress             *AddAddressInput            `json:"storeAddress"`
	ZipCode                  string                      `json:"zipCode"`
	Country                  string                      `json:"country"`
	State                    string                      `json:"state"`
	ContactPersonName        string                      `json:"contactPersonName"`
	MobileNumber             string                      `json:"mobileNumber"`
	StoreLogo                string                      `json:"storeLogo"`
	Language                 string                      `json:"language"`
	AvailableStoreItemTypes  string                      `json:"availableStoreItemTypes"`
	Slot1                    time.Time                   `json:"slot1"`
	Slot2                    time.Time                   `json:"slot2"`
	MinimumAmountPerOrder    float64                     `json:"minimumAmountPerOrder"`
	AdditionalPackingCharges float64                     `json:"additionalPackingCharges"`
	MaxOrderQuantity         string                      `json:"maxOrderQuantity"`
	EstimatedOrderTime       int                         `json:"estimatedOrderTime"`
	OfferAppliesOn           OfferAppliesOn              `json:"offerAppliesOn"`
	BankAccountDetails       *UpdateBankDetailsInput     `json:"bankAccountDetails"`
}

type UpdateStoreLocationInput struct {
	ID                string              `json:"id"`
	StoreID           string              `json:"storeID"`
	StoreLocationName string              `json:"storeLocationName"`
	StoreAddress      *UpdateAddressInput `json:"storeAddress"`
}

type UpdateStoreVehicleTypeInput struct {
	ID                        string                   `json:"id"`
	Type                      string                   `json:"type"`
	Location                  StoreVehicleTypeLocation `json:"location"`
	ChargesForCompletedOrders int                      `json:"chargesForCompletedOrders"`
	ChargesForCancelledOrders int                      `json:"chargesForCancelledOrders"`
	DeliveryRadius            int                      `json:"deliveryRadius"`
	Order                     int                      `json:"order"`
	IsActive                  bool                     `json:"isActive"`
}

type UpdateUserInput struct {
	ID           string `json:"id"`
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	Email        string `json:"email"`
	MobileNo     string `json:"mobileNo"`
	Password     string `json:"password"`
	Gender       Gender `json:"gender"`
	ProfilePhoto string `json:"profilePhoto"`
	Phone        int    `json:"phone"`
	Language     string `json:"language"`
	Currency     string `json:"currency"`
	IsActive     bool   `json:"isActive"`
}

type UpdateUserRoleGroupInput struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Roles       []string `json:"roles"`
	Description string   `json:"description"`
}

type UpdateUserRoleInput struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Permissions []string `json:"permissions"`
}

type UpdateVehicleMakeInput struct {
	ID       string `json:"id"`
	Make     string `json:"make"`
	IsActive bool   `json:"isActive"`
}

type UpdateVehicleModelInput struct {
	ID       string `json:"id"`
	Make     string `json:"make"`
	Model    string `json:"model"`
	IsActive bool   `json:"isActive"`
}

type UpdateVisitLocationInput struct {
	ID               string `json:"id"`
	DestinationTitle string `json:"destinationTitle"`
	Destination      string `json:"destination"`
	IsActive         bool   `json:"isActive"`
}

type UpdateWebhookInput struct {
	ID          string   `json:"id"`
	URL         string   `json:"url"`
	EventTopics []string `json:"eventTopics"`
	Secret      string   `json:"secret"`
	IsEnabled   bool     `json:"isEnabled"`
}

type UpdateWineDeliveryLabelInput struct {
	ID                     string `json:"id"`
	Code                   string `json:"code"`
	ValueInEnglishLanguage string `json:"valueInEnglishLanguage"`
	LanguageLabel          string `json:"languageLabel"`
	IsActive               bool   `json:"isActive"`
}

// The `UploadFile` type
// represents the request for uploading a file with certain payload.
type UploadFile struct {
	ID   int            `json:"id"`
	File graphql.Upload `json:"file"`
}

//  List of User
type UserConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*UserEdge `json:"edges"`
	// A list of nodes.
	Nodes []*User `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node User
type UserEdge struct {
	Cursor string `json:"cursor"`
	Node   *User  `json:"node"`
}

type UserReferralReport struct {
	ID                   string `json:"id"`
	MemberName           string `json:"memberName"`
	TotalMembersReferred string `json:"totalMembersReferred"`
	TotalAmountEarned    string `json:"totalAmountEarned"`
	DateReferred         string `json:"dateReferred"`
}

type UserReview struct {
	OrderNumber      string `json:"orderNumber"`
	FromProviderName string `json:"fromProviderName"`
	ToUserName       string `json:"toUserName"`
	Rate             string `json:"rate"`
	Date             string `json:"date"`
	Comment          string `json:"comment"`
}

//  List of User roles
type UserRoleConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*UserRoleEdge `json:"edges"`
	// A list of nodes.
	Nodes []*UserRole `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node UserRole
type UserRoleEdge struct {
	Cursor string    `json:"cursor"`
	Node   *UserRole `json:"node"`
}

//  List of User role groups
type UserRoleGroupConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*UserRoleGroupEdge `json:"edges"`
	// A list of nodes.
	Nodes []*UserRoleGroup `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node UserRoleGroup
type UserRoleGroupEdge struct {
	Cursor string         `json:"cursor"`
	Node   *UserRoleGroup `json:"node"`
}

type UserSignUpDetails struct {
	FirstName    string  `json:"firstName"`
	LastName     string  `json:"lastName"`
	Email        string  `json:"email"`
	Password     string  `json:"password"`
	MobileNo     *string `json:"mobileNo"`
	Country      *string `json:"country"`
	State        *string `json:"state"`
	City         *string `json:"city"`
	Gender       string  `json:"gender"`
	DateOfBirth  *string `json:"dateOfBirth"`
	ReferralCode *string `json:"referralCode"`
}

//  List of UserWalletReport
type UserWalletReportConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*UserWalletReportEdge `json:"edges"`
	// A list of nodes.
	Nodes []*UserWalletReport `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node UserWalletReport
type UserWalletReportEdge struct {
	Cursor string            `json:"cursor"`
	Node   *UserWalletReport `json:"node"`
}

//  List of VehicleMake
type VehicleMakeConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*VehicleMakeEdge `json:"edges"`
	// A list of nodes.
	Nodes []*VehicleMake `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node VehicleMake
type VehicleMakeEdge struct {
	Cursor string       `json:"cursor"`
	Node   *VehicleMake `json:"node"`
}

//  List of VehicleModel
type VehicleModelConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*VehicleModelEdge `json:"edges"`
	// A list of nodes.
	Nodes []*VehicleModel `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node VehicleModel
type VehicleModelEdge struct {
	Cursor string        `json:"cursor"`
	Node   *VehicleModel `json:"node"`
}

type VehicleServiceOption struct {
	ID         string `json:"id"`
	IsEnabled  bool   `json:"isEnabled"`
	OptionName string `json:"optionName"`
}

type VehicleServiceOptionInput struct {
	ID         string `json:"id"`
	IsEnabled  bool   `json:"isEnabled"`
	OptionName string `json:"optionName"`
}

type VehicleServiceTypes struct {
	ServiceID      string                  `json:"serviceId"`
	ServiceName    string                  `json:"serviceName"`
	IsEnabled      bool                    `json:"isEnabled"`
	ServiceOptions []*VehicleServiceOption `json:"serviceOptions"`
}

type VehicleServiceTypesInput struct {
	ServiceID      string                       `json:"serviceId"`
	ServiceName    string                       `json:"serviceName"`
	IsEnabled      bool                         `json:"isEnabled"`
	ServiceOptions []*VehicleServiceOptionInput `json:"serviceOptions"`
}

//  List of VisitLocation
type VisitLocationConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*VisitLocationEdge `json:"edges"`
	// A list of nodes.
	Nodes []*VisitLocation `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node VisitLocation
type VisitLocationEdge struct {
	Cursor string         `json:"cursor"`
	Node   *VisitLocation `json:"node"`
}

// List of WalletTransaction
type WalletTransactionConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*WalletTransactionEdge `json:"edges"`
	// A list of nodes.
	Nodes []*WalletTransaction `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node WalletTransaction
type WalletTransactionEdge struct {
	Cursor string             `json:"cursor"`
	Node   *WalletTransaction `json:"node"`
}

//  Paginating the node Webhook
type WebhookEdge struct {
	Cursor string   `json:"cursor"`
	Node   *Webhook `json:"node"`
}

type WebhookLogConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*WebhookLogEdge `json:"edges"`
	// A list of nodes.
	Nodes []*WebhookLog `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node
type WebhookLogEdge struct {
	Cursor string      `json:"cursor"`
	Node   *WebhookLog `json:"node"`
}

type WebhooksConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*WebhookEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Webhook `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  List of WineDeliveryLabel
type WineDeliveryLabelConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*WineDeliveryLabelEdge `json:"edges"`
	// A list of nodes.
	Nodes []*WineDeliveryLabel `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node WineDeliveryLabel
type WineDeliveryLabelEdge struct {
	Cursor string             `json:"cursor"`
	Node   *WineDeliveryLabel `json:"node"`
}

// List of Withdrawal
type WithdrawalConnection struct {
	// Total number of nodes
	TotalCount int `json:"totalCount"`
	// A list of edges
	Edges []*WithdrawalEdge `json:"edges"`
	// A list of nodes.
	Nodes []*Withdrawal `json:"nodes"`
	// Information to aid in pagination.
	PageInfo *PageInfo `json:"pageInfo"`
}

//  Paginating the node Withdrawal
type WithdrawalEdge struct {
	Cursor string      `json:"cursor"`
	Node   *Withdrawal `json:"node"`
}

type ProductData struct {
	ID   string `json:"id"`
	Type string `json:"type"`
}

type AddPaymentMethod string

const (
	AddPaymentMethodStripe    AddPaymentMethod = "STRIPE"
	AddPaymentMethodBraintree AddPaymentMethod = "BRAINTREE"
	AddPaymentMethodPaymaya   AddPaymentMethod = "PAYMAYA"
	AddPaymentMethodOmise     AddPaymentMethod = "OMISE"
	AddPaymentMethodAdyen     AddPaymentMethod = "ADYEN"
	AddPaymentMethodXendit    AddPaymentMethod = "XENDIT"
)

var AllAddPaymentMethod = []AddPaymentMethod{
	AddPaymentMethodStripe,
	AddPaymentMethodBraintree,
	AddPaymentMethodPaymaya,
	AddPaymentMethodOmise,
	AddPaymentMethodAdyen,
	AddPaymentMethodXendit,
}

func (e AddPaymentMethod) IsValid() bool {
	switch e {
	case AddPaymentMethodStripe, AddPaymentMethodBraintree, AddPaymentMethodPaymaya, AddPaymentMethodOmise, AddPaymentMethodAdyen, AddPaymentMethodXendit:
		return true
	}
	return false
}

func (e AddPaymentMethod) String() string {
	return string(e)
}

func (e *AddPaymentMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddPaymentMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddPaymentMethod", str)
	}
	return nil
}

func (e AddPaymentMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AirportSurchargeSearch string

const (
	AirportSurchargeSearchAll             AirportSurchargeSearch = "ALL"
	AirportSurchargeSearchAirportLocation AirportSurchargeSearch = "AIRPORT_LOCATION"
	AirportSurchargeSearchVehicleType     AirportSurchargeSearch = "VEHICLE_TYPE"
)

var AllAirportSurchargeSearch = []AirportSurchargeSearch{
	AirportSurchargeSearchAll,
	AirportSurchargeSearchAirportLocation,
	AirportSurchargeSearchVehicleType,
}

func (e AirportSurchargeSearch) IsValid() bool {
	switch e {
	case AirportSurchargeSearchAll, AirportSurchargeSearchAirportLocation, AirportSurchargeSearchVehicleType:
		return true
	}
	return false
}

func (e AirportSurchargeSearch) String() string {
	return string(e)
}

func (e *AirportSurchargeSearch) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AirportSurchargeSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AirportSurchargeSearch", str)
	}
	return nil
}

func (e AirportSurchargeSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AirportSurchargeSelectStatus string

const (
	AirportSurchargeSelectStatusActive   AirportSurchargeSelectStatus = "ACTIVE"
	AirportSurchargeSelectStatusInactive AirportSurchargeSelectStatus = "INACTIVE"
	AirportSurchargeSelectStatusDelete   AirportSurchargeSelectStatus = "DELETE"
)

var AllAirportSurchargeSelectStatus = []AirportSurchargeSelectStatus{
	AirportSurchargeSelectStatusActive,
	AirportSurchargeSelectStatusInactive,
	AirportSurchargeSelectStatusDelete,
}

func (e AirportSurchargeSelectStatus) IsValid() bool {
	switch e {
	case AirportSurchargeSelectStatusActive, AirportSurchargeSelectStatusInactive, AirportSurchargeSelectStatusDelete:
		return true
	}
	return false
}

func (e AirportSurchargeSelectStatus) String() string {
	return string(e)
}

func (e *AirportSurchargeSelectStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AirportSurchargeSelectStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AirportSurchargeSelectStatus", str)
	}
	return nil
}

func (e AirportSurchargeSelectStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AllowImplicitGrant string

const (
	AllowImplicitGrantAllow    AllowImplicitGrant = "ALLOW"
	AllowImplicitGrantDisallow AllowImplicitGrant = "DISALLOW"
)

var AllAllowImplicitGrant = []AllowImplicitGrant{
	AllowImplicitGrantAllow,
	AllowImplicitGrantDisallow,
}

func (e AllowImplicitGrant) IsValid() bool {
	switch e {
	case AllowImplicitGrantAllow, AllowImplicitGrantDisallow:
		return true
	}
	return false
}

func (e AllowImplicitGrant) String() string {
	return string(e)
}

func (e *AllowImplicitGrant) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AllowImplicitGrant(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AllowImplicitGrant", str)
	}
	return nil
}

func (e AllowImplicitGrant) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AppStatus string

const (
	AppStatusDevelopment AppStatus = "DEVELOPMENT"
	AppStatusProduction  AppStatus = "PRODUCTION"
)

var AllAppStatus = []AppStatus{
	AppStatusDevelopment,
	AppStatusProduction,
}

func (e AppStatus) IsValid() bool {
	switch e {
	case AppStatusDevelopment, AppStatusProduction:
		return true
	}
	return false
}

func (e AppStatus) String() string {
	return string(e)
}

func (e *AppStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppStatus", str)
	}
	return nil
}

func (e AppStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BalanceFor string

const (
	BalanceForBooking BalanceFor = "BOOKING"
	BalanceForDeposit BalanceFor = "DEPOSIT"
)

var AllBalanceFor = []BalanceFor{
	BalanceForBooking,
	BalanceForDeposit,
}

func (e BalanceFor) IsValid() bool {
	switch e {
	case BalanceForBooking, BalanceForDeposit:
		return true
	}
	return false
}

func (e BalanceFor) String() string {
	return string(e)
}

func (e *BalanceFor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BalanceFor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BalanceFor", str)
	}
	return nil
}

func (e BalanceFor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BankAccountStatus string

const (
	BankAccountStatusErrored            BankAccountStatus = "ERRORED"
	BankAccountStatusNew                BankAccountStatus = "NEW"
	BankAccountStatusValidated          BankAccountStatus = "VALIDATED"
	BankAccountStatusVerificationFailed BankAccountStatus = "VERIFICATION_FAILED"
	BankAccountStatusVerified           BankAccountStatus = "VERIFIED"
)

var AllBankAccountStatus = []BankAccountStatus{
	BankAccountStatusErrored,
	BankAccountStatusNew,
	BankAccountStatusValidated,
	BankAccountStatusVerificationFailed,
	BankAccountStatusVerified,
}

func (e BankAccountStatus) IsValid() bool {
	switch e {
	case BankAccountStatusErrored, BankAccountStatusNew, BankAccountStatusValidated, BankAccountStatusVerificationFailed, BankAccountStatusVerified:
		return true
	}
	return false
}

func (e BankAccountStatus) String() string {
	return string(e)
}

func (e *BankAccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BankAccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BankAccountStatus", str)
	}
	return nil
}

func (e BankAccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BannerStatusInput string

const (
	BannerStatusInputActive   BannerStatusInput = "ACTIVE"
	BannerStatusInputInactive BannerStatusInput = "INACTIVE"
	BannerStatusInputDeleted  BannerStatusInput = "DELETED"
)

var AllBannerStatusInput = []BannerStatusInput{
	BannerStatusInputActive,
	BannerStatusInputInactive,
	BannerStatusInputDeleted,
}

func (e BannerStatusInput) IsValid() bool {
	switch e {
	case BannerStatusInputActive, BannerStatusInputInactive, BannerStatusInputDeleted:
		return true
	}
	return false
}

func (e BannerStatusInput) String() string {
	return string(e)
}

func (e *BannerStatusInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BannerStatusInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BannerStatusInput", str)
	}
	return nil
}

func (e BannerStatusInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BannersType string

const (
	BannersTypeAll  BannersType = "All"
	BannersTypeName BannersType = "NAME"
	BannersTypeURL  BannersType = "URL"
)

var AllBannersType = []BannersType{
	BannersTypeAll,
	BannersTypeName,
	BannersTypeURL,
}

func (e BannersType) IsValid() bool {
	switch e {
	case BannersTypeAll, BannersTypeName, BannersTypeURL:
		return true
	}
	return false
}

func (e BannersType) String() string {
	return string(e)
}

func (e *BannersType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BannersType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BannersType", str)
	}
	return nil
}

func (e BannersType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BookingType string

const (
	BookingTypeRide          BookingType = "RIDE"
	BookingTypeDelivery      BookingType = "DELIVERY"
	BookingTypeOtherServices BookingType = "OTHER_SERVICES"
)

var AllBookingType = []BookingType{
	BookingTypeRide,
	BookingTypeDelivery,
	BookingTypeOtherServices,
}

func (e BookingType) IsValid() bool {
	switch e {
	case BookingTypeRide, BookingTypeDelivery, BookingTypeOtherServices:
		return true
	}
	return false
}

func (e BookingType) String() string {
	return string(e)
}

func (e *BookingType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BookingType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BookingType", str)
	}
	return nil
}

func (e BookingType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BusinessTripReasonType string

const (
	BusinessTripReasonTypeAll              BusinessTripReasonType = "ALL"
	BusinessTripReasonTypeTripReason       BusinessTripReasonType = "TRIP_REASON"
	BusinessTripReasonTypeProfileShortname BusinessTripReasonType = "PROFILE_SHORTNAME"
	BusinessTripReasonTypeOrganizationType BusinessTripReasonType = "ORGANIZATION_TYPE"
	BusinessTripReasonTypeProfileTitle     BusinessTripReasonType = "PROFILE_TITLE"
	BusinessTripReasonTypeTitleDescription BusinessTripReasonType = "TITLE_DESCRIPTION"
)

var AllBusinessTripReasonType = []BusinessTripReasonType{
	BusinessTripReasonTypeAll,
	BusinessTripReasonTypeTripReason,
	BusinessTripReasonTypeProfileShortname,
	BusinessTripReasonTypeOrganizationType,
	BusinessTripReasonTypeProfileTitle,
	BusinessTripReasonTypeTitleDescription,
}

func (e BusinessTripReasonType) IsValid() bool {
	switch e {
	case BusinessTripReasonTypeAll, BusinessTripReasonTypeTripReason, BusinessTripReasonTypeProfileShortname, BusinessTripReasonTypeOrganizationType, BusinessTripReasonTypeProfileTitle, BusinessTripReasonTypeTitleDescription:
		return true
	}
	return false
}

func (e BusinessTripReasonType) String() string {
	return string(e)
}

func (e *BusinessTripReasonType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BusinessTripReasonType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BusinessTripReasonType", str)
	}
	return nil
}

func (e BusinessTripReasonType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CabRequestMethod string

const (
	CabRequestMethodAll      CabRequestMethod = "ALL"
	CabRequestMethodDistance CabRequestMethod = "DISTANCE"
	CabRequestMethodTime     CabRequestMethod = "TIME"
)

var AllCabRequestMethod = []CabRequestMethod{
	CabRequestMethodAll,
	CabRequestMethodDistance,
	CabRequestMethodTime,
}

func (e CabRequestMethod) IsValid() bool {
	switch e {
	case CabRequestMethodAll, CabRequestMethodDistance, CabRequestMethodTime:
		return true
	}
	return false
}

func (e CabRequestMethod) String() string {
	return string(e)
}

func (e *CabRequestMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CabRequestMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CabRequestMethod", str)
	}
	return nil
}

func (e CabRequestMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CancelReasonServiceType string

const (
	CancelReasonServiceTypeRide       CancelReasonServiceType = "RIDE"
	CancelReasonServiceTypeDeliver    CancelReasonServiceType = "DELIVER"
	CancelReasonServiceTypeService    CancelReasonServiceType = "SERVICE"
	CancelReasonServiceTypeDeliverAll CancelReasonServiceType = "DELIVER_ALL"
)

var AllCancelReasonServiceType = []CancelReasonServiceType{
	CancelReasonServiceTypeRide,
	CancelReasonServiceTypeDeliver,
	CancelReasonServiceTypeService,
	CancelReasonServiceTypeDeliverAll,
}

func (e CancelReasonServiceType) IsValid() bool {
	switch e {
	case CancelReasonServiceTypeRide, CancelReasonServiceTypeDeliver, CancelReasonServiceTypeService, CancelReasonServiceTypeDeliverAll:
		return true
	}
	return false
}

func (e CancelReasonServiceType) String() string {
	return string(e)
}

func (e *CancelReasonServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CancelReasonServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CancelReasonServiceType", str)
	}
	return nil
}

func (e CancelReasonServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CancelledJobServiceType string

const (
	CancelledJobServiceTypeRide          CancelledJobServiceType = "RIDE"
	CancelledJobServiceTypeDelivery      CancelledJobServiceType = "DELIVERY"
	CancelledJobServiceTypeOtherServices CancelledJobServiceType = "OTHER_SERVICES"
	CancelledJobServiceTypeRidePool      CancelledJobServiceType = "RIDE_POOL"
)

var AllCancelledJobServiceType = []CancelledJobServiceType{
	CancelledJobServiceTypeRide,
	CancelledJobServiceTypeDelivery,
	CancelledJobServiceTypeOtherServices,
	CancelledJobServiceTypeRidePool,
}

func (e CancelledJobServiceType) IsValid() bool {
	switch e {
	case CancelledJobServiceTypeRide, CancelledJobServiceTypeDelivery, CancelledJobServiceTypeOtherServices, CancelledJobServiceTypeRidePool:
		return true
	}
	return false
}

func (e CancelledJobServiceType) String() string {
	return string(e)
}

func (e *CancelledJobServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CancelledJobServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CancelledJobServiceType", str)
	}
	return nil
}

func (e CancelledJobServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CartItemType string

const (
	CartItemTypeProduct    CartItemType = "PRODUCT"
	CartItemTypeCustomItem CartItemType = "CUSTOM_ITEM"
	CartItemTypePromotion  CartItemType = "PROMOTION"
)

var AllCartItemType = []CartItemType{
	CartItemTypeProduct,
	CartItemTypeCustomItem,
	CartItemTypePromotion,
}

func (e CartItemType) IsValid() bool {
	switch e {
	case CartItemTypeProduct, CartItemTypeCustomItem, CartItemTypePromotion:
		return true
	}
	return false
}

func (e CartItemType) String() string {
	return string(e)
}

func (e *CartItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CartItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CartItemType", str)
	}
	return nil
}

func (e CartItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CategoryViewType string

const (
	CategoryViewTypeIcon       CategoryViewType = "ICON"
	CategoryViewTypeBanner     CategoryViewType = "BANNER"
	CategoryViewTypeIconBanner CategoryViewType = "ICON_BANNER"
)

var AllCategoryViewType = []CategoryViewType{
	CategoryViewTypeIcon,
	CategoryViewTypeBanner,
	CategoryViewTypeIconBanner,
}

func (e CategoryViewType) IsValid() bool {
	switch e {
	case CategoryViewTypeIcon, CategoryViewTypeBanner, CategoryViewTypeIconBanner:
		return true
	}
	return false
}

func (e CategoryViewType) String() string {
	return string(e)
}

func (e *CategoryViewType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryViewType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryViewType", str)
	}
	return nil
}

func (e CategoryViewType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ChatMessageType string

const (
	ChatMessageTypeLiveChat       ChatMessageType = "LIVE_CHAT"
	ChatMessageTypeOfflineMessage ChatMessageType = "OFFLINE_MESSAGE"
)

var AllChatMessageType = []ChatMessageType{
	ChatMessageTypeLiveChat,
	ChatMessageTypeOfflineMessage,
}

func (e ChatMessageType) IsValid() bool {
	switch e {
	case ChatMessageTypeLiveChat, ChatMessageTypeOfflineMessage:
		return true
	}
	return false
}

func (e ChatMessageType) String() string {
	return string(e)
}

func (e *ChatMessageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChatMessageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChatMessageType", str)
	}
	return nil
}

func (e ChatMessageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CityType string

const (
	CityTypeAll     CityType = "ALL"
	CityTypeCity    CityType = "CITY"
	CityTypeState   CityType = "STATE"
	CityTypeCountry CityType = "COUNTRY"
	CityTypeStatus  CityType = "STATUS"
)

var AllCityType = []CityType{
	CityTypeAll,
	CityTypeCity,
	CityTypeState,
	CityTypeCountry,
	CityTypeStatus,
}

func (e CityType) IsValid() bool {
	switch e {
	case CityTypeAll, CityTypeCity, CityTypeState, CityTypeCountry, CityTypeStatus:
		return true
	}
	return false
}

func (e CityType) String() string {
	return string(e)
}

func (e *CityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CityType", str)
	}
	return nil
}

func (e CityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ClickCount string

const (
	ClickCountLimited   ClickCount = "LIMITED"
	ClickCountUnlimited ClickCount = "UNLIMITED"
)

var AllClickCount = []ClickCount{
	ClickCountLimited,
	ClickCountUnlimited,
}

func (e ClickCount) IsValid() bool {
	switch e {
	case ClickCountLimited, ClickCountUnlimited:
		return true
	}
	return false
}

func (e ClickCount) String() string {
	return string(e)
}

func (e *ClickCount) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ClickCount(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ClickCount", str)
	}
	return nil
}

func (e ClickCount) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CompaniesSearchType string

const (
	CompaniesSearchTypeName   CompaniesSearchType = "NAME"
	CompaniesSearchTypeEmail  CompaniesSearchType = "EMAIL"
	CompaniesSearchTypeMobile CompaniesSearchType = "MOBILE"
)

var AllCompaniesSearchType = []CompaniesSearchType{
	CompaniesSearchTypeName,
	CompaniesSearchTypeEmail,
	CompaniesSearchTypeMobile,
}

func (e CompaniesSearchType) IsValid() bool {
	switch e {
	case CompaniesSearchTypeName, CompaniesSearchTypeEmail, CompaniesSearchTypeMobile:
		return true
	}
	return false
}

func (e CompaniesSearchType) String() string {
	return string(e)
}

func (e *CompaniesSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompaniesSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompaniesSearchType", str)
	}
	return nil
}

func (e CompaniesSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CompaniesStatus string

const (
	CompaniesStatusActive   CompaniesStatus = "ACTIVE"
	CompaniesStatusInactive CompaniesStatus = "INACTIVE"
	CompaniesStatusDelete   CompaniesStatus = "DELETE"
)

var AllCompaniesStatus = []CompaniesStatus{
	CompaniesStatusActive,
	CompaniesStatusInactive,
	CompaniesStatusDelete,
}

func (e CompaniesStatus) IsValid() bool {
	switch e {
	case CompaniesStatusActive, CompaniesStatusInactive, CompaniesStatusDelete:
		return true
	}
	return false
}

func (e CompaniesStatus) String() string {
	return string(e)
}

func (e *CompaniesStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompaniesStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompaniesStatus", str)
	}
	return nil
}

func (e CompaniesStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CountryStatus string

const (
	CountryStatusActive   CountryStatus = "ACTIVE"
	CountryStatusInactive CountryStatus = "INACTIVE"
	CountryStatusDelete   CountryStatus = "DELETE"
)

var AllCountryStatus = []CountryStatus{
	CountryStatusActive,
	CountryStatusInactive,
	CountryStatusDelete,
}

func (e CountryStatus) IsValid() bool {
	switch e {
	case CountryStatusActive, CountryStatusInactive, CountryStatusDelete:
		return true
	}
	return false
}

func (e CountryStatus) String() string {
	return string(e)
}

func (e *CountryStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CountryStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CountryStatus", str)
	}
	return nil
}

func (e CountryStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CountryType string

const (
	CountryTypeAll     CountryType = "ALL"
	CountryTypeCountry CountryType = "COUNTRY"
	CountryTypeCode    CountryType = "CODE"
)

var AllCountryType = []CountryType{
	CountryTypeAll,
	CountryTypeCountry,
	CountryTypeCode,
}

func (e CountryType) IsValid() bool {
	switch e {
	case CountryTypeAll, CountryTypeCountry, CountryTypeCode:
		return true
	}
	return false
}

func (e CountryType) String() string {
	return string(e)
}

func (e *CountryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CountryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CountryType", str)
	}
	return nil
}

func (e CountryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CouponStatus string

const (
	CouponStatusActive   CouponStatus = "ACTIVE"
	CouponStatusInactive CouponStatus = "INACTIVE"
	CouponStatusDelete   CouponStatus = "DELETE"
)

var AllCouponStatus = []CouponStatus{
	CouponStatusActive,
	CouponStatusInactive,
	CouponStatusDelete,
}

func (e CouponStatus) IsValid() bool {
	switch e {
	case CouponStatusActive, CouponStatusInactive, CouponStatusDelete:
		return true
	}
	return false
}

func (e CouponStatus) String() string {
	return string(e)
}

func (e *CouponStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CouponStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CouponStatus", str)
	}
	return nil
}

func (e CouponStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CouponSystemType string

const (
	CouponSystemTypeRide        CouponSystemType = "RIDE"
	CouponSystemTypeDelivery    CouponSystemType = "DELIVERY"
	CouponSystemTypeUberx       CouponSystemType = "UBERX"
	CouponSystemTypeDeliveryall CouponSystemType = "DELIVERYALL"
)

var AllCouponSystemType = []CouponSystemType{
	CouponSystemTypeRide,
	CouponSystemTypeDelivery,
	CouponSystemTypeUberx,
	CouponSystemTypeDeliveryall,
}

func (e CouponSystemType) IsValid() bool {
	switch e {
	case CouponSystemTypeRide, CouponSystemTypeDelivery, CouponSystemTypeUberx, CouponSystemTypeDeliveryall:
		return true
	}
	return false
}

func (e CouponSystemType) String() string {
	return string(e)
}

func (e *CouponSystemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CouponSystemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CouponSystemType", str)
	}
	return nil
}

func (e CouponSystemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CouponType string

const (
	CouponTypeGiftCode   CouponType = "GIFT_CODE"
	CouponTypeValidity   CouponType = "VALIDITY"
	CouponTypeSystemType CouponType = "SYSTEM_TYPE"
	CouponTypeStatus     CouponType = "STATUS"
)

var AllCouponType = []CouponType{
	CouponTypeGiftCode,
	CouponTypeValidity,
	CouponTypeSystemType,
	CouponTypeStatus,
}

func (e CouponType) IsValid() bool {
	switch e {
	case CouponTypeGiftCode, CouponTypeValidity, CouponTypeSystemType, CouponTypeStatus:
		return true
	}
	return false
}

func (e CouponType) String() string {
	return string(e)
}

func (e *CouponType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CouponType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CouponType", str)
	}
	return nil
}

func (e CouponType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeclineAlertForProviderStatus string

const (
	DeclineAlertForProviderStatusBlocked   DeclineAlertForProviderStatus = "BLOCKED"
	DeclineAlertForProviderStatusUnblocked DeclineAlertForProviderStatus = "UNBLOCKED"
)

var AllDeclineAlertForProviderStatus = []DeclineAlertForProviderStatus{
	DeclineAlertForProviderStatusBlocked,
	DeclineAlertForProviderStatusUnblocked,
}

func (e DeclineAlertForProviderStatus) IsValid() bool {
	switch e {
	case DeclineAlertForProviderStatusBlocked, DeclineAlertForProviderStatusUnblocked:
		return true
	}
	return false
}

func (e DeclineAlertForProviderStatus) String() string {
	return string(e)
}

func (e *DeclineAlertForProviderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeclineAlertForProviderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeclineAlertForProviderStatus", str)
	}
	return nil
}

func (e DeclineAlertForProviderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeclineAlertForProviderType string

const (
	DeclineAlertForProviderTypeAll          DeclineAlertForProviderType = "ALL"
	DeclineAlertForProviderTypeProviderName DeclineAlertForProviderType = "PROVIDER_NAME"
	DeclineAlertForProviderTypeEmail        DeclineAlertForProviderType = "EMAIL"
)

var AllDeclineAlertForProviderType = []DeclineAlertForProviderType{
	DeclineAlertForProviderTypeAll,
	DeclineAlertForProviderTypeProviderName,
	DeclineAlertForProviderTypeEmail,
}

func (e DeclineAlertForProviderType) IsValid() bool {
	switch e {
	case DeclineAlertForProviderTypeAll, DeclineAlertForProviderTypeProviderName, DeclineAlertForProviderTypeEmail:
		return true
	}
	return false
}

func (e DeclineAlertForProviderType) String() string {
	return string(e)
}

func (e *DeclineAlertForProviderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeclineAlertForProviderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeclineAlertForProviderType", str)
	}
	return nil
}

func (e DeclineAlertForProviderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeclineAlertForUserStatus string

const (
	DeclineAlertForUserStatusBlocked   DeclineAlertForUserStatus = "BLOCKED"
	DeclineAlertForUserStatusUnblocked DeclineAlertForUserStatus = "UNBLOCKED"
)

var AllDeclineAlertForUserStatus = []DeclineAlertForUserStatus{
	DeclineAlertForUserStatusBlocked,
	DeclineAlertForUserStatusUnblocked,
}

func (e DeclineAlertForUserStatus) IsValid() bool {
	switch e {
	case DeclineAlertForUserStatusBlocked, DeclineAlertForUserStatusUnblocked:
		return true
	}
	return false
}

func (e DeclineAlertForUserStatus) String() string {
	return string(e)
}

func (e *DeclineAlertForUserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeclineAlertForUserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeclineAlertForUserStatus", str)
	}
	return nil
}

func (e DeclineAlertForUserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeclineAlertForUserType string

const (
	DeclineAlertForUserTypeAll   DeclineAlertForUserType = "ALL"
	DeclineAlertForUserTypeName  DeclineAlertForUserType = "NAME"
	DeclineAlertForUserTypeEmail DeclineAlertForUserType = "EMAIL"
)

var AllDeclineAlertForUserType = []DeclineAlertForUserType{
	DeclineAlertForUserTypeAll,
	DeclineAlertForUserTypeName,
	DeclineAlertForUserTypeEmail,
}

func (e DeclineAlertForUserType) IsValid() bool {
	switch e {
	case DeclineAlertForUserTypeAll, DeclineAlertForUserTypeName, DeclineAlertForUserTypeEmail:
		return true
	}
	return false
}

func (e DeclineAlertForUserType) String() string {
	return string(e)
}

func (e *DeclineAlertForUserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeclineAlertForUserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeclineAlertForUserType", str)
	}
	return nil
}

func (e DeclineAlertForUserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliverPickUpType string

const (
	DeliverPickUpTypeDeliverNow   DeliverPickUpType = "DELIVER_NOW"
	DeliverPickUpTypeDeliverLater DeliverPickUpType = "DELIVER_LATER"
)

var AllDeliverPickUpType = []DeliverPickUpType{
	DeliverPickUpTypeDeliverNow,
	DeliverPickUpTypeDeliverLater,
}

func (e DeliverPickUpType) IsValid() bool {
	switch e {
	case DeliverPickUpTypeDeliverNow, DeliverPickUpTypeDeliverLater:
		return true
	}
	return false
}

func (e DeliverPickUpType) String() string {
	return string(e)
}

func (e *DeliverPickUpType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliverPickUpType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliverPickUpType", str)
	}
	return nil
}

func (e DeliverPickUpType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryChargesSearch string

const (
	DeliveryChargesSearchAll         DeliveryChargesSearch = "ALL"
	DeliveryChargesSearchLocation    DeliveryChargesSearch = "LOCATION"
	DeliveryChargesSearchOrderAmount DeliveryChargesSearch = "ORDER_AMOUNT"
)

var AllDeliveryChargesSearch = []DeliveryChargesSearch{
	DeliveryChargesSearchAll,
	DeliveryChargesSearchLocation,
	DeliveryChargesSearchOrderAmount,
}

func (e DeliveryChargesSearch) IsValid() bool {
	switch e {
	case DeliveryChargesSearchAll, DeliveryChargesSearchLocation, DeliveryChargesSearchOrderAmount:
		return true
	}
	return false
}

func (e DeliveryChargesSearch) String() string {
	return string(e)
}

func (e *DeliveryChargesSearch) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryChargesSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryChargesSearch", str)
	}
	return nil
}

func (e DeliveryChargesSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryChargesSelectStatus string

const (
	DeliveryChargesSelectStatusActive   DeliveryChargesSelectStatus = "ACTIVE"
	DeliveryChargesSelectStatusInactive DeliveryChargesSelectStatus = "INACTIVE"
	DeliveryChargesSelectStatusDelete   DeliveryChargesSelectStatus = "DELETE"
)

var AllDeliveryChargesSelectStatus = []DeliveryChargesSelectStatus{
	DeliveryChargesSelectStatusActive,
	DeliveryChargesSelectStatusInactive,
	DeliveryChargesSelectStatusDelete,
}

func (e DeliveryChargesSelectStatus) IsValid() bool {
	switch e {
	case DeliveryChargesSelectStatusActive, DeliveryChargesSelectStatusInactive, DeliveryChargesSelectStatusDelete:
		return true
	}
	return false
}

func (e DeliveryChargesSelectStatus) String() string {
	return string(e)
}

func (e *DeliveryChargesSelectStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryChargesSelectStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryChargesSelectStatus", str)
	}
	return nil
}

func (e DeliveryChargesSelectStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryChargesUtilityStatus string

const (
	DeliveryChargesUtilityStatusActive   DeliveryChargesUtilityStatus = "ACTIVE"
	DeliveryChargesUtilityStatusInactive DeliveryChargesUtilityStatus = "INACTIVE"
	DeliveryChargesUtilityStatusDeleted  DeliveryChargesUtilityStatus = "DELETED"
)

var AllDeliveryChargesUtilityStatus = []DeliveryChargesUtilityStatus{
	DeliveryChargesUtilityStatusActive,
	DeliveryChargesUtilityStatusInactive,
	DeliveryChargesUtilityStatusDeleted,
}

func (e DeliveryChargesUtilityStatus) IsValid() bool {
	switch e {
	case DeliveryChargesUtilityStatusActive, DeliveryChargesUtilityStatusInactive, DeliveryChargesUtilityStatusDeleted:
		return true
	}
	return false
}

func (e DeliveryChargesUtilityStatus) String() string {
	return string(e)
}

func (e *DeliveryChargesUtilityStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryChargesUtilityStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryChargesUtilityStatus", str)
	}
	return nil
}

func (e DeliveryChargesUtilityStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryChargesUtilityType string

const (
	DeliveryChargesUtilityTypeAll         DeliveryChargesUtilityType = "ALL"
	DeliveryChargesUtilityTypeLocation    DeliveryChargesUtilityType = "LOCATION"
	DeliveryChargesUtilityTypeOrderAmount DeliveryChargesUtilityType = "ORDER_AMOUNT"
)

var AllDeliveryChargesUtilityType = []DeliveryChargesUtilityType{
	DeliveryChargesUtilityTypeAll,
	DeliveryChargesUtilityTypeLocation,
	DeliveryChargesUtilityTypeOrderAmount,
}

func (e DeliveryChargesUtilityType) IsValid() bool {
	switch e {
	case DeliveryChargesUtilityTypeAll, DeliveryChargesUtilityTypeLocation, DeliveryChargesUtilityTypeOrderAmount:
		return true
	}
	return false
}

func (e DeliveryChargesUtilityType) String() string {
	return string(e)
}

func (e *DeliveryChargesUtilityType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryChargesUtilityType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryChargesUtilityType", str)
	}
	return nil
}

func (e DeliveryChargesUtilityType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryVehicleSearchType string

const (
	DeliveryVehicleSearchTypeAll                             DeliveryVehicleSearchType = "ALL"
	DeliveryVehicleSearchTypeVehicleType                     DeliveryVehicleSearchType = "VEHICLE_TYPE"
	DeliveryVehicleSearchTypeDeliveryChargeForCompletedOrder DeliveryVehicleSearchType = "DELIVERY_CHARGE_FOR_COMPLETED_ORDER"
	DeliveryVehicleSearchTypeDeliveryChargeForCancelledOrder DeliveryVehicleSearchType = "DELIVERY_CHARGE_FOR_CANCELLED_ORDER"
	DeliveryVehicleSearchTypeDeliveryRadius                  DeliveryVehicleSearchType = "DELIVERY_RADIUS"
)

var AllDeliveryVehicleSearchType = []DeliveryVehicleSearchType{
	DeliveryVehicleSearchTypeAll,
	DeliveryVehicleSearchTypeVehicleType,
	DeliveryVehicleSearchTypeDeliveryChargeForCompletedOrder,
	DeliveryVehicleSearchTypeDeliveryChargeForCancelledOrder,
	DeliveryVehicleSearchTypeDeliveryRadius,
}

func (e DeliveryVehicleSearchType) IsValid() bool {
	switch e {
	case DeliveryVehicleSearchTypeAll, DeliveryVehicleSearchTypeVehicleType, DeliveryVehicleSearchTypeDeliveryChargeForCompletedOrder, DeliveryVehicleSearchTypeDeliveryChargeForCancelledOrder, DeliveryVehicleSearchTypeDeliveryRadius:
		return true
	}
	return false
}

func (e DeliveryVehicleSearchType) String() string {
	return string(e)
}

func (e *DeliveryVehicleSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryVehicleSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryVehicleSearchType", str)
	}
	return nil
}

func (e DeliveryVehicleSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryVehicleTypeStatus string

const (
	DeliveryVehicleTypeStatusActive   DeliveryVehicleTypeStatus = "ACTIVE"
	DeliveryVehicleTypeStatusInactive DeliveryVehicleTypeStatus = "INACTIVE"
	DeliveryVehicleTypeStatusDeleted  DeliveryVehicleTypeStatus = "DELETED"
)

var AllDeliveryVehicleTypeStatus = []DeliveryVehicleTypeStatus{
	DeliveryVehicleTypeStatusActive,
	DeliveryVehicleTypeStatusInactive,
	DeliveryVehicleTypeStatusDeleted,
}

func (e DeliveryVehicleTypeStatus) IsValid() bool {
	switch e {
	case DeliveryVehicleTypeStatusActive, DeliveryVehicleTypeStatusInactive, DeliveryVehicleTypeStatusDeleted:
		return true
	}
	return false
}

func (e DeliveryVehicleTypeStatus) String() string {
	return string(e)
}

func (e *DeliveryVehicleTypeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryVehicleTypeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryVehicleTypeStatus", str)
	}
	return nil
}

func (e DeliveryVehicleTypeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeliveryVerificationMethod string

const (
	DeliveryVerificationMethodSignature DeliveryVerificationMethod = "SIGNATURE"
	DeliveryVerificationMethodCode      DeliveryVerificationMethod = "CODE"
	DeliveryVerificationMethodNone      DeliveryVerificationMethod = "NONE"
)

var AllDeliveryVerificationMethod = []DeliveryVerificationMethod{
	DeliveryVerificationMethodSignature,
	DeliveryVerificationMethodCode,
	DeliveryVerificationMethodNone,
}

func (e DeliveryVerificationMethod) IsValid() bool {
	switch e {
	case DeliveryVerificationMethodSignature, DeliveryVerificationMethodCode, DeliveryVerificationMethodNone:
		return true
	}
	return false
}

func (e DeliveryVerificationMethod) String() string {
	return string(e)
}

func (e *DeliveryVerificationMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeliveryVerificationMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeliveryVerificationMethod", str)
	}
	return nil
}

func (e DeliveryVerificationMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceType string

const (
	DeviceTypeAndroid DeviceType = "ANDROID"
	DeviceTypeIos     DeviceType = "IOS"
)

var AllDeviceType = []DeviceType{
	DeviceTypeAndroid,
	DeviceTypeIos,
}

func (e DeviceType) IsValid() bool {
	switch e {
	case DeviceTypeAndroid, DeviceTypeIos:
		return true
	}
	return false
}

func (e DeviceType) String() string {
	return string(e)
}

func (e *DeviceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceType", str)
	}
	return nil
}

func (e DeviceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DistanceUnits string

const (
	DistanceUnitsKms   DistanceUnits = "KMS"
	DistanceUnitsMiles DistanceUnits = "MILES"
)

var AllDistanceUnits = []DistanceUnits{
	DistanceUnitsKms,
	DistanceUnitsMiles,
}

func (e DistanceUnits) IsValid() bool {
	switch e {
	case DistanceUnitsKms, DistanceUnitsMiles:
		return true
	}
	return false
}

func (e DistanceUnits) String() string {
	return string(e)
}

func (e *DistanceUnits) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DistanceUnits(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DistanceUnits", str)
	}
	return nil
}

func (e DistanceUnits) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DocumentFor string

const (
	DocumentForCar      DocumentFor = "CAR"
	DocumentForCompany  DocumentFor = "COMPANY"
	DocumentForProvider DocumentFor = "PROVIDER"
	DocumentForStore    DocumentFor = "STORE"
)

var AllDocumentFor = []DocumentFor{
	DocumentForCar,
	DocumentForCompany,
	DocumentForProvider,
	DocumentForStore,
}

func (e DocumentFor) IsValid() bool {
	switch e {
	case DocumentForCar, DocumentForCompany, DocumentForProvider, DocumentForStore:
		return true
	}
	return false
}

func (e DocumentFor) String() string {
	return string(e)
}

func (e *DocumentFor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DocumentFor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DocumentFor", str)
	}
	return nil
}

func (e DocumentFor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DocumentType string

const (
	DocumentTypeAll          DocumentType = "ALL"
	DocumentTypeCountry      DocumentType = "COUNTRY"
	DocumentTypeDocumentName DocumentType = "DOCUMENT_NAME"
	DocumentTypeDocumentFor  DocumentType = "DOCUMENT_FOR"
	DocumentTypeStatus       DocumentType = "STATUS"
)

var AllDocumentType = []DocumentType{
	DocumentTypeAll,
	DocumentTypeCountry,
	DocumentTypeDocumentName,
	DocumentTypeDocumentFor,
	DocumentTypeStatus,
}

func (e DocumentType) IsValid() bool {
	switch e {
	case DocumentTypeAll, DocumentTypeCountry, DocumentTypeDocumentName, DocumentTypeDocumentFor, DocumentTypeStatus:
		return true
	}
	return false
}

func (e DocumentType) String() string {
	return string(e)
}

func (e *DocumentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DocumentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DocumentType", str)
	}
	return nil
}

func (e DocumentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DocumentUploaderType string

const (
	DocumentUploaderTypeUser                   DocumentUploaderType = "USER"
	DocumentUploaderTypeServiceProvider        DocumentUploaderType = "SERVICE_PROVIDER"
	DocumentUploaderTypeServiceProviderCompany DocumentUploaderType = "SERVICE_PROVIDER_COMPANY"
	DocumentUploaderTypeRestaurant             DocumentUploaderType = "RESTAURANT"
	DocumentUploaderTypeGroceryStore           DocumentUploaderType = "GROCERY_STORE"
	DocumentUploaderTypeWineStore              DocumentUploaderType = "WINE_STORE"
)

var AllDocumentUploaderType = []DocumentUploaderType{
	DocumentUploaderTypeUser,
	DocumentUploaderTypeServiceProvider,
	DocumentUploaderTypeServiceProviderCompany,
	DocumentUploaderTypeRestaurant,
	DocumentUploaderTypeGroceryStore,
	DocumentUploaderTypeWineStore,
}

func (e DocumentUploaderType) IsValid() bool {
	switch e {
	case DocumentUploaderTypeUser, DocumentUploaderTypeServiceProvider, DocumentUploaderTypeServiceProviderCompany, DocumentUploaderTypeRestaurant, DocumentUploaderTypeGroceryStore, DocumentUploaderTypeWineStore:
		return true
	}
	return false
}

func (e DocumentUploaderType) String() string {
	return string(e)
}

func (e *DocumentUploaderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DocumentUploaderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DocumentUploaderType", str)
	}
	return nil
}

func (e DocumentUploaderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EmailTemplateSearchType string

const (
	EmailTemplateSearchTypeAll          EmailTemplateSearchType = "ALL"
	EmailTemplateSearchTypeEmailSubject EmailTemplateSearchType = "EMAIL_SUBJECT"
	EmailTemplateSearchTypePurpose      EmailTemplateSearchType = "PURPOSE"
)

var AllEmailTemplateSearchType = []EmailTemplateSearchType{
	EmailTemplateSearchTypeAll,
	EmailTemplateSearchTypeEmailSubject,
	EmailTemplateSearchTypePurpose,
}

func (e EmailTemplateSearchType) IsValid() bool {
	switch e {
	case EmailTemplateSearchTypeAll, EmailTemplateSearchTypeEmailSubject, EmailTemplateSearchTypePurpose:
		return true
	}
	return false
}

func (e EmailTemplateSearchType) String() string {
	return string(e)
}

func (e *EmailTemplateSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailTemplateSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailTemplateSearchType", str)
	}
	return nil
}

func (e EmailTemplateSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseAccountPaymentReportSelectProviderPaymentStatus string

const (
	EnterpriseAccountPaymentReportSelectProviderPaymentStatusSettled   EnterpriseAccountPaymentReportSelectProviderPaymentStatus = "SETTLED"
	EnterpriseAccountPaymentReportSelectProviderPaymentStatusUnsettled EnterpriseAccountPaymentReportSelectProviderPaymentStatus = "UNSETTLED"
)

var AllEnterpriseAccountPaymentReportSelectProviderPaymentStatus = []EnterpriseAccountPaymentReportSelectProviderPaymentStatus{
	EnterpriseAccountPaymentReportSelectProviderPaymentStatusSettled,
	EnterpriseAccountPaymentReportSelectProviderPaymentStatusUnsettled,
}

func (e EnterpriseAccountPaymentReportSelectProviderPaymentStatus) IsValid() bool {
	switch e {
	case EnterpriseAccountPaymentReportSelectProviderPaymentStatusSettled, EnterpriseAccountPaymentReportSelectProviderPaymentStatusUnsettled:
		return true
	}
	return false
}

func (e EnterpriseAccountPaymentReportSelectProviderPaymentStatus) String() string {
	return string(e)
}

func (e *EnterpriseAccountPaymentReportSelectProviderPaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAccountPaymentReportSelectProviderPaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAccountPaymentReportSelectProviderPaymentStatus", str)
	}
	return nil
}

func (e EnterpriseAccountPaymentReportSelectProviderPaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseAccountPaymentReportSelectUserPaymentStatus string

const (
	EnterpriseAccountPaymentReportSelectUserPaymentStatusPaidByUserYes EnterpriseAccountPaymentReportSelectUserPaymentStatus = "PAID_BY_USER_YES"
	EnterpriseAccountPaymentReportSelectUserPaymentStatusPaidByUserNo  EnterpriseAccountPaymentReportSelectUserPaymentStatus = "PAID_BY_USER_NO"
)

var AllEnterpriseAccountPaymentReportSelectUserPaymentStatus = []EnterpriseAccountPaymentReportSelectUserPaymentStatus{
	EnterpriseAccountPaymentReportSelectUserPaymentStatusPaidByUserYes,
	EnterpriseAccountPaymentReportSelectUserPaymentStatusPaidByUserNo,
}

func (e EnterpriseAccountPaymentReportSelectUserPaymentStatus) IsValid() bool {
	switch e {
	case EnterpriseAccountPaymentReportSelectUserPaymentStatusPaidByUserYes, EnterpriseAccountPaymentReportSelectUserPaymentStatusPaidByUserNo:
		return true
	}
	return false
}

func (e EnterpriseAccountPaymentReportSelectUserPaymentStatus) String() string {
	return string(e)
}

func (e *EnterpriseAccountPaymentReportSelectUserPaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAccountPaymentReportSelectUserPaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAccountPaymentReportSelectUserPaymentStatus", str)
	}
	return nil
}

func (e EnterpriseAccountPaymentReportSelectUserPaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseAccountPaymentReportServiceType string

const (
	EnterpriseAccountPaymentReportServiceTypeRide       EnterpriseAccountPaymentReportServiceType = "RIDE"
	EnterpriseAccountPaymentReportServiceTypeRentalRide EnterpriseAccountPaymentReportServiceType = "RENTAL_RIDE"
	EnterpriseAccountPaymentReportServiceTypeRidePool   EnterpriseAccountPaymentReportServiceType = "RIDE_POOL"
)

var AllEnterpriseAccountPaymentReportServiceType = []EnterpriseAccountPaymentReportServiceType{
	EnterpriseAccountPaymentReportServiceTypeRide,
	EnterpriseAccountPaymentReportServiceTypeRentalRide,
	EnterpriseAccountPaymentReportServiceTypeRidePool,
}

func (e EnterpriseAccountPaymentReportServiceType) IsValid() bool {
	switch e {
	case EnterpriseAccountPaymentReportServiceTypeRide, EnterpriseAccountPaymentReportServiceTypeRentalRide, EnterpriseAccountPaymentReportServiceTypeRidePool:
		return true
	}
	return false
}

func (e EnterpriseAccountPaymentReportServiceType) String() string {
	return string(e)
}

func (e *EnterpriseAccountPaymentReportServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAccountPaymentReportServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAccountPaymentReportServiceType", str)
	}
	return nil
}

func (e EnterpriseAccountPaymentReportServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseAccountSearchType string

const (
	EnterpriseAccountSearchTypeAll              EnterpriseAccountSearchType = "ALL"
	EnterpriseAccountSearchTypeOrganizationName EnterpriseAccountSearchType = "ORGANIZATION_NAME"
	EnterpriseAccountSearchTypeOrganizationType EnterpriseAccountSearchType = "ORGANIZATION_TYPE"
	EnterpriseAccountSearchTypeEmail            EnterpriseAccountSearchType = "EMAIL"
	EnterpriseAccountSearchTypeMobile           EnterpriseAccountSearchType = "MOBILE"
)

var AllEnterpriseAccountSearchType = []EnterpriseAccountSearchType{
	EnterpriseAccountSearchTypeAll,
	EnterpriseAccountSearchTypeOrganizationName,
	EnterpriseAccountSearchTypeOrganizationType,
	EnterpriseAccountSearchTypeEmail,
	EnterpriseAccountSearchTypeMobile,
}

func (e EnterpriseAccountSearchType) IsValid() bool {
	switch e {
	case EnterpriseAccountSearchTypeAll, EnterpriseAccountSearchTypeOrganizationName, EnterpriseAccountSearchTypeOrganizationType, EnterpriseAccountSearchTypeEmail, EnterpriseAccountSearchTypeMobile:
		return true
	}
	return false
}

func (e EnterpriseAccountSearchType) String() string {
	return string(e)
}

func (e *EnterpriseAccountSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAccountSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAccountSearchType", str)
	}
	return nil
}

func (e EnterpriseAccountSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseAccountStatus string

const (
	EnterpriseAccountStatusActive   EnterpriseAccountStatus = "ACTIVE"
	EnterpriseAccountStatusInactive EnterpriseAccountStatus = "INACTIVE"
	EnterpriseAccountStatusDelete   EnterpriseAccountStatus = "DELETE"
)

var AllEnterpriseAccountStatus = []EnterpriseAccountStatus{
	EnterpriseAccountStatusActive,
	EnterpriseAccountStatusInactive,
	EnterpriseAccountStatusDelete,
}

func (e EnterpriseAccountStatus) IsValid() bool {
	switch e {
	case EnterpriseAccountStatusActive, EnterpriseAccountStatusInactive, EnterpriseAccountStatusDelete:
		return true
	}
	return false
}

func (e EnterpriseAccountStatus) String() string {
	return string(e)
}

func (e *EnterpriseAccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAccountStatus", str)
	}
	return nil
}

func (e EnterpriseAccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type EnterpriseAccountType string

const (
	EnterpriseAccountTypeBusiness EnterpriseAccountType = "BUSINESS"
)

var AllEnterpriseAccountType = []EnterpriseAccountType{
	EnterpriseAccountTypeBusiness,
}

func (e EnterpriseAccountType) IsValid() bool {
	switch e {
	case EnterpriseAccountTypeBusiness:
		return true
	}
	return false
}

func (e EnterpriseAccountType) String() string {
	return string(e)
}

func (e *EnterpriseAccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EnterpriseAccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EnterpriseAccountType", str)
	}
	return nil
}

func (e EnterpriseAccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FAQCategorySearchType string

const (
	FAQCategorySearchTypeAll    FAQCategorySearchType = "ALL"
	FAQCategorySearchTypeTitle  FAQCategorySearchType = "TITLE"
	FAQCategorySearchTypeOrder  FAQCategorySearchType = "ORDER"
	FAQCategorySearchTypeStatus FAQCategorySearchType = "STATUS"
)

var AllFAQCategorySearchType = []FAQCategorySearchType{
	FAQCategorySearchTypeAll,
	FAQCategorySearchTypeTitle,
	FAQCategorySearchTypeOrder,
	FAQCategorySearchTypeStatus,
}

func (e FAQCategorySearchType) IsValid() bool {
	switch e {
	case FAQCategorySearchTypeAll, FAQCategorySearchTypeTitle, FAQCategorySearchTypeOrder, FAQCategorySearchTypeStatus:
		return true
	}
	return false
}

func (e FAQCategorySearchType) String() string {
	return string(e)
}

func (e *FAQCategorySearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FAQCategorySearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FAQCategorySearchType", str)
	}
	return nil
}

func (e FAQCategorySearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FAQType string

const (
	FAQTypeAll      FAQType = "ALL"
	FAQTypeTitle    FAQType = "TITLE"
	FAQTypeCategory FAQType = "CATEGORY"
	FAQTypeOrder    FAQType = "ORDER"
	FAQTypeStatus   FAQType = "STATUS"
)

var AllFAQType = []FAQType{
	FAQTypeAll,
	FAQTypeTitle,
	FAQTypeCategory,
	FAQTypeOrder,
	FAQTypeStatus,
}

func (e FAQType) IsValid() bool {
	switch e {
	case FAQTypeAll, FAQTypeTitle, FAQTypeCategory, FAQTypeOrder, FAQTypeStatus:
		return true
	}
	return false
}

func (e FAQType) String() string {
	return string(e)
}

func (e *FAQType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FAQType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FAQType", str)
	}
	return nil
}

func (e FAQType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FareType string

const (
	FareTypeFixed           FareType = "FIXED"
	FareTypeHourly          FareType = "HOURLY"
	FareTypeTimeAndDistance FareType = "TIME_AND_DISTANCE"
)

var AllFareType = []FareType{
	FareTypeFixed,
	FareTypeHourly,
	FareTypeTimeAndDistance,
}

func (e FareType) IsValid() bool {
	switch e {
	case FareTypeFixed, FareTypeHourly, FareTypeTimeAndDistance:
		return true
	}
	return false
}

func (e FareType) String() string {
	return string(e)
}

func (e *FareType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FareType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FareType", str)
	}
	return nil
}

func (e FareType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FoodDeliveryLabelSearch string

const (
	FoodDeliveryLabelSearchAll                    FoodDeliveryLabelSearch = "ALL"
	FoodDeliveryLabelSearchCode                   FoodDeliveryLabelSearch = "CODE"
	FoodDeliveryLabelSearchValueInEnglishLanguage FoodDeliveryLabelSearch = "VALUE_IN_ENGLISH_LANGUAGE"
)

var AllFoodDeliveryLabelSearch = []FoodDeliveryLabelSearch{
	FoodDeliveryLabelSearchAll,
	FoodDeliveryLabelSearchCode,
	FoodDeliveryLabelSearchValueInEnglishLanguage,
}

func (e FoodDeliveryLabelSearch) IsValid() bool {
	switch e {
	case FoodDeliveryLabelSearchAll, FoodDeliveryLabelSearchCode, FoodDeliveryLabelSearchValueInEnglishLanguage:
		return true
	}
	return false
}

func (e FoodDeliveryLabelSearch) String() string {
	return string(e)
}

func (e *FoodDeliveryLabelSearch) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FoodDeliveryLabelSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FoodDeliveryLabelSearch", str)
	}
	return nil
}

func (e FoodDeliveryLabelSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
	GenderOthers Gender = "OTHERS"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOthers,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOthers:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeneralLabelSearch string

const (
	GeneralLabelSearchAll                    GeneralLabelSearch = "ALL"
	GeneralLabelSearchCode                   GeneralLabelSearch = "CODE"
	GeneralLabelSearchValueInEnglishLanguage GeneralLabelSearch = "VALUE_IN_ENGLISH_LANGUAGE"
)

var AllGeneralLabelSearch = []GeneralLabelSearch{
	GeneralLabelSearchAll,
	GeneralLabelSearchCode,
	GeneralLabelSearchValueInEnglishLanguage,
}

func (e GeneralLabelSearch) IsValid() bool {
	switch e {
	case GeneralLabelSearchAll, GeneralLabelSearchCode, GeneralLabelSearchValueInEnglishLanguage:
		return true
	}
	return false
}

func (e GeneralLabelSearch) String() string {
	return string(e)
}

func (e *GeneralLabelSearch) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeneralLabelSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeneralLabelSearch", str)
	}
	return nil
}

func (e GeneralLabelSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeoFenceLocationSearchType string

const (
	GeoFenceLocationSearchTypeAll         GeoFenceLocationSearchType = "ALL"
	GeoFenceLocationSearchTypeLocation    GeoFenceLocationSearchType = "LOCATION"
	GeoFenceLocationSearchTypeCountry     GeoFenceLocationSearchType = "COUNTRY"
	GeoFenceLocationSearchTypeLocationFor GeoFenceLocationSearchType = "LOCATION_FOR"
)

var AllGeoFenceLocationSearchType = []GeoFenceLocationSearchType{
	GeoFenceLocationSearchTypeAll,
	GeoFenceLocationSearchTypeLocation,
	GeoFenceLocationSearchTypeCountry,
	GeoFenceLocationSearchTypeLocationFor,
}

func (e GeoFenceLocationSearchType) IsValid() bool {
	switch e {
	case GeoFenceLocationSearchTypeAll, GeoFenceLocationSearchTypeLocation, GeoFenceLocationSearchTypeCountry, GeoFenceLocationSearchTypeLocationFor:
		return true
	}
	return false
}

func (e GeoFenceLocationSearchType) String() string {
	return string(e)
}

func (e *GeoFenceLocationSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeoFenceLocationSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeoFenceLocationSearchType", str)
	}
	return nil
}

func (e GeoFenceLocationSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeoFenceLocationStatus string

const (
	GeoFenceLocationStatusActive   GeoFenceLocationStatus = "ACTIVE"
	GeoFenceLocationStatusInactive GeoFenceLocationStatus = "INACTIVE"
	GeoFenceLocationStatusDeleted  GeoFenceLocationStatus = "DELETED"
)

var AllGeoFenceLocationStatus = []GeoFenceLocationStatus{
	GeoFenceLocationStatusActive,
	GeoFenceLocationStatusInactive,
	GeoFenceLocationStatusDeleted,
}

func (e GeoFenceLocationStatus) IsValid() bool {
	switch e {
	case GeoFenceLocationStatusActive, GeoFenceLocationStatusInactive, GeoFenceLocationStatusDeleted:
		return true
	}
	return false
}

func (e GeoFenceLocationStatus) String() string {
	return string(e)
}

func (e *GeoFenceLocationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeoFenceLocationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeoFenceLocationStatus", str)
	}
	return nil
}

func (e GeoFenceLocationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeoFenceRestrictedAreaSearchType string

const (
	GeoFenceRestrictedAreaSearchTypeAll     GeoFenceRestrictedAreaSearchType = "ALL"
	GeoFenceRestrictedAreaSearchTypeAddress GeoFenceRestrictedAreaSearchType = "ADDRESS"
)

var AllGeoFenceRestrictedAreaSearchType = []GeoFenceRestrictedAreaSearchType{
	GeoFenceRestrictedAreaSearchTypeAll,
	GeoFenceRestrictedAreaSearchTypeAddress,
}

func (e GeoFenceRestrictedAreaSearchType) IsValid() bool {
	switch e {
	case GeoFenceRestrictedAreaSearchTypeAll, GeoFenceRestrictedAreaSearchTypeAddress:
		return true
	}
	return false
}

func (e GeoFenceRestrictedAreaSearchType) String() string {
	return string(e)
}

func (e *GeoFenceRestrictedAreaSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeoFenceRestrictedAreaSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeoFenceRestrictedAreaSearchType", str)
	}
	return nil
}

func (e GeoFenceRestrictedAreaSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GeoFenceRestrictedAreaStatus string

const (
	GeoFenceRestrictedAreaStatusActive   GeoFenceRestrictedAreaStatus = "ACTIVE"
	GeoFenceRestrictedAreaStatusInactive GeoFenceRestrictedAreaStatus = "INACTIVE"
	GeoFenceRestrictedAreaStatusDeleted  GeoFenceRestrictedAreaStatus = "DELETED"
)

var AllGeoFenceRestrictedAreaStatus = []GeoFenceRestrictedAreaStatus{
	GeoFenceRestrictedAreaStatusActive,
	GeoFenceRestrictedAreaStatusInactive,
	GeoFenceRestrictedAreaStatusDeleted,
}

func (e GeoFenceRestrictedAreaStatus) IsValid() bool {
	switch e {
	case GeoFenceRestrictedAreaStatusActive, GeoFenceRestrictedAreaStatusInactive, GeoFenceRestrictedAreaStatusDeleted:
		return true
	}
	return false
}

func (e GeoFenceRestrictedAreaStatus) String() string {
	return string(e)
}

func (e *GeoFenceRestrictedAreaStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GeoFenceRestrictedAreaStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GeoFenceRestrictedAreaStatus", str)
	}
	return nil
}

func (e GeoFenceRestrictedAreaStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroceryDeliveryLabelSearch string

const (
	GroceryDeliveryLabelSearchAll                    GroceryDeliveryLabelSearch = "ALL"
	GroceryDeliveryLabelSearchCode                   GroceryDeliveryLabelSearch = "CODE"
	GroceryDeliveryLabelSearchValueInEnglishLanguage GroceryDeliveryLabelSearch = "VALUE_IN_ENGLISH_LANGUAGE"
)

var AllGroceryDeliveryLabelSearch = []GroceryDeliveryLabelSearch{
	GroceryDeliveryLabelSearchAll,
	GroceryDeliveryLabelSearchCode,
	GroceryDeliveryLabelSearchValueInEnglishLanguage,
}

func (e GroceryDeliveryLabelSearch) IsValid() bool {
	switch e {
	case GroceryDeliveryLabelSearchAll, GroceryDeliveryLabelSearchCode, GroceryDeliveryLabelSearchValueInEnglishLanguage:
		return true
	}
	return false
}

func (e GroceryDeliveryLabelSearch) String() string {
	return string(e)
}

func (e *GroceryDeliveryLabelSearch) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroceryDeliveryLabelSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroceryDeliveryLabelSearch", str)
	}
	return nil
}

func (e GroceryDeliveryLabelSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HelpCategoryFor string

const (
	HelpCategoryForGeneral    HelpCategoryFor = "GENERAL"
	HelpCategoryForDeliverall HelpCategoryFor = "DELIVERALL"
)

var AllHelpCategoryFor = []HelpCategoryFor{
	HelpCategoryForGeneral,
	HelpCategoryForDeliverall,
}

func (e HelpCategoryFor) IsValid() bool {
	switch e {
	case HelpCategoryForGeneral, HelpCategoryForDeliverall:
		return true
	}
	return false
}

func (e HelpCategoryFor) String() string {
	return string(e)
}

func (e *HelpCategoryFor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HelpCategoryFor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HelpCategoryFor", str)
	}
	return nil
}

func (e HelpCategoryFor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HelpCategoryType string

const (
	HelpCategoryTypeAll    HelpCategoryType = "ALL"
	HelpCategoryTypeTitle  HelpCategoryType = "TITLE"
	HelpCategoryTypeOrder  HelpCategoryType = "ORDER"
	HelpCategoryTypeStatus HelpCategoryType = "STATUS"
)

var AllHelpCategoryType = []HelpCategoryType{
	HelpCategoryTypeAll,
	HelpCategoryTypeTitle,
	HelpCategoryTypeOrder,
	HelpCategoryTypeStatus,
}

func (e HelpCategoryType) IsValid() bool {
	switch e {
	case HelpCategoryTypeAll, HelpCategoryTypeTitle, HelpCategoryTypeOrder, HelpCategoryTypeStatus:
		return true
	}
	return false
}

func (e HelpCategoryType) String() string {
	return string(e)
}

func (e *HelpCategoryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HelpCategoryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HelpCategoryType", str)
	}
	return nil
}

func (e HelpCategoryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HelpDetailCategory string

const (
	HelpDetailCategoryDriverWasUnprofessional  HelpDetailCategory = "DRIVER_WAS_UNPROFESSIONAL"
	HelpDetailCategoryILostAnItem              HelpDetailCategory = "I_LOST_AN_ITEM"
	HelpDetailCategoryIWantToCancelTheOrder    HelpDetailCategory = "I_WANT_TO_CANCEL_THE_ORDER"
	HelpDetailCategoryIssueWithOrderOrDelivery HelpDetailCategory = "ISSUE_WITH_ORDER_OR_DELIVERY"
	HelpDetailCategoryVehicleWasDifferent      HelpDetailCategory = "VEHICLE_WAS_DIFFERENT"
)

var AllHelpDetailCategory = []HelpDetailCategory{
	HelpDetailCategoryDriverWasUnprofessional,
	HelpDetailCategoryILostAnItem,
	HelpDetailCategoryIWantToCancelTheOrder,
	HelpDetailCategoryIssueWithOrderOrDelivery,
	HelpDetailCategoryVehicleWasDifferent,
}

func (e HelpDetailCategory) IsValid() bool {
	switch e {
	case HelpDetailCategoryDriverWasUnprofessional, HelpDetailCategoryILostAnItem, HelpDetailCategoryIWantToCancelTheOrder, HelpDetailCategoryIssueWithOrderOrDelivery, HelpDetailCategoryVehicleWasDifferent:
		return true
	}
	return false
}

func (e HelpDetailCategory) String() string {
	return string(e)
}

func (e *HelpDetailCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HelpDetailCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HelpDetailCategory", str)
	}
	return nil
}

func (e HelpDetailCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HelpDetailType string

const (
	HelpDetailTypeAll      HelpDetailType = "ALL"
	HelpDetailTypeTitle    HelpDetailType = "TITLE"
	HelpDetailTypeCategory HelpDetailType = "CATEGORY"
	HelpDetailTypeOrder    HelpDetailType = "ORDER"
	HelpDetailTypeStatus   HelpDetailType = "STATUS"
)

var AllHelpDetailType = []HelpDetailType{
	HelpDetailTypeAll,
	HelpDetailTypeTitle,
	HelpDetailTypeCategory,
	HelpDetailTypeOrder,
	HelpDetailTypeStatus,
}

func (e HelpDetailType) IsValid() bool {
	switch e {
	case HelpDetailTypeAll, HelpDetailTypeTitle, HelpDetailTypeCategory, HelpDetailTypeOrder, HelpDetailTypeStatus:
		return true
	}
	return false
}

func (e HelpDetailType) String() string {
	return string(e)
}

func (e *HelpDetailType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HelpDetailType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HelpDetailType", str)
	}
	return nil
}

func (e HelpDetailType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HotelPaymentReportProviderPaymentStatus string

const (
	HotelPaymentReportProviderPaymentStatusSettled   HotelPaymentReportProviderPaymentStatus = "SETTLED"
	HotelPaymentReportProviderPaymentStatusUnsettled HotelPaymentReportProviderPaymentStatus = "UNSETTLED"
)

var AllHotelPaymentReportProviderPaymentStatus = []HotelPaymentReportProviderPaymentStatus{
	HotelPaymentReportProviderPaymentStatusSettled,
	HotelPaymentReportProviderPaymentStatusUnsettled,
}

func (e HotelPaymentReportProviderPaymentStatus) IsValid() bool {
	switch e {
	case HotelPaymentReportProviderPaymentStatusSettled, HotelPaymentReportProviderPaymentStatusUnsettled:
		return true
	}
	return false
}

func (e HotelPaymentReportProviderPaymentStatus) String() string {
	return string(e)
}

func (e *HotelPaymentReportProviderPaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HotelPaymentReportProviderPaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HotelPaymentReportProviderPaymentStatus", str)
	}
	return nil
}

func (e HotelPaymentReportProviderPaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemCategoryType string

const (
	ItemCategoryTypeAll            ItemCategoryType = "ALL"
	ItemCategoryTypeTitle          ItemCategoryType = "TITLE"
	ItemCategoryTypeRestaurantName ItemCategoryType = "RESTAURANT_NAME"
)

var AllItemCategoryType = []ItemCategoryType{
	ItemCategoryTypeAll,
	ItemCategoryTypeTitle,
	ItemCategoryTypeRestaurantName,
}

func (e ItemCategoryType) IsValid() bool {
	switch e {
	case ItemCategoryTypeAll, ItemCategoryTypeTitle, ItemCategoryTypeRestaurantName:
		return true
	}
	return false
}

func (e ItemCategoryType) String() string {
	return string(e)
}

func (e *ItemCategoryType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemCategoryType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemCategoryType", str)
	}
	return nil
}

func (e ItemCategoryType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemTagName string

const (
	ItemTagNameBestseller ItemTagName = "BESTSELLER"
	ItemTagNameNewlyAdded ItemTagName = "NEWLY_ADDED"
	ItemTagNamePromoted   ItemTagName = "PROMOTED"
)

var AllItemTagName = []ItemTagName{
	ItemTagNameBestseller,
	ItemTagNameNewlyAdded,
	ItemTagNamePromoted,
}

func (e ItemTagName) IsValid() bool {
	switch e {
	case ItemTagNameBestseller, ItemTagNameNewlyAdded, ItemTagNamePromoted:
		return true
	}
	return false
}

func (e ItemTagName) String() string {
	return string(e)
}

func (e *ItemTagName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemTagName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemTagName", str)
	}
	return nil
}

func (e ItemTagName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobLaterSearchServiceType string

const (
	JobLaterSearchServiceTypeRide          JobLaterSearchServiceType = "RIDE"
	JobLaterSearchServiceTypeRentalRide    JobLaterSearchServiceType = "RENTAL_RIDE"
	JobLaterSearchServiceTypeDelivery      JobLaterSearchServiceType = "DELIVERY"
	JobLaterSearchServiceTypeOtherServices JobLaterSearchServiceType = "OTHER_SERVICES"
)

var AllJobLaterSearchServiceType = []JobLaterSearchServiceType{
	JobLaterSearchServiceTypeRide,
	JobLaterSearchServiceTypeRentalRide,
	JobLaterSearchServiceTypeDelivery,
	JobLaterSearchServiceTypeOtherServices,
}

func (e JobLaterSearchServiceType) IsValid() bool {
	switch e {
	case JobLaterSearchServiceTypeRide, JobLaterSearchServiceTypeRentalRide, JobLaterSearchServiceTypeDelivery, JobLaterSearchServiceTypeOtherServices:
		return true
	}
	return false
}

func (e JobLaterSearchServiceType) String() string {
	return string(e)
}

func (e *JobLaterSearchServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobLaterSearchServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobLaterSearchServiceType", str)
	}
	return nil
}

func (e JobLaterSearchServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobLaterType string

const (
	JobLaterTypeAll                         JobLaterType = "ALL"
	JobLaterTypeUsers                       JobLaterType = "USERS"
	JobLaterTypeExpectedSourceLocation      JobLaterType = "EXPECTED_SOURCE_LOCATION"
	JobLaterTypeExpectedDestinationLocation JobLaterType = "EXPECTED_DESTINATION_LOCATION"
	JobLaterTypeBookingNumber               JobLaterType = "BOOKING_NUMBER"
	JobLaterTypeStatus                      JobLaterType = "STATUS"
)

var AllJobLaterType = []JobLaterType{
	JobLaterTypeAll,
	JobLaterTypeUsers,
	JobLaterTypeExpectedSourceLocation,
	JobLaterTypeExpectedDestinationLocation,
	JobLaterTypeBookingNumber,
	JobLaterTypeStatus,
}

func (e JobLaterType) IsValid() bool {
	switch e {
	case JobLaterTypeAll, JobLaterTypeUsers, JobLaterTypeExpectedSourceLocation, JobLaterTypeExpectedDestinationLocation, JobLaterTypeBookingNumber, JobLaterTypeStatus:
		return true
	}
	return false
}

func (e JobLaterType) String() string {
	return string(e)
}

func (e *JobLaterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobLaterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobLaterType", str)
	}
	return nil
}

func (e JobLaterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type JobServiceType string

const (
	JobServiceTypeRide          JobServiceType = "RIDE"
	JobServiceTypeHailRide      JobServiceType = "HAIL_RIDE"
	JobServiceTypeRentalRide    JobServiceType = "RENTAL_RIDE"
	JobServiceTypeDelivery      JobServiceType = "DELIVERY"
	JobServiceTypeMultiDelivery JobServiceType = "MULTI_DELIVERY"
	JobServiceTypeOtherServices JobServiceType = "OTHER_SERVICES"
	JobServiceTypeRidePool      JobServiceType = "RIDE_POOL"
)

var AllJobServiceType = []JobServiceType{
	JobServiceTypeRide,
	JobServiceTypeHailRide,
	JobServiceTypeRentalRide,
	JobServiceTypeDelivery,
	JobServiceTypeMultiDelivery,
	JobServiceTypeOtherServices,
	JobServiceTypeRidePool,
}

func (e JobServiceType) IsValid() bool {
	switch e {
	case JobServiceTypeRide, JobServiceTypeHailRide, JobServiceTypeRentalRide, JobServiceTypeDelivery, JobServiceTypeMultiDelivery, JobServiceTypeOtherServices, JobServiceTypeRidePool:
		return true
	}
	return false
}

func (e JobServiceType) String() string {
	return string(e)
}

func (e *JobServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobServiceType", str)
	}
	return nil
}

func (e JobServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// Status of given Job
type JobStatus string

const (
	JobStatusAllStatus        JobStatus = "ALL_STATUS"
	JobStatusOnGoingRideOrJob JobStatus = "ON_GOING_RIDE_OR_JOB"
	JobStatusCompleted        JobStatus = "COMPLETED"
	JobStatusCancelled        JobStatus = "CANCELLED"
)

var AllJobStatus = []JobStatus{
	JobStatusAllStatus,
	JobStatusOnGoingRideOrJob,
	JobStatusCompleted,
	JobStatusCancelled,
}

func (e JobStatus) IsValid() bool {
	switch e {
	case JobStatusAllStatus, JobStatusOnGoingRideOrJob, JobStatusCompleted, JobStatusCancelled:
		return true
	}
	return false
}

func (e JobStatus) String() string {
	return string(e)
}

func (e *JobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobStatus", str)
	}
	return nil
}

func (e JobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocationFor string

const (
	LocationForRestrictionArea    LocationFor = "RESTRICTION_AREA"
	LocationForVehicleType        LocationFor = "VEHICLE_TYPE"
	LocationForLocationWiseFare   LocationFor = "LOCATION_WISE_FARE"
	LocationForUserDeliveryCharge LocationFor = "USER_DELIVERY_CHARGE"
	LocationForAirportSurcharge   LocationFor = "AIRPORT_SURCHARGE"
)

var AllLocationFor = []LocationFor{
	LocationForRestrictionArea,
	LocationForVehicleType,
	LocationForLocationWiseFare,
	LocationForUserDeliveryCharge,
	LocationForAirportSurcharge,
}

func (e LocationFor) IsValid() bool {
	switch e {
	case LocationForRestrictionArea, LocationForVehicleType, LocationForLocationWiseFare, LocationForUserDeliveryCharge, LocationForAirportSurcharge:
		return true
	}
	return false
}

func (e LocationFor) String() string {
	return string(e)
}

func (e *LocationFor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationFor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationFor", str)
	}
	return nil
}

func (e LocationFor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocationWiseFareSearch string

const (
	LocationWiseFareSearchAll                 LocationWiseFareSearch = "ALL"
	LocationWiseFareSearchSourceLocation      LocationWiseFareSearch = "SOURCE_LOCATION"
	LocationWiseFareSearchDestinationLocation LocationWiseFareSearch = "DESTINATION_LOCATION"
	LocationWiseFareSearchFlatFare            LocationWiseFareSearch = "FLAT_FARE"
	LocationWiseFareSearchVehicleType         LocationWiseFareSearch = "VEHICLE_TYPE"
)

var AllLocationWiseFareSearch = []LocationWiseFareSearch{
	LocationWiseFareSearchAll,
	LocationWiseFareSearchSourceLocation,
	LocationWiseFareSearchDestinationLocation,
	LocationWiseFareSearchFlatFare,
	LocationWiseFareSearchVehicleType,
}

func (e LocationWiseFareSearch) IsValid() bool {
	switch e {
	case LocationWiseFareSearchAll, LocationWiseFareSearchSourceLocation, LocationWiseFareSearchDestinationLocation, LocationWiseFareSearchFlatFare, LocationWiseFareSearchVehicleType:
		return true
	}
	return false
}

func (e LocationWiseFareSearch) String() string {
	return string(e)
}

func (e *LocationWiseFareSearch) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationWiseFareSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationWiseFareSearch", str)
	}
	return nil
}

func (e LocationWiseFareSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocationWiseFareSelectStatus string

const (
	LocationWiseFareSelectStatusActive   LocationWiseFareSelectStatus = "ACTIVE"
	LocationWiseFareSelectStatusInactive LocationWiseFareSelectStatus = "INACTIVE"
	LocationWiseFareSelectStatusDelete   LocationWiseFareSelectStatus = "DELETE"
)

var AllLocationWiseFareSelectStatus = []LocationWiseFareSelectStatus{
	LocationWiseFareSelectStatusActive,
	LocationWiseFareSelectStatusInactive,
	LocationWiseFareSelectStatusDelete,
}

func (e LocationWiseFareSelectStatus) IsValid() bool {
	switch e {
	case LocationWiseFareSelectStatusActive, LocationWiseFareSelectStatusInactive, LocationWiseFareSelectStatusDelete:
		return true
	}
	return false
}

func (e LocationWiseFareSelectStatus) String() string {
	return string(e)
}

func (e *LocationWiseFareSelectStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocationWiseFareSelectStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocationWiseFareSelectStatus", str)
	}
	return nil
}

func (e LocationWiseFareSelectStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NewsletterSubscriberStatus string

const (
	NewsletterSubscriberStatusSubscribe   NewsletterSubscriberStatus = "SUBSCRIBE"
	NewsletterSubscriberStatusUnsubscribe NewsletterSubscriberStatus = "UNSUBSCRIBE"
)

var AllNewsletterSubscriberStatus = []NewsletterSubscriberStatus{
	NewsletterSubscriberStatusSubscribe,
	NewsletterSubscriberStatusUnsubscribe,
}

func (e NewsletterSubscriberStatus) IsValid() bool {
	switch e {
	case NewsletterSubscriberStatusSubscribe, NewsletterSubscriberStatusUnsubscribe:
		return true
	}
	return false
}

func (e NewsletterSubscriberStatus) String() string {
	return string(e)
}

func (e *NewsletterSubscriberStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NewsletterSubscriberStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NewsletterSubscriberStatus", str)
	}
	return nil
}

func (e NewsletterSubscriberStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NewsletterSubscriberType string

const (
	NewsletterSubscriberTypeAll   NewsletterSubscriberType = "ALL"
	NewsletterSubscriberTypeName  NewsletterSubscriberType = "NAME"
	NewsletterSubscriberTypeEmail NewsletterSubscriberType = "EMAIL"
)

var AllNewsletterSubscriberType = []NewsletterSubscriberType{
	NewsletterSubscriberTypeAll,
	NewsletterSubscriberTypeName,
	NewsletterSubscriberTypeEmail,
}

func (e NewsletterSubscriberType) IsValid() bool {
	switch e {
	case NewsletterSubscriberTypeAll, NewsletterSubscriberTypeName, NewsletterSubscriberTypeEmail:
		return true
	}
	return false
}

func (e NewsletterSubscriberType) String() string {
	return string(e)
}

func (e *NewsletterSubscriberType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NewsletterSubscriberType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NewsletterSubscriberType", str)
	}
	return nil
}

func (e NewsletterSubscriberType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OfferAppliesOn string

const (
	OfferAppliesOnNone       OfferAppliesOn = "NONE"
	OfferAppliesOnFirstOrder OfferAppliesOn = "FIRST_ORDER"
	OfferAppliesOnAllOrders  OfferAppliesOn = "ALL_ORDERS"
)

var AllOfferAppliesOn = []OfferAppliesOn{
	OfferAppliesOnNone,
	OfferAppliesOnFirstOrder,
	OfferAppliesOnAllOrders,
}

func (e OfferAppliesOn) IsValid() bool {
	switch e {
	case OfferAppliesOnNone, OfferAppliesOnFirstOrder, OfferAppliesOnAllOrders:
		return true
	}
	return false
}

func (e OfferAppliesOn) String() string {
	return string(e)
}

func (e *OfferAppliesOn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OfferAppliesOn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OfferAppliesOn", str)
	}
	return nil
}

func (e OfferAppliesOn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderStatus string

const (
	OrderStatusPlaced     OrderStatus = "PLACED"
	OrderStatusDeclined   OrderStatus = "DECLINED"
	OrderStatusDelivered  OrderStatus = "DELIVERED"
	OrderStatusProcessing OrderStatus = "PROCESSING"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusPlaced,
	OrderStatusDeclined,
	OrderStatusDelivered,
	OrderStatusProcessing,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusPlaced, OrderStatusDeclined, OrderStatusDelivered, OrderStatusProcessing:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderStatusUtilitySearchType string

const (
	OrderStatusUtilitySearchTypeStatusTitle       OrderStatusUtilitySearchType = "STATUS_TITLE"
	OrderStatusUtilitySearchTypeStatusDescription OrderStatusUtilitySearchType = "STATUS_DESCRIPTION"
)

var AllOrderStatusUtilitySearchType = []OrderStatusUtilitySearchType{
	OrderStatusUtilitySearchTypeStatusTitle,
	OrderStatusUtilitySearchTypeStatusDescription,
}

func (e OrderStatusUtilitySearchType) IsValid() bool {
	switch e {
	case OrderStatusUtilitySearchTypeStatusTitle, OrderStatusUtilitySearchTypeStatusDescription:
		return true
	}
	return false
}

func (e OrderStatusUtilitySearchType) String() string {
	return string(e)
}

func (e *OrderStatusUtilitySearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatusUtilitySearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatusUtilitySearchType", str)
	}
	return nil
}

func (e OrderStatusUtilitySearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PageType string

const (
	PageTypeAll   PageType = "ALL"
	PageTypeName  PageType = "NAME"
	PageTypeTitle PageType = "TITLE"
)

var AllPageType = []PageType{
	PageTypeAll,
	PageTypeName,
	PageTypeTitle,
}

func (e PageType) IsValid() bool {
	switch e {
	case PageTypeAll, PageTypeName, PageTypeTitle:
		return true
	}
	return false
}

func (e PageType) String() string {
	return string(e)
}

func (e *PageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PageType", str)
	}
	return nil
}

func (e PageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentBy string

const (
	PaymentByUser         PaymentBy = "USER"
	PaymentByOrganization PaymentBy = "ORGANIZATION"
)

var AllPaymentBy = []PaymentBy{
	PaymentByUser,
	PaymentByOrganization,
}

func (e PaymentBy) IsValid() bool {
	switch e {
	case PaymentByUser, PaymentByOrganization:
		return true
	}
	return false
}

func (e PaymentBy) String() string {
	return string(e)
}

func (e *PaymentBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentBy", str)
	}
	return nil
}

func (e PaymentBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentEnvironment string

const (
	PaymentEnvironmentTest PaymentEnvironment = "TEST"
	PaymentEnvironmentLive PaymentEnvironment = "LIVE"
)

var AllPaymentEnvironment = []PaymentEnvironment{
	PaymentEnvironmentTest,
	PaymentEnvironmentLive,
}

func (e PaymentEnvironment) IsValid() bool {
	switch e {
	case PaymentEnvironmentTest, PaymentEnvironmentLive:
		return true
	}
	return false
}

func (e PaymentEnvironment) String() string {
	return string(e)
}

func (e *PaymentEnvironment) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentEnvironment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentEnvironment", str)
	}
	return nil
}

func (e PaymentEnvironment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentMethodType string

const (
	PaymentMethodTypeCash       PaymentMethodType = "CASH"
	PaymentMethodTypeDebit      PaymentMethodType = "DEBIT"
	PaymentMethodTypeCredit     PaymentMethodType = "CREDIT"
	PaymentMethodTypeNetbanking PaymentMethodType = "NETBANKING"
	PaymentMethodTypeUpi        PaymentMethodType = "UPI"
	PaymentMethodTypeWallet     PaymentMethodType = "WALLET"
)

var AllPaymentMethodType = []PaymentMethodType{
	PaymentMethodTypeCash,
	PaymentMethodTypeDebit,
	PaymentMethodTypeCredit,
	PaymentMethodTypeNetbanking,
	PaymentMethodTypeUpi,
	PaymentMethodTypeWallet,
}

func (e PaymentMethodType) IsValid() bool {
	switch e {
	case PaymentMethodTypeCash, PaymentMethodTypeDebit, PaymentMethodTypeCredit, PaymentMethodTypeNetbanking, PaymentMethodTypeUpi, PaymentMethodTypeWallet:
		return true
	}
	return false
}

func (e PaymentMethodType) String() string {
	return string(e)
}

func (e *PaymentMethodType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMethodType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMethodType", str)
	}
	return nil
}

func (e PaymentMethodType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentMode string

const (
	PaymentModeCash     PaymentMode = "CASH"
	PaymentModeCard     PaymentMode = "CARD"
	PaymentModeCashCard PaymentMode = "CASH_CARD"
)

var AllPaymentMode = []PaymentMode{
	PaymentModeCash,
	PaymentModeCard,
	PaymentModeCashCard,
}

func (e PaymentMode) IsValid() bool {
	switch e {
	case PaymentModeCash, PaymentModeCard, PaymentModeCashCard:
		return true
	}
	return false
}

func (e PaymentMode) String() string {
	return string(e)
}

func (e *PaymentMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentMode", str)
	}
	return nil
}

func (e PaymentMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentReportServiceType string

const (
	PaymentReportServiceTypeRide          PaymentReportServiceType = "RIDE"
	PaymentReportServiceTypeHailRide      PaymentReportServiceType = "HAIL_RIDE"
	PaymentReportServiceTypeRentalRide    PaymentReportServiceType = "RENTAL_RIDE"
	PaymentReportServiceTypeDelivery      PaymentReportServiceType = "DELIVERY"
	PaymentReportServiceTypeOtherServices PaymentReportServiceType = "OTHER_SERVICES"
	PaymentReportServiceTypeRidePool      PaymentReportServiceType = "RIDE_POOL"
)

var AllPaymentReportServiceType = []PaymentReportServiceType{
	PaymentReportServiceTypeRide,
	PaymentReportServiceTypeHailRide,
	PaymentReportServiceTypeRentalRide,
	PaymentReportServiceTypeDelivery,
	PaymentReportServiceTypeOtherServices,
	PaymentReportServiceTypeRidePool,
}

func (e PaymentReportServiceType) IsValid() bool {
	switch e {
	case PaymentReportServiceTypeRide, PaymentReportServiceTypeHailRide, PaymentReportServiceTypeRentalRide, PaymentReportServiceTypeDelivery, PaymentReportServiceTypeOtherServices, PaymentReportServiceTypeRidePool:
		return true
	}
	return false
}

func (e PaymentReportServiceType) String() string {
	return string(e)
}

func (e *PaymentReportServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentReportServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentReportServiceType", str)
	}
	return nil
}

func (e PaymentReportServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentStatus string

const (
	PaymentStatusSettled   PaymentStatus = "SETTLED"
	PaymentStatusUnsettled PaymentStatus = "UNSETTLED"
)

var AllPaymentStatus = []PaymentStatus{
	PaymentStatusSettled,
	PaymentStatusUnsettled,
}

func (e PaymentStatus) IsValid() bool {
	switch e {
	case PaymentStatusSettled, PaymentStatusUnsettled:
		return true
	}
	return false
}

func (e PaymentStatus) String() string {
	return string(e)
}

func (e *PaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentStatus", str)
	}
	return nil
}

func (e PaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PaymentType string

const (
	PaymentTypeCash         PaymentType = "CASH"
	PaymentTypeCard         PaymentType = "CARD"
	PaymentTypeOrganization PaymentType = "ORGANIZATION"
)

var AllPaymentType = []PaymentType{
	PaymentTypeCash,
	PaymentTypeCard,
	PaymentTypeOrganization,
}

func (e PaymentType) IsValid() bool {
	switch e {
	case PaymentTypeCash, PaymentTypeCard, PaymentTypeOrganization:
		return true
	}
	return false
}

func (e PaymentType) String() string {
	return string(e)
}

func (e *PaymentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PaymentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PaymentType", str)
	}
	return nil
}

func (e PaymentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PriceBasedOn string

const (
	PriceBasedOnSiteAdministrator PriceBasedOn = "SITE_ADMINISTRATOR"
	PriceBasedOnProvider          PriceBasedOn = "PROVIDER"
)

var AllPriceBasedOn = []PriceBasedOn{
	PriceBasedOnSiteAdministrator,
	PriceBasedOnProvider,
}

func (e PriceBasedOn) IsValid() bool {
	switch e {
	case PriceBasedOnSiteAdministrator, PriceBasedOnProvider:
		return true
	}
	return false
}

func (e PriceBasedOn) String() string {
	return string(e)
}

func (e *PriceBasedOn) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PriceBasedOn(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PriceBasedOn", str)
	}
	return nil
}

func (e PriceBasedOn) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductSearchType string

const (
	ProductSearchTypeAll            ProductSearchType = "ALL"
	ProductSearchTypeItem           ProductSearchType = "ITEM"
	ProductSearchTypeCategory       ProductSearchType = "CATEGORY"
	ProductSearchTypeRestaurantName ProductSearchType = "RESTAURANT_NAME"
)

var AllProductSearchType = []ProductSearchType{
	ProductSearchTypeAll,
	ProductSearchTypeItem,
	ProductSearchTypeCategory,
	ProductSearchTypeRestaurantName,
}

func (e ProductSearchType) IsValid() bool {
	switch e {
	case ProductSearchTypeAll, ProductSearchTypeItem, ProductSearchTypeCategory, ProductSearchTypeRestaurantName:
		return true
	}
	return false
}

func (e ProductSearchType) String() string {
	return string(e)
}

func (e *ProductSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductSearchType", str)
	}
	return nil
}

func (e ProductSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductStatus string

const (
	ProductStatusActive   ProductStatus = "ACTIVE"
	ProductStatusInactive ProductStatus = "INACTIVE"
	ProductStatusDeleted  ProductStatus = "DELETED"
	ProductStatusPublish  ProductStatus = "PUBLISH"
	ProductStatusPost     ProductStatus = "POST"
	ProductStatusDraft    ProductStatus = "DRAFT"
	ProductStatusPending  ProductStatus = "PENDING"
	ProductStatusPrivate  ProductStatus = "PRIVATE"
)

var AllProductStatus = []ProductStatus{
	ProductStatusActive,
	ProductStatusInactive,
	ProductStatusDeleted,
	ProductStatusPublish,
	ProductStatusPost,
	ProductStatusDraft,
	ProductStatusPending,
	ProductStatusPrivate,
}

func (e ProductStatus) IsValid() bool {
	switch e {
	case ProductStatusActive, ProductStatusInactive, ProductStatusDeleted, ProductStatusPublish, ProductStatusPost, ProductStatusDraft, ProductStatusPending, ProductStatusPrivate:
		return true
	}
	return false
}

func (e ProductStatus) String() string {
	return string(e)
}

func (e *ProductStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatus", str)
	}
	return nil
}

func (e ProductStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProviderStatus string

const (
	ProviderStatusActive   ProviderStatus = "ACTIVE"
	ProviderStatusInactive ProviderStatus = "INACTIVE"
	ProviderStatusDeleted  ProviderStatus = "DELETED"
)

var AllProviderStatus = []ProviderStatus{
	ProviderStatusActive,
	ProviderStatusInactive,
	ProviderStatusDeleted,
}

func (e ProviderStatus) IsValid() bool {
	switch e {
	case ProviderStatusActive, ProviderStatusInactive, ProviderStatusDeleted:
		return true
	}
	return false
}

func (e ProviderStatus) String() string {
	return string(e)
}

func (e *ProviderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProviderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProviderStatus", str)
	}
	return nil
}

func (e ProviderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProviderVehicleStatus string

const (
	ProviderVehicleStatusActive   ProviderVehicleStatus = "ACTIVE"
	ProviderVehicleStatusInactive ProviderVehicleStatus = "INACTIVE"
	ProviderVehicleStatusDeleted  ProviderVehicleStatus = "DELETED"
)

var AllProviderVehicleStatus = []ProviderVehicleStatus{
	ProviderVehicleStatusActive,
	ProviderVehicleStatusInactive,
	ProviderVehicleStatusDeleted,
}

func (e ProviderVehicleStatus) IsValid() bool {
	switch e {
	case ProviderVehicleStatusActive, ProviderVehicleStatusInactive, ProviderVehicleStatusDeleted:
		return true
	}
	return false
}

func (e ProviderVehicleStatus) String() string {
	return string(e)
}

func (e *ProviderVehicleStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProviderVehicleStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProviderVehicleStatus", str)
	}
	return nil
}

func (e ProviderVehicleStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProviderVehicleType string

const (
	ProviderVehicleTypeAll         ProviderVehicleType = "ALL"
	ProviderVehicleTypeVehicle     ProviderVehicleType = "VEHICLE"
	ProviderVehicleTypeCompany     ProviderVehicleType = "COMPANY"
	ProviderVehicleTypeDriver      ProviderVehicleType = "DRIVER"
	ProviderVehicleTypeVehicleType ProviderVehicleType = "VEHICLE_TYPE"
)

var AllProviderVehicleType = []ProviderVehicleType{
	ProviderVehicleTypeAll,
	ProviderVehicleTypeVehicle,
	ProviderVehicleTypeCompany,
	ProviderVehicleTypeDriver,
	ProviderVehicleTypeVehicleType,
}

func (e ProviderVehicleType) IsValid() bool {
	switch e {
	case ProviderVehicleTypeAll, ProviderVehicleTypeVehicle, ProviderVehicleTypeCompany, ProviderVehicleTypeDriver, ProviderVehicleTypeVehicleType:
		return true
	}
	return false
}

func (e ProviderVehicleType) String() string {
	return string(e)
}

func (e *ProviderVehicleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProviderVehicleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProviderVehicleType", str)
	}
	return nil
}

func (e ProviderVehicleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PubSubTechnique string

const (
	PubSubTechniquePubnub        PubSubTechnique = "PUBNUB"
	PubSubTechniqueSocketCluster PubSubTechnique = "SOCKET_CLUSTER"
	PubSubTechniqueYalgaar       PubSubTechnique = "YALGAAR"
	PubSubTechniqueNone          PubSubTechnique = "NONE"
)

var AllPubSubTechnique = []PubSubTechnique{
	PubSubTechniquePubnub,
	PubSubTechniqueSocketCluster,
	PubSubTechniqueYalgaar,
	PubSubTechniqueNone,
}

func (e PubSubTechnique) IsValid() bool {
	switch e {
	case PubSubTechniquePubnub, PubSubTechniqueSocketCluster, PubSubTechniqueYalgaar, PubSubTechniqueNone:
		return true
	}
	return false
}

func (e PubSubTechnique) String() string {
	return string(e)
}

func (e *PubSubTechnique) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PubSubTechnique(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PubSubTechnique", str)
	}
	return nil
}

func (e PubSubTechnique) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RestrictArea string

const (
	RestrictAreaAll     RestrictArea = "ALL"
	RestrictAreaPickup  RestrictArea = "PICKUP"
	RestrictAreaDropoff RestrictArea = "DROPOFF"
)

var AllRestrictArea = []RestrictArea{
	RestrictAreaAll,
	RestrictAreaPickup,
	RestrictAreaDropoff,
}

func (e RestrictArea) IsValid() bool {
	switch e {
	case RestrictAreaAll, RestrictAreaPickup, RestrictAreaDropoff:
		return true
	}
	return false
}

func (e RestrictArea) String() string {
	return string(e)
}

func (e *RestrictArea) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RestrictArea(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RestrictArea", str)
	}
	return nil
}

func (e RestrictArea) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RestrictType string

const (
	RestrictTypeAllowed    RestrictType = "ALLOWED"
	RestrictTypeDisallowed RestrictType = "DISALLOWED"
)

var AllRestrictType = []RestrictType{
	RestrictTypeAllowed,
	RestrictTypeDisallowed,
}

func (e RestrictType) IsValid() bool {
	switch e {
	case RestrictTypeAllowed, RestrictTypeDisallowed:
		return true
	}
	return false
}

func (e RestrictType) String() string {
	return string(e)
}

func (e *RestrictType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RestrictType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RestrictType", str)
	}
	return nil
}

func (e RestrictType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReviewType string

const (
	ReviewTypeRideNumber ReviewType = "RIDE_NUMBER"
	ReviewTypeDriverName ReviewType = "DRIVER_NAME"
	ReviewTypeRiderName  ReviewType = "RIDER_NAME"
	ReviewTypeRate       ReviewType = "RATE"
)

var AllReviewType = []ReviewType{
	ReviewTypeRideNumber,
	ReviewTypeDriverName,
	ReviewTypeRiderName,
	ReviewTypeRate,
}

func (e ReviewType) IsValid() bool {
	switch e {
	case ReviewTypeRideNumber, ReviewTypeDriverName, ReviewTypeRiderName, ReviewTypeRate:
		return true
	}
	return false
}

func (e ReviewType) String() string {
	return string(e)
}

func (e *ReviewType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReviewType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReviewType", str)
	}
	return nil
}

func (e ReviewType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReviewUserType string

const (
	ReviewUserTypeProviders ReviewUserType = "PROVIDERS"
	ReviewUserTypeUsers     ReviewUserType = "USERS"
)

var AllReviewUserType = []ReviewUserType{
	ReviewUserTypeProviders,
	ReviewUserTypeUsers,
}

func (e ReviewUserType) IsValid() bool {
	switch e {
	case ReviewUserTypeProviders, ReviewUserTypeUsers:
		return true
	}
	return false
}

func (e ReviewUserType) String() string {
	return string(e)
}

func (e *ReviewUserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReviewUserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReviewUserType", str)
	}
	return nil
}

func (e ReviewUserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RidePickUpType string

const (
	RidePickUpTypeRideNow   RidePickUpType = "RIDE_NOW"
	RidePickUpTypeRideLater RidePickUpType = "RIDE_LATER"
)

var AllRidePickUpType = []RidePickUpType{
	RidePickUpTypeRideNow,
	RidePickUpTypeRideLater,
}

func (e RidePickUpType) IsValid() bool {
	switch e {
	case RidePickUpTypeRideNow, RidePickUpTypeRideLater:
		return true
	}
	return false
}

func (e RidePickUpType) String() string {
	return string(e)
}

func (e *RidePickUpType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RidePickUpType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RidePickUpType", str)
	}
	return nil
}

func (e RidePickUpType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RideProfileSearchType string

const (
	RideProfileSearchTypeAll         RideProfileSearchType = "ALL"
	RideProfileSearchTypeProfileName RideProfileSearchType = "PROFILE_NAME"
	RideProfileSearchTypeTitle       RideProfileSearchType = "TITLE"
	RideProfileSearchTypeSubTitle    RideProfileSearchType = "SUB_TITLE"
)

var AllRideProfileSearchType = []RideProfileSearchType{
	RideProfileSearchTypeAll,
	RideProfileSearchTypeProfileName,
	RideProfileSearchTypeTitle,
	RideProfileSearchTypeSubTitle,
}

func (e RideProfileSearchType) IsValid() bool {
	switch e {
	case RideProfileSearchTypeAll, RideProfileSearchTypeProfileName, RideProfileSearchTypeTitle, RideProfileSearchTypeSubTitle:
		return true
	}
	return false
}

func (e RideProfileSearchType) String() string {
	return string(e)
}

func (e *RideProfileSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RideProfileSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RideProfileSearchType", str)
	}
	return nil
}

func (e RideProfileSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SEOSettingType string

const (
	SEOSettingTypeAll      SEOSettingType = "ALL"
	SEOSettingTypePageName SEOSettingType = "PAGE_NAME"
)

var AllSEOSettingType = []SEOSettingType{
	SEOSettingTypeAll,
	SEOSettingTypePageName,
}

func (e SEOSettingType) IsValid() bool {
	switch e {
	case SEOSettingTypeAll, SEOSettingTypePageName:
		return true
	}
	return false
}

func (e SEOSettingType) String() string {
	return string(e)
}

func (e *SEOSettingType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SEOSettingType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SEOSettingType", str)
	}
	return nil
}

func (e SEOSettingType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SMSTemplateSearchType string

const (
	SMSTemplateSearchTypeAll      SMSTemplateSearchType = "ALL"
	SMSTemplateSearchTypeSmsTitle SMSTemplateSearchType = "SMS_TITLE"
	SMSTemplateSearchTypeSmsCode  SMSTemplateSearchType = "SMS_CODE"
)

var AllSMSTemplateSearchType = []SMSTemplateSearchType{
	SMSTemplateSearchTypeAll,
	SMSTemplateSearchTypeSmsTitle,
	SMSTemplateSearchTypeSmsCode,
}

func (e SMSTemplateSearchType) IsValid() bool {
	switch e {
	case SMSTemplateSearchTypeAll, SMSTemplateSearchTypeSmsTitle, SMSTemplateSearchTypeSmsCode:
		return true
	}
	return false
}

func (e SMSTemplateSearchType) String() string {
	return string(e)
}

func (e *SMSTemplateSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SMSTemplateSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SMSTemplateSearchType", str)
	}
	return nil
}

func (e SMSTemplateSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchCancelReasonStatus string

const (
	SearchCancelReasonStatusActive   SearchCancelReasonStatus = "ACTIVE"
	SearchCancelReasonStatusInactive SearchCancelReasonStatus = "INACTIVE"
)

var AllSearchCancelReasonStatus = []SearchCancelReasonStatus{
	SearchCancelReasonStatusActive,
	SearchCancelReasonStatusInactive,
}

func (e SearchCancelReasonStatus) IsValid() bool {
	switch e {
	case SearchCancelReasonStatusActive, SearchCancelReasonStatusInactive:
		return true
	}
	return false
}

func (e SearchCancelReasonStatus) String() string {
	return string(e)
}

func (e *SearchCancelReasonStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchCancelReasonStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchCancelReasonStatus", str)
	}
	return nil
}

func (e SearchCancelReasonStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchCancelReasonType string

const (
	SearchCancelReasonTypeAll    SearchCancelReasonType = "ALL"
	SearchCancelReasonTypeReason SearchCancelReasonType = "REASON"
)

var AllSearchCancelReasonType = []SearchCancelReasonType{
	SearchCancelReasonTypeAll,
	SearchCancelReasonTypeReason,
}

func (e SearchCancelReasonType) IsValid() bool {
	switch e {
	case SearchCancelReasonTypeAll, SearchCancelReasonTypeReason:
		return true
	}
	return false
}

func (e SearchCancelReasonType) String() string {
	return string(e)
}

func (e *SearchCancelReasonType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchCancelReasonType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchCancelReasonType", str)
	}
	return nil
}

func (e SearchCancelReasonType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchPackageType string

const (
	SearchPackageTypeAll         SearchPackageType = "ALL"
	SearchPackageTypePackageType SearchPackageType = "PACKAGE_TYPE"
)

var AllSearchPackageType = []SearchPackageType{
	SearchPackageTypeAll,
	SearchPackageTypePackageType,
}

func (e SearchPackageType) IsValid() bool {
	switch e {
	case SearchPackageTypeAll, SearchPackageTypePackageType:
		return true
	}
	return false
}

func (e SearchPackageType) String() string {
	return string(e)
}

func (e *SearchPackageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchPackageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchPackageType", str)
	}
	return nil
}

func (e SearchPackageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchPackageTypeStatus string

const (
	SearchPackageTypeStatusActive   SearchPackageTypeStatus = "ACTIVE"
	SearchPackageTypeStatusInactive SearchPackageTypeStatus = "INACTIVE"
)

var AllSearchPackageTypeStatus = []SearchPackageTypeStatus{
	SearchPackageTypeStatusActive,
	SearchPackageTypeStatusInactive,
}

func (e SearchPackageTypeStatus) IsValid() bool {
	switch e {
	case SearchPackageTypeStatusActive, SearchPackageTypeStatusInactive:
		return true
	}
	return false
}

func (e SearchPackageTypeStatus) String() string {
	return string(e)
}

func (e *SearchPackageTypeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchPackageTypeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchPackageTypeStatus", str)
	}
	return nil
}

func (e SearchPackageTypeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchProviderType string

const (
	SearchProviderTypeProviderName SearchProviderType = "PROVIDER_NAME"
	SearchProviderTypeCompanyName  SearchProviderType = "COMPANY_NAME"
	SearchProviderTypeEMail        SearchProviderType = "E_MAIL"
	SearchProviderTypeMobileNumber SearchProviderType = "MOBILE_NUMBER"
)

var AllSearchProviderType = []SearchProviderType{
	SearchProviderTypeProviderName,
	SearchProviderTypeCompanyName,
	SearchProviderTypeEMail,
	SearchProviderTypeMobileNumber,
}

func (e SearchProviderType) IsValid() bool {
	switch e {
	case SearchProviderTypeProviderName, SearchProviderTypeCompanyName, SearchProviderTypeEMail, SearchProviderTypeMobileNumber:
		return true
	}
	return false
}

func (e SearchProviderType) String() string {
	return string(e)
}

func (e *SearchProviderType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchProviderType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchProviderType", str)
	}
	return nil
}

func (e SearchProviderType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SelectProviderPaymentStatus string

const (
	SelectProviderPaymentStatusSettled   SelectProviderPaymentStatus = "SETTLED"
	SelectProviderPaymentStatusUnsettled SelectProviderPaymentStatus = "UNSETTLED"
)

var AllSelectProviderPaymentStatus = []SelectProviderPaymentStatus{
	SelectProviderPaymentStatusSettled,
	SelectProviderPaymentStatusUnsettled,
}

func (e SelectProviderPaymentStatus) IsValid() bool {
	switch e {
	case SelectProviderPaymentStatusSettled, SelectProviderPaymentStatusUnsettled:
		return true
	}
	return false
}

func (e SelectProviderPaymentStatus) String() string {
	return string(e)
}

func (e *SelectProviderPaymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SelectProviderPaymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SelectProviderPaymentStatus", str)
	}
	return nil
}

func (e SelectProviderPaymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceCategory string

const (
	ServiceCategoryTaxiService         ServiceCategory = "TAXI_SERVICE"
	ServiceCategoryProfessionalService ServiceCategory = "PROFESSIONAL_SERVICE"
	ServiceCategoryRentalService       ServiceCategory = "RENTAL_SERVICE"
	ServiceCategoryDeliveryService     ServiceCategory = "DELIVERY_SERVICE"
)

var AllServiceCategory = []ServiceCategory{
	ServiceCategoryTaxiService,
	ServiceCategoryProfessionalService,
	ServiceCategoryRentalService,
	ServiceCategoryDeliveryService,
}

func (e ServiceCategory) IsValid() bool {
	switch e {
	case ServiceCategoryTaxiService, ServiceCategoryProfessionalService, ServiceCategoryRentalService, ServiceCategoryDeliveryService:
		return true
	}
	return false
}

func (e ServiceCategory) String() string {
	return string(e)
}

func (e *ServiceCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceCategory", str)
	}
	return nil
}

func (e ServiceCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceProviderFlow string

const (
	ServiceProviderFlowService  ServiceProviderFlow = "SERVICE"
	ServiceProviderFlowProvider ServiceProviderFlow = "PROVIDER"
)

var AllServiceProviderFlow = []ServiceProviderFlow{
	ServiceProviderFlowService,
	ServiceProviderFlowProvider,
}

func (e ServiceProviderFlow) IsValid() bool {
	switch e {
	case ServiceProviderFlowService, ServiceProviderFlowProvider:
		return true
	}
	return false
}

func (e ServiceProviderFlow) String() string {
	return string(e)
}

func (e *ServiceProviderFlow) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceProviderFlow(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceProviderFlow", str)
	}
	return nil
}

func (e ServiceProviderFlow) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceStatus string

const (
	ServiceStatusActive   ServiceStatus = "ACTIVE"
	ServiceStatusInactive ServiceStatus = "INACTIVE"
)

var AllServiceStatus = []ServiceStatus{
	ServiceStatusActive,
	ServiceStatusInactive,
}

func (e ServiceStatus) IsValid() bool {
	switch e {
	case ServiceStatusActive, ServiceStatusInactive:
		return true
	}
	return false
}

func (e ServiceStatus) String() string {
	return string(e)
}

func (e *ServiceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceStatus", str)
	}
	return nil
}

func (e ServiceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceSubCategoryStatus string

const (
	ServiceSubCategoryStatusActive   ServiceSubCategoryStatus = "ACTIVE"
	ServiceSubCategoryStatusInactive ServiceSubCategoryStatus = "INACTIVE"
	ServiceSubCategoryStatusDeleted  ServiceSubCategoryStatus = "DELETED"
)

var AllServiceSubCategoryStatus = []ServiceSubCategoryStatus{
	ServiceSubCategoryStatusActive,
	ServiceSubCategoryStatusInactive,
	ServiceSubCategoryStatusDeleted,
}

func (e ServiceSubCategoryStatus) IsValid() bool {
	switch e {
	case ServiceSubCategoryStatusActive, ServiceSubCategoryStatusInactive, ServiceSubCategoryStatusDeleted:
		return true
	}
	return false
}

func (e ServiceSubCategoryStatus) String() string {
	return string(e)
}

func (e *ServiceSubCategoryStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceSubCategoryStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceSubCategoryStatus", str)
	}
	return nil
}

func (e ServiceSubCategoryStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceTypeStatus string

const (
	ServiceTypeStatusActive   ServiceTypeStatus = "ACTIVE"
	ServiceTypeStatusInactive ServiceTypeStatus = "INACTIVE"
	ServiceTypeStatusDeleted  ServiceTypeStatus = "DELETED"
)

var AllServiceTypeStatus = []ServiceTypeStatus{
	ServiceTypeStatusActive,
	ServiceTypeStatusInactive,
	ServiceTypeStatusDeleted,
}

func (e ServiceTypeStatus) IsValid() bool {
	switch e {
	case ServiceTypeStatusActive, ServiceTypeStatusInactive, ServiceTypeStatusDeleted:
		return true
	}
	return false
}

func (e ServiceTypeStatus) String() string {
	return string(e)
}

func (e *ServiceTypeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceTypeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceTypeStatus", str)
	}
	return nil
}

func (e ServiceTypeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceVehicleServiceType string

const (
	ServiceVehicleServiceTypeAll            ServiceVehicleServiceType = "ALL"
	ServiceVehicleServiceTypeVehicleType    ServiceVehicleServiceType = "VEHICLE_TYPE"
	ServiceVehicleServiceTypePricePerKms    ServiceVehicleServiceType = "PRICE_PER_KMS"
	ServiceVehicleServiceTypePricePerMinute ServiceVehicleServiceType = "PRICE_PER_MINUTE"
	ServiceVehicleServiceTypePersonCapacity ServiceVehicleServiceType = "PERSON_CAPACITY"
	ServiceVehicleServiceTypeLocation       ServiceVehicleServiceType = "LOCATION"
	ServiceVehicleServiceTypeServiceType    ServiceVehicleServiceType = "SERVICE_TYPE"
)

var AllServiceVehicleServiceType = []ServiceVehicleServiceType{
	ServiceVehicleServiceTypeAll,
	ServiceVehicleServiceTypeVehicleType,
	ServiceVehicleServiceTypePricePerKms,
	ServiceVehicleServiceTypePricePerMinute,
	ServiceVehicleServiceTypePersonCapacity,
	ServiceVehicleServiceTypeLocation,
	ServiceVehicleServiceTypeServiceType,
}

func (e ServiceVehicleServiceType) IsValid() bool {
	switch e {
	case ServiceVehicleServiceTypeAll, ServiceVehicleServiceTypeVehicleType, ServiceVehicleServiceTypePricePerKms, ServiceVehicleServiceTypePricePerMinute, ServiceVehicleServiceTypePersonCapacity, ServiceVehicleServiceTypeLocation, ServiceVehicleServiceTypeServiceType:
		return true
	}
	return false
}

func (e ServiceVehicleServiceType) String() string {
	return string(e)
}

func (e *ServiceVehicleServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceVehicleServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceVehicleServiceType", str)
	}
	return nil
}

func (e ServiceVehicleServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceVehicleTypeStatus string

const (
	ServiceVehicleTypeStatusActive   ServiceVehicleTypeStatus = "ACTIVE"
	ServiceVehicleTypeStatusInactive ServiceVehicleTypeStatus = "INACTIVE"
	ServiceVehicleTypeStatusDeleted  ServiceVehicleTypeStatus = "DELETED"
)

var AllServiceVehicleTypeStatus = []ServiceVehicleTypeStatus{
	ServiceVehicleTypeStatusActive,
	ServiceVehicleTypeStatusInactive,
	ServiceVehicleTypeStatusDeleted,
}

func (e ServiceVehicleTypeStatus) IsValid() bool {
	switch e {
	case ServiceVehicleTypeStatusActive, ServiceVehicleTypeStatusInactive, ServiceVehicleTypeStatusDeleted:
		return true
	}
	return false
}

func (e ServiceVehicleTypeStatus) String() string {
	return string(e)
}

func (e *ServiceVehicleTypeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceVehicleTypeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceVehicleTypeStatus", str)
	}
	return nil
}

func (e ServiceVehicleTypeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SocialAuthProvder string

const (
	SocialAuthProvderFacebook SocialAuthProvder = "FACEBOOK"
	SocialAuthProvderGoogle   SocialAuthProvder = "GOOGLE"
)

var AllSocialAuthProvder = []SocialAuthProvder{
	SocialAuthProvderFacebook,
	SocialAuthProvderGoogle,
}

func (e SocialAuthProvder) IsValid() bool {
	switch e {
	case SocialAuthProvderFacebook, SocialAuthProvderGoogle:
		return true
	}
	return false
}

func (e SocialAuthProvder) String() string {
	return string(e)
}

func (e *SocialAuthProvder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SocialAuthProvder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SocialAuthProvder", str)
	}
	return nil
}

func (e SocialAuthProvder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StateType string

const (
	StateTypeAll     StateType = "ALL"
	StateTypeCode    StateType = "CODE"
	StateTypeState   StateType = "STATE"
	StateTypeCountry StateType = "COUNTRY"
	StateTypeStatus  StateType = "STATUS"
)

var AllStateType = []StateType{
	StateTypeAll,
	StateTypeCode,
	StateTypeState,
	StateTypeCountry,
	StateTypeStatus,
}

func (e StateType) IsValid() bool {
	switch e {
	case StateTypeAll, StateTypeCode, StateTypeState, StateTypeCountry, StateTypeStatus:
		return true
	}
	return false
}

func (e StateType) String() string {
	return string(e)
}

func (e *StateType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StateType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StateType", str)
	}
	return nil
}

func (e StateType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StoreCategory string

const (
	StoreCategoryFoodDelivery    StoreCategory = "FOOD_DELIVERY"
	StoreCategoryGroceryDelivery StoreCategory = "GROCERY_DELIVERY"
	StoreCategoryWineDelivery    StoreCategory = "WINE_DELIVERY"
)

var AllStoreCategory = []StoreCategory{
	StoreCategoryFoodDelivery,
	StoreCategoryGroceryDelivery,
	StoreCategoryWineDelivery,
}

func (e StoreCategory) IsValid() bool {
	switch e {
	case StoreCategoryFoodDelivery, StoreCategoryGroceryDelivery, StoreCategoryWineDelivery:
		return true
	}
	return false
}

func (e StoreCategory) String() string {
	return string(e)
}

func (e *StoreCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoreCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoreCategory", str)
	}
	return nil
}

func (e StoreCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StoreReviewType string

const (
	StoreReviewTypeAll            StoreReviewType = "ALL"
	StoreReviewTypeOrderName      StoreReviewType = "ORDER_NAME"
	StoreReviewTypeRestaurantName StoreReviewType = "RESTAURANT_NAME"
	StoreReviewTypeUsersName      StoreReviewType = "USERS_NAME"
	StoreReviewTypeRate           StoreReviewType = "RATE"
)

var AllStoreReviewType = []StoreReviewType{
	StoreReviewTypeAll,
	StoreReviewTypeOrderName,
	StoreReviewTypeRestaurantName,
	StoreReviewTypeUsersName,
	StoreReviewTypeRate,
}

func (e StoreReviewType) IsValid() bool {
	switch e {
	case StoreReviewTypeAll, StoreReviewTypeOrderName, StoreReviewTypeRestaurantName, StoreReviewTypeUsersName, StoreReviewTypeRate:
		return true
	}
	return false
}

func (e StoreReviewType) String() string {
	return string(e)
}

func (e *StoreReviewType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoreReviewType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoreReviewType", str)
	}
	return nil
}

func (e StoreReviewType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StoreStatus string

const (
	StoreStatusActive   StoreStatus = "ACTIVE"
	StoreStatusInactive StoreStatus = "INACTIVE"
	StoreStatusDeleted  StoreStatus = "DELETED"
)

var AllStoreStatus = []StoreStatus{
	StoreStatusActive,
	StoreStatusInactive,
	StoreStatusDeleted,
}

func (e StoreStatus) IsValid() bool {
	switch e {
	case StoreStatusActive, StoreStatusInactive, StoreStatusDeleted:
		return true
	}
	return false
}

func (e StoreStatus) String() string {
	return string(e)
}

func (e *StoreStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoreStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoreStatus", str)
	}
	return nil
}

func (e StoreStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StoreType string

const (
	StoreTypeAll          StoreType = "ALL"
	StoreTypeName         StoreType = "NAME"
	StoreTypeEMail        StoreType = "E_MAIL"
	StoreTypeMobileNumber StoreType = "MOBILE_NUMBER"
)

var AllStoreType = []StoreType{
	StoreTypeAll,
	StoreTypeName,
	StoreTypeEMail,
	StoreTypeMobileNumber,
}

func (e StoreType) IsValid() bool {
	switch e {
	case StoreTypeAll, StoreTypeName, StoreTypeEMail, StoreTypeMobileNumber:
		return true
	}
	return false
}

func (e StoreType) String() string {
	return string(e)
}

func (e *StoreType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoreType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoreType", str)
	}
	return nil
}

func (e StoreType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StoreVehicleTypeLocation string

const (
	StoreVehicleTypeLocationAll StoreVehicleTypeLocation = "ALL"
)

var AllStoreVehicleTypeLocation = []StoreVehicleTypeLocation{
	StoreVehicleTypeLocationAll,
}

func (e StoreVehicleTypeLocation) IsValid() bool {
	switch e {
	case StoreVehicleTypeLocationAll:
		return true
	}
	return false
}

func (e StoreVehicleTypeLocation) String() string {
	return string(e)
}

func (e *StoreVehicleTypeLocation) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoreVehicleTypeLocation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoreVehicleTypeLocation", str)
	}
	return nil
}

func (e StoreVehicleTypeLocation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StoreVehicleTypeSearch string

const (
	StoreVehicleTypeSearchAll                                       StoreVehicleTypeSearch = "ALL"
	StoreVehicleTypeSearchType                                      StoreVehicleTypeSearch = "TYPE"
	StoreVehicleTypeSearchDeliveryChargesPerOrderForCompletedOrders StoreVehicleTypeSearch = "DELIVERY_CHARGES_PER_ORDER_FOR_COMPLETED_ORDERS"
	StoreVehicleTypeSearchDeliveryChargesPerOrderForCancelledOrders StoreVehicleTypeSearch = "DELIVERY_CHARGES_PER_ORDER_FOR_CANCELLED_ORDERS"
	StoreVehicleTypeSearchDeliveryRadius                            StoreVehicleTypeSearch = "DELIVERY_RADIUS"
)

var AllStoreVehicleTypeSearch = []StoreVehicleTypeSearch{
	StoreVehicleTypeSearchAll,
	StoreVehicleTypeSearchType,
	StoreVehicleTypeSearchDeliveryChargesPerOrderForCompletedOrders,
	StoreVehicleTypeSearchDeliveryChargesPerOrderForCancelledOrders,
	StoreVehicleTypeSearchDeliveryRadius,
}

func (e StoreVehicleTypeSearch) IsValid() bool {
	switch e {
	case StoreVehicleTypeSearchAll, StoreVehicleTypeSearchType, StoreVehicleTypeSearchDeliveryChargesPerOrderForCompletedOrders, StoreVehicleTypeSearchDeliveryChargesPerOrderForCancelledOrders, StoreVehicleTypeSearchDeliveryRadius:
		return true
	}
	return false
}

func (e StoreVehicleTypeSearch) String() string {
	return string(e)
}

func (e *StoreVehicleTypeSearch) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoreVehicleTypeSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoreVehicleTypeSearch", str)
	}
	return nil
}

func (e StoreVehicleTypeSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StoreVehicleTypeStatus string

const (
	StoreVehicleTypeStatusActive   StoreVehicleTypeStatus = "ACTIVE"
	StoreVehicleTypeStatusInactive StoreVehicleTypeStatus = "INACTIVE"
	StoreVehicleTypeStatusDelete   StoreVehicleTypeStatus = "DELETE"
)

var AllStoreVehicleTypeStatus = []StoreVehicleTypeStatus{
	StoreVehicleTypeStatusActive,
	StoreVehicleTypeStatusInactive,
	StoreVehicleTypeStatusDelete,
}

func (e StoreVehicleTypeStatus) IsValid() bool {
	switch e {
	case StoreVehicleTypeStatusActive, StoreVehicleTypeStatusInactive, StoreVehicleTypeStatusDelete:
		return true
	}
	return false
}

func (e StoreVehicleTypeStatus) String() string {
	return string(e)
}

func (e *StoreVehicleTypeStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StoreVehicleTypeStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StoreVehicleTypeStatus", str)
	}
	return nil
}

func (e StoreVehicleTypeStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TransactionType string

const (
	TransactionTypeDebit  TransactionType = "DEBIT"
	TransactionTypeCredit TransactionType = "CREDIT"
)

var AllTransactionType = []TransactionType{
	TransactionTypeDebit,
	TransactionTypeCredit,
}

func (e TransactionType) IsValid() bool {
	switch e {
	case TransactionTypeDebit, TransactionTypeCredit:
		return true
	}
	return false
}

func (e TransactionType) String() string {
	return string(e)
}

func (e *TransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionType", str)
	}
	return nil
}

func (e TransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserSearchType string

const (
	UserSearchTypeName   UserSearchType = "NAME"
	UserSearchTypeEmail  UserSearchType = "EMAIL"
	UserSearchTypeMobile UserSearchType = "MOBILE"
)

var AllUserSearchType = []UserSearchType{
	UserSearchTypeName,
	UserSearchTypeEmail,
	UserSearchTypeMobile,
}

func (e UserSearchType) IsValid() bool {
	switch e {
	case UserSearchTypeName, UserSearchTypeEmail, UserSearchTypeMobile:
		return true
	}
	return false
}

func (e UserSearchType) String() string {
	return string(e)
}

func (e *UserSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserSearchType", str)
	}
	return nil
}

func (e UserSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "ACTIVE"
	UserStatusInactive UserStatus = "INACTIVE"
	UserStatusDelete   UserStatus = "DELETE"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusInactive,
	UserStatusDelete,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusInactive, UserStatusDelete:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserTypeOptions string

const (
	UserTypeOptionsAllUsers             UserTypeOptions = "ALL_USERS"
	UserTypeOptionsAllProviders         UserTypeOptions = "ALL_PROVIDERS"
	UserTypeOptionsAllLoggedinProviders UserTypeOptions = "ALL_LOGGEDIN_PROVIDERS"
	UserTypeOptionsAllLoggedinUsers     UserTypeOptions = "ALL_LOGGEDIN_USERS"
	UserTypeOptionsAllStores            UserTypeOptions = "ALL_STORES"
	UserTypeOptionsAllInactiveUsers     UserTypeOptions = "ALL_INACTIVE_USERS"
	UserTypeOptionsAllInactiveProviders UserTypeOptions = "ALL_INACTIVE_PROVIDERS"
	UserTypeOptionsAllLoggedinStores    UserTypeOptions = "ALL_LOGGEDIN_STORES"
	UserTypeOptionsAllInactiveStores    UserTypeOptions = "ALL_INACTIVE_STORES"
)

var AllUserTypeOptions = []UserTypeOptions{
	UserTypeOptionsAllUsers,
	UserTypeOptionsAllProviders,
	UserTypeOptionsAllLoggedinProviders,
	UserTypeOptionsAllLoggedinUsers,
	UserTypeOptionsAllStores,
	UserTypeOptionsAllInactiveUsers,
	UserTypeOptionsAllInactiveProviders,
	UserTypeOptionsAllLoggedinStores,
	UserTypeOptionsAllInactiveStores,
}

func (e UserTypeOptions) IsValid() bool {
	switch e {
	case UserTypeOptionsAllUsers, UserTypeOptionsAllProviders, UserTypeOptionsAllLoggedinProviders, UserTypeOptionsAllLoggedinUsers, UserTypeOptionsAllStores, UserTypeOptionsAllInactiveUsers, UserTypeOptionsAllInactiveProviders, UserTypeOptionsAllLoggedinStores, UserTypeOptionsAllInactiveStores:
		return true
	}
	return false
}

func (e UserTypeOptions) String() string {
	return string(e)
}

func (e *UserTypeOptions) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserTypeOptions(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserTypeOptions", str)
	}
	return nil
}

func (e UserTypeOptions) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserWalletReportSearchByBalanceType string

const (
	UserWalletReportSearchByBalanceTypeDeposit    UserWalletReportSearchByBalanceType = "DEPOSIT"
	UserWalletReportSearchByBalanceTypeBooking    UserWalletReportSearchByBalanceType = "BOOKING"
	UserWalletReportSearchByBalanceTypeRefund     UserWalletReportSearchByBalanceType = "REFUND"
	UserWalletReportSearchByBalanceTypeWithdrawal UserWalletReportSearchByBalanceType = "WITHDRAWAL"
	UserWalletReportSearchByBalanceTypeCharges    UserWalletReportSearchByBalanceType = "CHARGES"
	UserWalletReportSearchByBalanceTypeReferral   UserWalletReportSearchByBalanceType = "REFERRAL"
)

var AllUserWalletReportSearchByBalanceType = []UserWalletReportSearchByBalanceType{
	UserWalletReportSearchByBalanceTypeDeposit,
	UserWalletReportSearchByBalanceTypeBooking,
	UserWalletReportSearchByBalanceTypeRefund,
	UserWalletReportSearchByBalanceTypeWithdrawal,
	UserWalletReportSearchByBalanceTypeCharges,
	UserWalletReportSearchByBalanceTypeReferral,
}

func (e UserWalletReportSearchByBalanceType) IsValid() bool {
	switch e {
	case UserWalletReportSearchByBalanceTypeDeposit, UserWalletReportSearchByBalanceTypeBooking, UserWalletReportSearchByBalanceTypeRefund, UserWalletReportSearchByBalanceTypeWithdrawal, UserWalletReportSearchByBalanceTypeCharges, UserWalletReportSearchByBalanceTypeReferral:
		return true
	}
	return false
}

func (e UserWalletReportSearchByBalanceType) String() string {
	return string(e)
}

func (e *UserWalletReportSearchByBalanceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserWalletReportSearchByBalanceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserWalletReportSearchByBalanceType", str)
	}
	return nil
}

func (e UserWalletReportSearchByBalanceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserWalletReportSearchByUserType string

const (
	UserWalletReportSearchByUserTypeProvider UserWalletReportSearchByUserType = "PROVIDER"
	UserWalletReportSearchByUserTypeUser     UserWalletReportSearchByUserType = "USER"
)

var AllUserWalletReportSearchByUserType = []UserWalletReportSearchByUserType{
	UserWalletReportSearchByUserTypeProvider,
	UserWalletReportSearchByUserTypeUser,
}

func (e UserWalletReportSearchByUserType) IsValid() bool {
	switch e {
	case UserWalletReportSearchByUserTypeProvider, UserWalletReportSearchByUserTypeUser:
		return true
	}
	return false
}

func (e UserWalletReportSearchByUserType) String() string {
	return string(e)
}

func (e *UserWalletReportSearchByUserType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserWalletReportSearchByUserType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserWalletReportSearchByUserType", str)
	}
	return nil
}

func (e UserWalletReportSearchByUserType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Validity string

const (
	ValidityPermanent Validity = "PERMANENT"
	ValidityCustom    Validity = "CUSTOM"
)

var AllValidity = []Validity{
	ValidityPermanent,
	ValidityCustom,
}

func (e Validity) IsValid() bool {
	switch e {
	case ValidityPermanent, ValidityCustom:
		return true
	}
	return false
}

func (e Validity) String() string {
	return string(e)
}

func (e *Validity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Validity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Validity", str)
	}
	return nil
}

func (e Validity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleCategory string

const (
	VehicleCategoryHatchback        VehicleCategory = "HATCHBACK"
	VehicleCategorySedan            VehicleCategory = "SEDAN"
	VehicleCategorySuv              VehicleCategory = "SUV"
	VehicleCategoryVan              VehicleCategory = "VAN"
	VehicleCategoryLuxuriousCar     VehicleCategory = "LUXURIOUS_CAR"
	VehicleCategoryHeavyDutyVehicle VehicleCategory = "HEAVY_DUTY_VEHICLE"
)

var AllVehicleCategory = []VehicleCategory{
	VehicleCategoryHatchback,
	VehicleCategorySedan,
	VehicleCategorySuv,
	VehicleCategoryVan,
	VehicleCategoryLuxuriousCar,
	VehicleCategoryHeavyDutyVehicle,
}

func (e VehicleCategory) IsValid() bool {
	switch e {
	case VehicleCategoryHatchback, VehicleCategorySedan, VehicleCategorySuv, VehicleCategoryVan, VehicleCategoryLuxuriousCar, VehicleCategoryHeavyDutyVehicle:
		return true
	}
	return false
}

func (e VehicleCategory) String() string {
	return string(e)
}

func (e *VehicleCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleCategory", str)
	}
	return nil
}

func (e VehicleCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleMakeType string

const (
	VehicleMakeTypeAll    VehicleMakeType = "ALL"
	VehicleMakeTypeMake   VehicleMakeType = "MAKE"
	VehicleMakeTypeStatus VehicleMakeType = "STATUS"
)

var AllVehicleMakeType = []VehicleMakeType{
	VehicleMakeTypeAll,
	VehicleMakeTypeMake,
	VehicleMakeTypeStatus,
}

func (e VehicleMakeType) IsValid() bool {
	switch e {
	case VehicleMakeTypeAll, VehicleMakeTypeMake, VehicleMakeTypeStatus:
		return true
	}
	return false
}

func (e VehicleMakeType) String() string {
	return string(e)
}

func (e *VehicleMakeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleMakeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleMakeType", str)
	}
	return nil
}

func (e VehicleMakeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleModelSearchType string

const (
	VehicleModelSearchTypeAll    VehicleModelSearchType = "ALL"
	VehicleModelSearchTypeTitle  VehicleModelSearchType = "TITLE"
	VehicleModelSearchTypeMake   VehicleModelSearchType = "MAKE"
	VehicleModelSearchTypeStatus VehicleModelSearchType = "STATUS"
)

var AllVehicleModelSearchType = []VehicleModelSearchType{
	VehicleModelSearchTypeAll,
	VehicleModelSearchTypeTitle,
	VehicleModelSearchTypeMake,
	VehicleModelSearchTypeStatus,
}

func (e VehicleModelSearchType) IsValid() bool {
	switch e {
	case VehicleModelSearchTypeAll, VehicleModelSearchTypeTitle, VehicleModelSearchTypeMake, VehicleModelSearchTypeStatus:
		return true
	}
	return false
}

func (e VehicleModelSearchType) String() string {
	return string(e)
}

func (e *VehicleModelSearchType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleModelSearchType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleModelSearchType", str)
	}
	return nil
}

func (e VehicleModelSearchType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleServiceType string

const (
	VehicleServiceTypeRide     VehicleServiceType = "RIDE"
	VehicleServiceTypeDelivery VehicleServiceType = "DELIVERY"
)

var AllVehicleServiceType = []VehicleServiceType{
	VehicleServiceTypeRide,
	VehicleServiceTypeDelivery,
}

func (e VehicleServiceType) IsValid() bool {
	switch e {
	case VehicleServiceTypeRide, VehicleServiceTypeDelivery:
		return true
	}
	return false
}

func (e VehicleServiceType) String() string {
	return string(e)
}

func (e *VehicleServiceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleServiceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleServiceType", str)
	}
	return nil
}

func (e VehicleServiceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleStatusType string

const (
	VehicleStatusTypeEnrouteToPickup VehicleStatusType = "ENROUTE_TO_PICKUP"
	VehicleStatusTypeReachedPickup   VehicleStatusType = "REACHED_PICKUP"
	VehicleStatusTypeJourneyStarted  VehicleStatusType = "JOURNEY_STARTED"
	VehicleStatusTypeAvailable       VehicleStatusType = "AVAILABLE"
	VehicleStatusTypeAll             VehicleStatusType = "ALL"
)

var AllVehicleStatusType = []VehicleStatusType{
	VehicleStatusTypeEnrouteToPickup,
	VehicleStatusTypeReachedPickup,
	VehicleStatusTypeJourneyStarted,
	VehicleStatusTypeAvailable,
	VehicleStatusTypeAll,
}

func (e VehicleStatusType) IsValid() bool {
	switch e {
	case VehicleStatusTypeEnrouteToPickup, VehicleStatusTypeReachedPickup, VehicleStatusTypeJourneyStarted, VehicleStatusTypeAvailable, VehicleStatusTypeAll:
		return true
	}
	return false
}

func (e VehicleStatusType) String() string {
	return string(e)
}

func (e *VehicleStatusType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleStatusType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleStatusType", str)
	}
	return nil
}

func (e VehicleStatusType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VehicleType string

const (
	VehicleTypeCar      VehicleType = "CAR"
	VehicleTypeMotoBike VehicleType = "MOTO_BIKE"
	VehicleTypeCycle    VehicleType = "CYCLE"
	VehicleTypeTruck    VehicleType = "TRUCK"
)

var AllVehicleType = []VehicleType{
	VehicleTypeCar,
	VehicleTypeMotoBike,
	VehicleTypeCycle,
	VehicleTypeTruck,
}

func (e VehicleType) IsValid() bool {
	switch e {
	case VehicleTypeCar, VehicleTypeMotoBike, VehicleTypeCycle, VehicleTypeTruck:
		return true
	}
	return false
}

func (e VehicleType) String() string {
	return string(e)
}

func (e *VehicleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VehicleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VehicleType", str)
	}
	return nil
}

func (e VehicleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VisitLocationType string

const (
	VisitLocationTypeAll                      VisitLocationType = "ALL"
	VisitLocationTypeDestinationLocationTitle VisitLocationType = "DESTINATION_LOCATION_TITLE"
	VisitLocationTypeDestinationLocation      VisitLocationType = "DESTINATION_LOCATION"
	VisitLocationTypeStatus                   VisitLocationType = "STATUS"
)

var AllVisitLocationType = []VisitLocationType{
	VisitLocationTypeAll,
	VisitLocationTypeDestinationLocationTitle,
	VisitLocationTypeDestinationLocation,
	VisitLocationTypeStatus,
}

func (e VisitLocationType) IsValid() bool {
	switch e {
	case VisitLocationTypeAll, VisitLocationTypeDestinationLocationTitle, VisitLocationTypeDestinationLocation, VisitLocationTypeStatus:
		return true
	}
	return false
}

func (e VisitLocationType) String() string {
	return string(e)
}

func (e *VisitLocationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VisitLocationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VisitLocationType", str)
	}
	return nil
}

func (e VisitLocationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WalletTransactionType string

const (
	WalletTransactionTypeCredit WalletTransactionType = "CREDIT"
	WalletTransactionTypeDebit  WalletTransactionType = "DEBIT"
)

var AllWalletTransactionType = []WalletTransactionType{
	WalletTransactionTypeCredit,
	WalletTransactionTypeDebit,
}

func (e WalletTransactionType) IsValid() bool {
	switch e {
	case WalletTransactionTypeCredit, WalletTransactionTypeDebit:
		return true
	}
	return false
}

func (e WalletTransactionType) String() string {
	return string(e)
}

func (e *WalletTransactionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WalletTransactionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WalletTransactionType", str)
	}
	return nil
}

func (e WalletTransactionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WineDeliveryLabelSearch string

const (
	WineDeliveryLabelSearchAll                    WineDeliveryLabelSearch = "ALL"
	WineDeliveryLabelSearchCode                   WineDeliveryLabelSearch = "CODE"
	WineDeliveryLabelSearchValueInEnglishLanguage WineDeliveryLabelSearch = "VALUE_IN_ENGLISH_LANGUAGE"
)

var AllWineDeliveryLabelSearch = []WineDeliveryLabelSearch{
	WineDeliveryLabelSearchAll,
	WineDeliveryLabelSearchCode,
	WineDeliveryLabelSearchValueInEnglishLanguage,
}

func (e WineDeliveryLabelSearch) IsValid() bool {
	switch e {
	case WineDeliveryLabelSearchAll, WineDeliveryLabelSearchCode, WineDeliveryLabelSearchValueInEnglishLanguage:
		return true
	}
	return false
}

func (e WineDeliveryLabelSearch) String() string {
	return string(e)
}

func (e *WineDeliveryLabelSearch) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WineDeliveryLabelSearch(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WineDeliveryLabelSearch", str)
	}
	return nil
}

func (e WineDeliveryLabelSearch) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
